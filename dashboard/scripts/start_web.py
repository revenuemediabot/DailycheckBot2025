#!/usr/bin/env python3
"""
üöÄ DailyCheck Bot Dashboard v4.0 - –ü–û–õ–ù–ê–Ø –ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ–±-–¥–∞—à–±–æ—Ä–¥ —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º–∏ fallback —Å–∏—Å—Ç–µ–º–∞–º–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/start_web.py [--dev] [--port PORT] [--host HOST]
"""

import sys
import os
import argparse
import logging
import signal
import asyncio
import time
import json
import sqlite3
import random
import traceback
from pathlib import Path
from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta
from contextlib import asynccontextmanager

# ============================================================================
# PYTHON PATH SETUP
# ============================================================================

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# ============================================================================
# IMPORTS WITH FALLBACK
# ============================================================================

try:
    import uvicorn
    from fastapi import FastAPI, Request, Response, HTTPException, BackgroundTasks
    from fastapi.staticfiles import StaticFiles
    from fastapi.templating import Jinja2Templates
    from fastapi.middleware.cors import CORSMiddleware
    from fastapi.middleware.gzip import GZipMiddleware
    from fastapi.middleware.trustedhost import TrustedHostMiddleware
    from fastapi.responses import JSONResponse, HTMLResponse, RedirectResponse
    from pydantic import BaseModel, Field
    FASTAPI_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FastAPI: {e}")
    print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements-web.txt")
    sys.exit(1)

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å fallback
try:
    import redis
    REDIS_AVAILABLE = True
except ImportError:
    REDIS_AVAILABLE = False

try:
    import diskcache
    DISKCACHE_AVAILABLE = True
except ImportError:
    DISKCACHE_AVAILABLE = False

try:
    from sqlalchemy import create_engine, text, MetaData, Table, Column, Integer, String, Boolean, DateTime, Text
    from sqlalchemy.orm import sessionmaker
    from sqlalchemy.ext.declarative import declarative_base
    SQLALCHEMY_AVAILABLE = True
except ImportError:
    SQLALCHEMY_AVAILABLE = False

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

def setup_comprehensive_logging(dev_mode: bool = False, log_level: str = "INFO") -> logging.Logger:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ª–æ–≥–æ–≤
    log_dir = Path('logs')
    log_dir.mkdir(exist_ok=True)
    
    # –§–æ—Ä–º–∞—Ç—ã –ª–æ–≥–æ–≤
    detailed_format = '%(asctime)s - %(name)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s'
    simple_format = '%(asctime)s - %(levelname)s - %(message)s'
    
    # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    numeric_level = getattr(logging, log_level.upper(), logging.INFO)
    if dev_mode:
        numeric_level = logging.DEBUG
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    root_logger = logging.getLogger()
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = []
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–¥–µ—Ç–∞–ª—å–Ω—ã–π)
    file_handler = logging.FileHandler(
        log_dir / 'web_dashboard.log', 
        encoding='utf-8',
        mode='a'
    )
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(logging.Formatter(detailed_format))
    handlers.append(file_handler)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(numeric_level)
    console_handler.setFormatter(
        logging.Formatter(detailed_format if dev_mode else simple_format)
    )
    handlers.append(console_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    error_handler = logging.FileHandler(
        log_dir / 'errors.log',
        encoding='utf-8',
        mode='a'
    )
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(logging.Formatter(detailed_format))
    handlers.append(error_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ root logger
    logging.basicConfig(
        level=numeric_level,
        handlers=handlers,
        force=True
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    if not dev_mode:
        logging.getLogger('uvicorn.access').setLevel(logging.WARNING)
        logging.getLogger('uvicorn.error').setLevel(logging.INFO)
        logging.getLogger('sqlalchemy.engine').setLevel(logging.WARNING)
    
    logger = logging.getLogger(__name__)
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    return logger

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π logger (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main)
logger = None

# ============================================================================
# SETTINGS AND CONFIGURATION
# ============================================================================

class ApplicationSettings:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ fallback"""
    
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.PROJECT_NAME = "DailyCheck Bot Dashboard v4.0"
        self.VERSION = "4.0.1"
        self.DESCRIPTION = "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"
        
        # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        self.DEBUG = self._get_bool_env("DEBUG", False)
        self.ENVIRONMENT = os.getenv("ENVIRONMENT", "production" if not self.DEBUG else "development")
        
        # –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.HOST = os.getenv("HOST", "0.0.0.0")
        self.PORT = int(os.getenv("PORT", 10000))
        self.WORKERS = int(os.getenv("WORKERS", 1))
        
        # –ü—É—Ç–∏ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.PROJECT_ROOT = Path(__file__).parent.parent
        self.DATA_DIR = self.PROJECT_ROOT / "data"
        self.LOGS_DIR = self.PROJECT_ROOT / "logs"
        self.STATIC_DIR = self.PROJECT_ROOT / "dashboard" / "static"
        self.TEMPLATES_DIR = self.PROJECT_ROOT / "dashboard" / "templates"
        self.CACHE_DIR = self.DATA_DIR / "cache"
        self.EXPORTS_DIR = self.PROJECT_ROOT / "exports"
        self.BACKUPS_DIR = self.PROJECT_ROOT / "backups"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self._create_directories()
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        self.DATABASE_URL = self._configure_database()
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.REDIS_URL = os.getenv("REDIS_URL")
        self.CACHE_TTL_DEFAULT = int(os.getenv("CACHE_TTL_DEFAULT", 3600))
        self.CACHE_TTL_SHORT = int(os.getenv("CACHE_TTL_SHORT", 300))
        
        # Telegram Bot (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        self.BOT_TOKEN = os.getenv("BOT_TOKEN")
        self.ADMIN_USER_ID = self._get_int_env("ADMIN_USER_ID", None)
        
        # –í–Ω–µ—à–Ω–∏–µ API
        self.OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
        
        # –í–µ–±-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.CORS_ORIGINS = self._parse_cors_origins()
        self.MAX_REQUEST_SIZE = int(os.getenv("MAX_REQUEST_SIZE", 16 * 1024 * 1024))  # 16MB
        self.RATE_LIMIT_REQUESTS = int(os.getenv("RATE_LIMIT_REQUESTS", 100))
        self.RATE_LIMIT_WINDOW = int(os.getenv("RATE_LIMIT_WINDOW", 60))
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        self.SECRET_KEY = os.getenv("SECRET_KEY", "dev-secret-key-change-in-production")
        self.ALLOWED_HOSTS = self._parse_allowed_hosts()
        
        # –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        self.IS_RENDER = bool(os.getenv("RENDER"))
        self.IS_HEROKU = bool(os.getenv("DYNO"))
        self.IS_DOCKER = bool(os.getenv("DOCKER_CONTAINER"))
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self._validate_settings()
        
        if logger:
            logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {self.PROJECT_NAME}")
            logger.info(f"üåç –°—Ä–µ–¥–∞: {self.ENVIRONMENT}")
            logger.info(f"üöÄ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–≤–∫–ª—é—á–µ–Ω' if self.DEBUG else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    
    def _get_bool_env(self, key: str, default: bool = False) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ boolean –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        value = os.getenv(key, "").lower()
        return value in ("true", "1", "yes", "on") if value else default
    
    def _get_int_env(self, key: str, default: Optional[int] = None) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ integer –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            value = os.getenv(key)
            return int(value) if value else default
        except (ValueError, TypeError):
            return default
    
    def _create_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = [
            self.DATA_DIR,
            self.LOGS_DIR,
            self.STATIC_DIR,
            self.TEMPLATES_DIR,
            self.CACHE_DIR,
            self.EXPORTS_DIR,
            self.BACKUPS_DIR,
            self.STATIC_DIR / "css",
            self.STATIC_DIR / "js",
            self.STATIC_DIR / "img",
            self.PROJECT_ROOT / "dashboard" / "api"
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ __init__.py —Ñ–∞–π–ª–æ–≤ –¥–ª—è Python –ø–∞–∫–µ—Ç–æ–≤
        init_files = [
            self.PROJECT_ROOT / "dashboard" / "__init__.py",
            self.PROJECT_ROOT / "dashboard" / "api" / "__init__.py"
        ]
        
        for init_file in init_files:
            if not init_file.exists():
                init_file.write_text("# Dashboard package\n")
    
    def _configure_database(self) -> str:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        database_url = os.getenv("DATABASE_URL")
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Heroku postgres:// –Ω–∞ postgresql://
        if database_url and database_url.startswith("postgres://"):
            database_url = database_url.replace("postgres://", "postgresql://", 1)
        
        # Fallback –Ω–∞ SQLite
        if not database_url:
            database_url = f"sqlite:///{self.DATA_DIR}/dailycheck.db"
        
        return database_url
    
    def _parse_cors_origins(self) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ CORS origins"""
        origins = os.getenv("CORS_ORIGINS", "*")
        if origins == "*":
            return ["*"]
        return [origin.strip() for origin in origins.split(",") if origin.strip()]
    
    def _parse_allowed_hosts(self) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤"""
        hosts = os.getenv("ALLOWED_HOSTS", "*")
        if hosts == "*":
            return ["*"]
        return [host.strip() for host in hosts.split(",") if host.strip()]
    
    def _validate_settings(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
        if not (1 <= self.PORT <= 65535):
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç: {self.PORT}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ—Å—Ç–∞
        if not self.HOST:
            raise ValueError("HOST –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        if not self.DATA_DIR.exists():
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö: {self.DATA_DIR}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
settings = ApplicationSettings()

# ============================================================================
# DATABASE MANAGER WITH ADVANCED FALLBACK
# ============================================================================

class AdvancedDatabaseManager:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
    
    def __init__(self):
        self.db_type = "unknown"
        self.db_available = False
        self.connection = None
        self.engine = None
        self.session_factory = None
        self.metadata = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        self.connection_attempts = 0
        self.last_connection_time = None
        self.connection_errors = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._initialize_database()
    
    def _initialize_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        try:
            # 1. SQLAlchemy (PostgreSQL/MySQL/etc)
            if SQLALCHEMY_AVAILABLE and self._init_sqlalchemy():
                return
            
            # 2. SQLite fallback
            if self._init_sqlite():
                return
            
            # 3. File storage fallback
            self._init_file_storage()
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            logger.error(traceback.format_exc())
            self._init_file_storage()
    
    def _init_sqlalchemy(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLAlchemy —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
        try:
            self.connection_attempts += 1
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            connect_args = {}
            if settings.DATABASE_URL.startswith("sqlite"):
                connect_args = {
                    "check_same_thread": False,
                    "timeout": 30
                }
            
            # –°–æ–∑–¥–∞–Ω–∏–µ engine —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self.engine = create_engine(
                settings.DATABASE_URL,
                pool_pre_ping=True,
                pool_recycle=3600,
                pool_timeout=30,
                max_overflow=20,
                echo=settings.DEBUG,
                connect_args=connect_args
            )
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            with self.engine.connect() as conn:
                result = conn.execute(text("SELECT 1 as test"))
                test_value = result.scalar()
                if test_value != 1:
                    raise Exception("Database test query failed")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü
            self._create_tables()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π
            self.session_factory = sessionmaker(
                autocommit=False,
                autoflush=False,
                bind=self.engine
            )
            
            self.db_type = "sqlalchemy"
            self.db_available = True
            self.last_connection_time = datetime.now()
            
            logger.info("‚úÖ SQLAlchemy –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.DATABASE_URL.split('://')[0]}")
            return True
            
        except Exception as e:
            error_msg = f"SQLAlchemy –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"
            self.connection_errors.append(error_msg)
            logger.warning(f"‚ö†Ô∏è {error_msg}")
            return False
    
    def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.metadata = MetaData()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.users_table = Table(
            'users', self.metadata,
            Column('user_id', Integer, primary_key=True),
            Column('username', String(255)),
            Column('first_name', String(255)),
            Column('last_name', String(255)),
            Column('email', String(255)),
            Column('phone', String(50)),
            Column('level', Integer, default=1),
            Column('xp', Integer, default=0),
            Column('theme', String(50), default='default'),
            Column('language', String(10), default='ru'),
            Column('timezone', String(50), default='UTC'),
            Column('notifications_enabled', Boolean, default=True),
            Column('ai_chat_enabled', Boolean, default=False),
            Column('weekly_goal', Integer, default=0),
            Column('current_streak', Integer, default=0),
            Column('max_streak', Integer, default=0),
            Column('total_tasks', Integer, default=0),
            Column('completed_tasks', Integer, default=0),
            Column('created_at', DateTime, default=datetime.utcnow),
            Column('updated_at', DateTime, default=datetime.utcnow),
            Column('last_activity', DateTime, default=datetime.utcnow),
            Column('last_login', DateTime),
            Column('is_active', Boolean, default=True),
            Column('is_premium', Boolean, default=False)
        )
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
        self.tasks_table = Table(
            'tasks', self.metadata,
            Column('id', Integer, primary_key=True, autoincrement=True),
            Column('user_id', Integer),
            Column('title', Text, nullable=False),
            Column('description', Text),
            Column('category', String(100), default='–ª–∏—á–Ω–æ–µ'),
            Column('priority', String(50), default='—Å—Ä–µ–¥–Ω–∏–π'),
            Column('status', String(50), default='pending'),
            Column('completed', Boolean, default=False),
            Column('rating', Integer),
            Column('difficulty', Integer, default=1),
            Column('estimated_time', Integer),
            Column('actual_time', Integer),
            Column('parent_task_id', Integer),
            Column('order_index', Integer, default=0),
            Column('tags', Text),  # JSON array
            Column('notes', Text),
            Column('completion_notes', Text),
            Column('created_at', DateTime, default=datetime.utcnow),
            Column('updated_at', DateTime, default=datetime.utcnow),
            Column('completed_at', DateTime),
            Column('due_date', DateTime),
            Column('reminder_date', DateTime)
        )
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        self.achievements_table = Table(
            'achievements', self.metadata,
            Column('id', Integer, primary_key=True, autoincrement=True),
            Column('user_id', Integer),
            Column('achievement_type', String(100)),
            Column('achievement_name', String(255)),
            Column('description', Text),
            Column('earned_at', DateTime, default=datetime.utcnow),
            Column('xp_reward', Integer, default=0)
        )
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_table = Table(
            'daily_stats', self.metadata,
            Column('id', Integer, primary_key=True, autoincrement=True),
            Column('date', DateTime),
            Column('user_id', Integer),
            Column('tasks_created', Integer, default=0),
            Column('tasks_completed', Integer, default=0),
            Column('xp_earned', Integer, default=0),
            Column('time_spent', Integer, default=0),  # –≤ –º–∏–Ω—É—Ç–∞—Ö
            Column('streak_count', Integer, default=0)
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        self.metadata.create_all(self.engine)
    
    def _init_sqlite(self) -> bool:
        """Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π SQLite"""
        try:
            self.connection_attempts += 1
            
            db_path = settings.DATA_DIR / "dailycheck.db"
            self.connection = sqlite3.connect(
                db_path, 
                check_same_thread=False,
                timeout=30.0
            )
            self.connection.row_factory = sqlite3.Row
            
            cursor = self.connection.cursor()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º—ã SQLite
            cursor.executescript('''
                PRAGMA foreign_keys = ON;
                PRAGMA journal_mode = WAL;
                PRAGMA synchronous = NORMAL;
                PRAGMA cache_size = 1000;
                PRAGMA temp_store = MEMORY;
                
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    email TEXT,
                    phone TEXT,
                    level INTEGER DEFAULT 1,
                    xp INTEGER DEFAULT 0,
                    theme TEXT DEFAULT 'default',
                    language TEXT DEFAULT 'ru',
                    timezone TEXT DEFAULT 'UTC',
                    notifications_enabled BOOLEAN DEFAULT 1,
                    ai_chat_enabled BOOLEAN DEFAULT 0,
                    weekly_goal INTEGER DEFAULT 0,
                    current_streak INTEGER DEFAULT 0,
                    max_streak INTEGER DEFAULT 0,
                    total_tasks INTEGER DEFAULT 0,
                    completed_tasks INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_login TIMESTAMP,
                    is_active BOOLEAN DEFAULT 1,
                    is_premium BOOLEAN DEFAULT 0
                );
                
                CREATE TABLE IF NOT EXISTS tasks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    title TEXT NOT NULL,
                    description TEXT,
                    category TEXT DEFAULT '–ª–∏—á–Ω–æ–µ',
                    priority TEXT DEFAULT '—Å—Ä–µ–¥–Ω–∏–π',
                    status TEXT DEFAULT 'pending',
                    completed BOOLEAN DEFAULT 0,
                    rating INTEGER,
                    difficulty INTEGER DEFAULT 1,
                    estimated_time INTEGER,
                    actual_time INTEGER,
                    parent_task_id INTEGER,
                    order_index INTEGER DEFAULT 0,
                    tags TEXT,
                    notes TEXT,
                    completion_notes TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    completed_at TIMESTAMP,
                    due_date TIMESTAMP,
                    reminder_date TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id),
                    FOREIGN KEY (parent_task_id) REFERENCES tasks (id)
                );
                
                CREATE TABLE IF NOT EXISTS achievements (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    achievement_type TEXT,
                    achievement_name TEXT,
                    description TEXT,
                    earned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    xp_reward INTEGER DEFAULT 0,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                );
                
                CREATE TABLE IF NOT EXISTS daily_stats (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    date TIMESTAMP,
                    user_id INTEGER,
                    tasks_created INTEGER DEFAULT 0,
                    tasks_completed INTEGER DEFAULT 0,
                    xp_earned INTEGER DEFAULT 0,
                    time_spent INTEGER DEFAULT 0,
                    streak_count INTEGER DEFAULT 0,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                );
                
                -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                CREATE INDEX IF NOT EXISTS idx_tasks_user_id ON tasks(user_id);
                CREATE INDEX IF NOT EXISTS idx_tasks_completed ON tasks(completed);
                CREATE INDEX IF NOT EXISTS idx_tasks_created_at ON tasks(created_at);
                CREATE INDEX IF NOT EXISTS idx_achievements_user_id ON achievements(user_id);
                CREATE INDEX IF NOT EXISTS idx_daily_stats_date ON daily_stats(date);
                CREATE INDEX IF NOT EXISTS idx_daily_stats_user_id ON daily_stats(user_id);
            ''')
            
            self.connection.commit()
            
            self.db_type = "sqlite"
            self.db_available = True
            self.last_connection_time = datetime.now()
            
            logger.info("‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
            return True
            
        except Exception as e:
            error_msg = f"SQLite –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"
            self.connection_errors.append(error_msg)
            logger.warning(f"‚ö†Ô∏è {error_msg}")
            return False
    
    def _init_file_storage(self):
        """–ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON"""
        self.db_type = "file_storage"
        self.db_available = False
        self.last_connection_time = datetime.now()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
        json_files = [
            "users.json",
            "tasks.json", 
            "achievements.json",
            "daily_stats.json",
            "system_stats.json"
        ]
        
        for filename in json_files:
            file_path = settings.DATA_DIR / filename
            if not file_path.exists():
                file_path.write_text("[]", encoding='utf-8')
        
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback")
    
    def get_health_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return {
            "db_type": self.db_type,
            "db_available": self.db_available,
            "connection_attempts": self.connection_attempts,
            "last_connection": self.last_connection_time.isoformat() if self.last_connection_time else None,
            "recent_errors": self.connection_errors[-3:] if self.connection_errors else [],
            "database_url_type": settings.DATABASE_URL.split("://")[0] if settings.DATABASE_URL else "unknown"
        }
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        try:
            if self.db_type == "sqlalchemy" and self.engine:
                with self.engine.connect() as conn:
                    conn.execute(text("SELECT 1"))
                return True
            elif self.db_type == "sqlite" and self.connection:
                cursor = self.connection.cursor()
                cursor.execute("SELECT 1")
                return True
            elif self.db_type == "file_storage":
                return (settings.DATA_DIR / "users.json").exists()
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Database connection test failed: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
db_manager = AdvancedDatabaseManager()

# ============================================================================
# ADVANCED CACHE MANAGER
# ============================================================================

class AdvancedCacheManager:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
    
    def __init__(self):
        self.cache_type = "unknown"
        self.cache_available = False
        self.redis_client = None
        self.disk_cache = None
        self.memory_cache = {}
        self.memory_cache_ttl = {}
        self.cache_stats = {
            "hits": 0,
            "misses": 0,
            "sets": 0,
            "deletes": 0,
            "errors": 0
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
        self._initialize_cache()
    
    def _initialize_cache(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        
        # 1. Redis (–ª—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è production)
        if REDIS_AVAILABLE and self._init_redis():
            return
        
        # 2. DiskCache (—Ö–æ—Ä–æ—à–∏–π fallback)
        if DISKCACHE_AVAILABLE and self._init_diskcache():
            return
        
        # 3. Memory cache (–ø–æ—Å–ª–µ–¥–Ω–∏–π fallback)
        self._init_memory_cache()
    
    def _init_redis(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫—ç—à–∞"""
        try:
            if not settings.REDIS_URL:
                return False
            
            import redis
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.redis_client = redis.from_url(
                settings.REDIS_URL,
                decode_responses=True,
                socket_timeout=5,
                socket_connect_timeout=5,
                retry_on_timeout=True,
                health_check_interval=30
            )
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.redis_client.ping()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Redis
            info = self.redis_client.info()
            redis_version = info.get('redis_version', 'unknown')
            
            self.cache_type = "redis"
            self.cache_available = True
            
            logger.info("‚úÖ Redis –∫—ç—à –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üíæ Redis –≤–µ—Ä—Å–∏—è: {redis_version}")
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    def _init_diskcache(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DiskCache"""
        try:
            import diskcache
            
            cache_dir = settings.CACHE_DIR
            cache_dir.mkdir(exist_ok=True)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DiskCache
            self.disk_cache = diskcache.Cache(
                str(cache_dir),
                size_limit=100 * 1024 * 1024,  # 100MB
                eviction_policy='least-recently-used',
                cull_limit=10
            )
            
            # –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã
            test_key = "__test__"
            self.disk_cache.set(test_key, "test_value", expire=1)
            if self.disk_cache.get(test_key) != "test_value":
                raise Exception("DiskCache test failed")
            self.disk_cache.delete(test_key)
            
            self.cache_type = "diskcache"
            self.cache_available = True
            
            logger.info("‚úÖ DiskCache –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            logger.info(f"üíæ –ö—ç—à –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {cache_dir}")
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è DiskCache –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    def _init_memory_cache(self):
        """In-memory –∫—ç—à –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback"""
        self.memory_cache = {}
        self.memory_cache_ttl = {}
        
        self.cache_type = "memory"
        self.cache_available = True
        
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º in-memory –∫—ç—à (–¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)")
    
    async def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞"""
        try:
            if self.cache_type == "redis":
                data = self.redis_client.get(key)
                if data is not None:
                    self.cache_stats["hits"] += 1
                    return json.loads(data)
                else:
                    self.cache_stats["misses"] += 1
                    return None
                    
            elif self.cache_type == "diskcache":
                data = self.disk_cache.get(key)
                if data is not None:
                    self.cache_stats["hits"] += 1
                    return data
                else:
                    self.cache_stats["misses"] += 1
                    return None
                    
            else:  # memory cache
                if key in self.memory_cache:
                    if time.time() < self.memory_cache_ttl.get(key, 0):
                        self.cache_stats["hits"] += 1
                        return self.memory_cache[key]
                    else:
                        await self.delete(key)
                
                self.cache_stats["misses"] += 1
                return None
                
        except Exception as e:
            self.cache_stats["errors"] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ {key}: {e}")
            return None
    
    async def set(self, key: str, value: Any, ttl: int = None) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à"""
        try:
            if ttl is None:
                ttl = settings.CACHE_TTL_DEFAULT
            
            if self.cache_type == "redis":
                serialized_value = json.dumps(value, default=str)
                result = self.redis_client.setex(key, ttl, serialized_value)
                if result:
                    self.cache_stats["sets"] += 1
                    return True
                    
            elif self.cache_type == "diskcache":
                result = self.disk_cache.set(key, value, expire=ttl)
                if result:
                    self.cache_stats["sets"] += 1
                    return True
                    
            else:  # memory cache
                self.memory_cache[key] = value
                self.memory_cache_ttl[key] = time.time() + ttl
                self.cache_stats["sets"] += 1
                return True
            
            return False
            
        except Exception as e:
            self.cache_stats["errors"] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—ç—à–∞ {key}: {e}")
            return False
    
    async def delete(self, key: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞"""
        try:
            if self.cache_type == "redis":
                result = self.redis_client.delete(key)
                if result:
                    self.cache_stats["deletes"] += 1
                    return True
                    
            elif self.cache_type == "diskcache":
                result = self.disk_cache.delete(key)
                if result:
                    self.cache_stats["deletes"] += 1
                    return True
                    
            else:  # memory cache
                deleted = False
                if key in self.memory_cache:
                    del self.memory_cache[key]
                    deleted = True
                if key in self.memory_cache_ttl:
                    del self.memory_cache_ttl[key]
                    deleted = True
                
                if deleted:
                    self.cache_stats["deletes"] += 1
                    return True
            
            return False
            
        except Exception as e:
            self.cache_stats["errors"] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ {key}: {e}")
            return False
    
    async def clear_expired(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π (–¥–ª—è memory cache)"""
        if self.cache_type == "memory":
            current_time = time.time()
            expired_keys = [
                key for key, ttl in self.memory_cache_ttl.items()
                if current_time > ttl
            ]
            
            for key in expired_keys:
                await self.delete(key)
            
            if expired_keys:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_keys)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
        total_operations = sum(self.cache_stats.values())
        hit_rate = (self.cache_stats["hits"] / max(self.cache_stats["hits"] + self.cache_stats["misses"], 1)) * 100
        
        stats = {
            "cache_type": self.cache_type,
            "cache_available": self.cache_available,
            "hit_rate_percent": round(hit_rate, 2),
            "total_operations": total_operations,
            **self.cache_stats
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫—ç—à–∞
        if self.cache_type == "memory":
            stats["memory_entries"] = len(self.memory_cache)
        elif self.cache_type == "diskcache" and self.disk_cache:
            stats["disk_cache_size"] = len(self.disk_cache)
        
        return stats

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—ç—à–∞
cache_manager = AdvancedCacheManager()

# ============================================================================
# LIFESPAN EVENTS (MODERN FASTAPI)
# ============================================================================

@asynccontextmanager
async def application_lifespan(app: FastAPI):
    """Modern lifespan event handler –¥–ª—è FastAPI"""
    
    # ========== STARTUP ==========
    startup_time = time.time()
    
    try:
        logger.info(f"üöÄ {settings.PROJECT_NAME} –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_manager.db_type}")
        logger.info(f"üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {cache_manager.cache_type}")
        logger.info(f"üåç –°—Ä–µ–¥–∞: {settings.ENVIRONMENT}")
        logger.info(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–≤–∫–ª—é—á–µ–Ω' if settings.DEBUG else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        db_test = await db_manager.test_connection()
        logger.info(f"üóÑÔ∏è –¢–µ—Å—Ç –ë–î: {'‚úÖ OK' if db_test else '‚ùå FAIL'}")
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        cleanup_task = asyncio.create_task(periodic_maintenance())
        app.state.cleanup_task = cleanup_task
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞
        app.state.startup_time = datetime.fromtimestamp(startup_time)
        
        startup_duration = time.time() - startup_time
        logger.info(f"‚úÖ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {startup_duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        yield
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        logger.error(traceback.format_exc())
        yield
    
    # ========== SHUTDOWN ==========
    finally:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        try:
            # –û—Ç–º–µ–Ω–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            if hasattr(app.state, 'cleanup_task'):
                app.state.cleanup_task.cancel()
                try:
                    await app.state.cleanup_task
                except asyncio.CancelledError:
                    pass
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
            if hasattr(db_manager, 'connection') and db_manager.connection:
                db_manager.connection.close()
                logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if hasattr(cache_manager, 'redis_client') and cache_manager.redis_client:
                cache_manager.redis_client.close()
                logger.info("‚úÖ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            
            logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

# ============================================================================
# BACKGROUND TASKS
# ============================================================================

async def periodic_maintenance():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    
    maintenance_interval = 600  # 10 –º–∏–Ω—É—Ç
    
    while True:
        try:
            await asyncio.sleep(maintenance_interval)
            
            logger.debug("üßπ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è...")
            
            # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞
            await cache_manager.clear_expired()
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            cache_stats = cache_manager.get_stats()
            db_health = db_manager.get_health_status()
            
            logger.info(f"üìä –ö—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {cache_stats['hit_rate_percent']:.1f}% hit rate")
            logger.debug(f"üóÑÔ∏è –ë–î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {db_health}")
            
        except asyncio.CancelledError:
            logger.info("üõë –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            break
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏: {e}")

# ============================================================================
# COMPREHENSIVE WEB APPLICATION
# ============================================================================

class ComprehensiveWebApplication:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    
    def __init__(self, dev_mode: bool = False, host: str = "0.0.0.0", port: int = 10000):
        self.dev_mode = dev_mode
        self.host = host
        self.port = port
        self.app = None
        self.server = None
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._setup_signal_handlers()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self._create_application()
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        def signal_handler(signum, frame):
            logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
            # Graceful shutdown –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω uvicorn
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    def _create_application(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = FastAPI(
            title=settings.PROJECT_NAME,
            description=settings.DESCRIPTION,
            version=settings.VERSION,
            docs_url="/docs" if self.dev_mode else None,
            redoc_url="/redoc" if self.dev_mode else None,
            openapi_url="/openapi.json" if self.dev_mode else None,
            debug=self.dev_mode,
            lifespan=application_lifespan
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._setup_middleware()
        self._setup_static_and_templates()
        self._setup_api_routes()
        self._setup_main_routes()
        self._setup_error_handlers()
        
        logger.info("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    
    def _setup_middleware(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""
        
        # Security Headers
        @self.app.middleware("http")
        async def add_security_headers(request: Request, call_next):
            start_time = time.time()
            
            try:
                response = await call_next(request)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if not self.dev_mode:
                    response.headers.update({
                        "X-Content-Type-Options": "nosniff",
                        "X-Frame-Options": "DENY",
                        "X-XSS-Protection": "1; mode=block",
                        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
                        "Referrer-Policy": "strict-origin-when-cross-origin",
                        "Content-Security-Policy": "default-src 'self'; script-src 'self' 'unsafe-inline' cdn.jsdelivr.net unpkg.com cdn.tailwindcss.com; style-src 'self' 'unsafe-inline' cdn.tailwindcss.com;"
                    })
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                process_time = time.time() - start_time
                response.headers["X-Process-Time"] = f"{process_time:.4f}"
                
                return response
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ security middleware: {e}")
                return JSONResponse(
                    status_code=500,
                    content={"detail": "Internal server error", "dev_mode": self.dev_mode}
                )
        
        # Request Logging
        @self.app.middleware("http")
        async def log_requests(request: Request, call_next):
            start_time = time.time()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∫–ª–∏–µ–Ω—Ç–∞
            client_ip = request.headers.get("X-Forwarded-For") or \
                       request.headers.get("X-Real-IP") or \
                       getattr(request.client, 'host', 'unknown')
            
            response = await call_next(request)
            
            process_time = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ –∏–ª–∏ –¥–ª—è –æ—à–∏–±–æ–∫
            if self.dev_mode or response.status_code >= 400:
                logger.info(
                    f"{request.method} {request.url.path} "
                    f"- {response.status_code} "
                    f"- {process_time:.3f}s "
                    f"- {client_ip}"
                )
            
            return response
        
        # Gzip compression
        self.app.add_middleware(GZipMiddleware, minimum_size=1000)
        
        # CORS
        self.app.add_middleware(
            CORSMiddleware,
            allow_origins=settings.CORS_ORIGINS,
            allow_credentials=True,
            allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD"],
            allow_headers=["*"],
        )
        
        # Trusted Host (—Ç–æ–ª—å–∫–æ –¥–ª—è production)
        if not self.dev_mode and settings.ALLOWED_HOSTS != ["*"]:
            self.app.add_middleware(
                TrustedHostMiddleware,
                allowed_hosts=settings.ALLOWED_HOSTS
            )
        
        logger.info("‚úÖ Middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def _setup_static_and_templates(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤"""
        
        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        if settings.STATIC_DIR.exists():
            self.app.mount("/static", StaticFiles(directory=str(settings.STATIC_DIR)), name="static")
            logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: {settings.STATIC_DIR}")
        
        # –®–∞–±–ª–æ–Ω—ã
        if settings.TEMPLATES_DIR.exists():
            self.templates = Jinja2Templates(directory=str(settings.TEMPLATES_DIR))
            logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω—ã: {settings.TEMPLATES_DIR}")
        else:
            self._create_default_templates()
    
    def _create_default_templates(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        
        # –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
        base_template = settings.TEMPLATES_DIR / "base.html"
        base_template.write_text('''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}{{ title or "DailyCheck Bot Dashboard" }}{% endblock %}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        {% block extra_css %}{% endblock %}
    </style>
</head>
<body class="bg-gray-50 dark:bg-gray-900">
    <nav class="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <h1 class="text-xl font-bold text-gray-900 dark:text-white">
                        ü§ñ DailyCheck Bot Dashboard v4.0
                    </h1>
                </div>
                <div class="flex items-center space-x-4">
                    <a href="/api/stats/overview" class="text-blue-600 hover:text-blue-800 dark:text-blue-400">API</a>
                    <a href="/health" class="text-green-600 hover:text-green-800 dark:text-green-400">Health</a>
                    {% if dev_mode %}
                    <a href="/docs" class="text-purple-600 hover:text-purple-800 dark:text-purple-400">Docs</a>
                    {% endif %}
                </div>
            </div>
        </div>
    </nav>
    
    <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        {% block content %}{% endblock %}
    </main>
    
    <footer class="bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 mt-8">
        <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
            <p class="text-center text-sm text-gray-500 dark:text-gray-400">
                DailyCheck Bot Dashboard v4.0 ‚Ä¢ 
                –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {{ db_type }} ‚Ä¢ 
                –ö—ç—à: {{ cache_type }}
            </p>
        </div>
    </footer>
    
    {% block extra_js %}{% endblock %}
</body>
</html>''', encoding='utf-8')
        
        # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        dashboard_template = settings.TEMPLATES_DIR / "dashboard.html"
        dashboard_template.write_text('''{% extends "base.html" %}

{% block content %}
<div class="px-4 py-6 sm:px-0">
    <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                            <span class="text-white text-sm font-medium">üë•</span>
                        </div>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">
                                –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            </dt>
                            <dd class="text-lg font-medium text-gray-900 dark:text-white">
                                {{ stats.total_users | default(0) }}
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                            <span class="text-white text-sm font-medium">üìã</span>
                        </div>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">
                                –í—Å–µ–≥–æ –∑–∞–¥–∞—á
                            </dt>
                            <dd class="text-lg font-medium text-gray-900 dark:text-white">
                                {{ stats.total_tasks | default(0) }}
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center">
                            <span class="text-white text-sm font-medium">‚úÖ</span>
                        </div>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">
                                –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á
                            </dt>
                            <dd class="text-lg font-medium text-gray-900 dark:text-white">
                                {{ stats.completed_tasks | default(0) }}
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center">
                            <span class="text-white text-sm font-medium">‚ö°</span>
                        </div>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">
                                –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è
                            </dt>
                            <dd class="text-lg font-medium text-gray-900 dark:text-white">
                                {{ stats.active_users_today | default(0) }}
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">
                –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </h3>
            <dl class="space-y-2">
                <div class="flex justify-between">
                    <dt class="text-sm text-gray-500 dark:text-gray-400">–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</dt>
                    <dd class="text-sm text-gray-900 dark:text-white font-medium">{{ db_type }}</dd>
                </div>
                <div class="flex justify-between">
                    <dt class="text-sm text-gray-500 dark:text-gray-400">–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ:</dt>
                    <dd class="text-sm text-gray-900 dark:text-white font-medium">{{ cache_type }}</dd>
                </div>
                <div class="flex justify-between">
                    <dt class="text-sm text-gray-500 dark:text-gray-400">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</dt>
                    <dd class="text-sm text-gray-900 dark:text-white font-medium">{{ uptime }}</dd>
                </div>
                <div class="flex justify-between">
                    <dt class="text-sm text-gray-500 dark:text-gray-400">–í–µ—Ä—Å–∏—è:</dt>
                    <dd class="text-sm text-gray-900 dark:text-white font-medium">{{ version }}</dd>
                </div>
            </dl>
        </div>
        
        <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">
                –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏
            </h3>
            <div class="space-y-2">
                <a href="/api/stats/overview" 
                   class="block w-full text-left px-4 py-2 text-sm text-blue-600 hover:text-blue-800 hover:bg-blue-50 dark:hover:bg-blue-900 rounded">
                    üìä API –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                </a>
                <a href="/api/users/" 
                   class="block w-full text-left px-4 py-2 text-sm text-green-600 hover:text-green-800 hover:bg-green-50 dark:hover:bg-green-900 rounded">
                    üë• API –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                </a>
                <a href="/api/charts/user-activity" 
                   class="block w-full text-left px-4 py-2 text-sm text-purple-600 hover:text-purple-800 hover:bg-purple-50 dark:hover:bg-purple-900 rounded">
                    üìà API –ì—Ä–∞—Ñ–∏–∫–æ–≤
                </a>
                <a href="/health" 
                   class="block w-full text-left px-4 py-2 text-sm text-emerald-600 hover:text-emerald-800 hover:bg-emerald-50 dark:hover:bg-emerald-900 rounded">
                    üíö Health Check
                </a>
            </div>
        </div>
    </div>
</div>
{% endblock %}''', encoding='utf-8')
        
        self.templates = Jinja2Templates(directory=str(settings.TEMPLATES_DIR))
        logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    def _setup_api_routes(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–µ—Ä–æ–≤"""
        
        # –ë–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ API
        self._setup_system_api()
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª—å–Ω—ã—Ö API
        self._try_load_modular_apis()
    
    def _setup_system_api(self):
        """–ë–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ API endpoints"""
        
        @self.app.get("/api/health")
        async def comprehensive_health_check():
            """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
            
            uptime = datetime.now() - self.app.state.startup_time
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            db_test = await db_manager.test_connection()
            cache_stats = cache_manager.get_stats()
            
            health_data = {
                "status": "healthy" if db_test else "degraded",
                "service": settings.PROJECT_NAME,
                "version": settings.VERSION,
                "environment": settings.ENVIRONMENT,
                "uptime": str(uptime),
                "uptime_seconds": int(uptime.total_seconds()),
                "timestamp": datetime.now().isoformat(),
                
                "database": {
                    "type": db_manager.db_type,
                    "available": db_manager.db_available,
                    "connection_test": db_test,
                    **db_manager.get_health_status()
                },
                
                "cache": {
                    "type": cache_manager.cache_type,
                    "available": cache_manager.cache_available,
                    **cache_stats
                },
                
                "system": {
                    "dev_mode": self.dev_mode,
                    "host": self.host,
                    "port": self.port,
                    "platform": {
                        "render": settings.IS_RENDER,
                        "heroku": settings.IS_HEROKU,
                        "docker": settings.IS_DOCKER
                    }
                }
            }
            
            return health_data
        
        @self.app.get("/api/stats/overview")
        async def enhanced_stats_overview():
            """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±–∑–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
            
            cache_key = "stats_overview_v2"
            cached = await cache_manager.get(cache_key)
            
            if cached:
                return cached
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            base_stats = {
                "total_users": 250,
                "active_users": 89,
                "active_users_today": 34,
                "total_tasks": 3420,
                "completed_tasks": 2847,
                "pending_tasks": 573,
                "completion_rate": 83.2,
                "weekly_signups": 28,
                "monthly_retention": 76.4,
                "avg_tasks_per_user": 13.7,
                "total_xp_earned": 142750,
                "achievements_unlocked": 1247
            }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            enhanced_stats = {
                **base_stats,
                "trends": {
                    "users_growth": "+12.5%",
                    "tasks_growth": "+8.3%",
                    "completion_rate_change": "+2.1%"
                },
                "top_categories": [
                    {"name": "–†–∞–±–æ—Ç–∞", "count": 1285, "percentage": 37.6},
                    {"name": "–ó–¥–æ—Ä–æ–≤—å–µ", "count": 967, "percentage": 28.3},
                    {"name": "–û–±—É—á–µ–Ω–∏–µ", "count": 684, "percentage": 20.0},
                    {"name": "–õ–∏—á–Ω–æ–µ", "count": 484, "percentage": 14.1}
                ],
                "system_info": {
                    "database_type": db_manager.db_type,
                    "cache_type": cache_manager.cache_type,
                    "uptime": str(datetime.now() - self.app.state.startup_time),
                    "version": settings.VERSION
                },
                "timestamp": datetime.now().isoformat()
            }
            
            # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 5 –º–∏–Ω—É—Ç
            await cache_manager.set(cache_key, enhanced_stats, ttl=300)
            
            return enhanced_stats
        
        @self.app.get("/api/system/info")
        async def detailed_system_info():
            """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
            
            import platform
            import psutil
            
            try:
                # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                cpu_percent = psutil.cpu_percent(interval=1)
                memory = psutil.virtual_memory()
                disk = psutil.disk_usage('/')
                
                system_info = {
                    "system": {
                        "platform": platform.system(),
                        "platform_release": platform.release(),
                        "platform_version": platform.version(),
                        "architecture": platform.machine(),
                        "processor": platform.processor(),
                        "python_version": platform.python_version(),
                        "cpu_count": psutil.cpu_count(),
                        "cpu_percent": cpu_percent
                    },
                    "memory": {
                        "total": memory.total,
                        "available": memory.available,
                        "percent": memory.percent,
                        "used": memory.used,
                        "free": memory.free
                    },
                    "disk": {
                        "total": disk.total,
                        "used": disk.used,
                        "free": disk.free,
                        "percent": (disk.used / disk.total) * 100
                    },
                    "application": {
                        "name": settings.PROJECT_NAME,
                        "version": settings.VERSION,
                        "environment": settings.ENVIRONMENT,
                        "dev_mode": self.dev_mode,
                        "database": db_manager.db_type,
                        "cache": cache_manager.cache_type
                    },
                    "timestamp": datetime.now().isoformat()
                }
                
            except ImportError:
                # Fallback –µ—Å–ª–∏ psutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                system_info = {
                    "system": {
                        "platform": platform.system(),
                        "python_version": platform.python_version(),
                        "cpu_count": os.cpu_count()
                    },
                    "application": {
                        "name": settings.PROJECT_NAME,
                        "version": settings.VERSION,
                        "environment": settings.ENVIRONMENT,
                        "dev_mode": self.dev_mode,
                        "database": db_manager.db_type,
                        "cache": cache_manager.cache_type
                    },
                    "note": "Detailed system metrics unavailable (psutil not installed)",
                    "timestamp": datetime.now().isoformat()
                }
            
            return system_info
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ API endpoints —Å–æ–∑–¥–∞–Ω—ã")
    
    def _try_load_modular_apis(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—å–Ω—ã—Ö API"""
        
        # –°–ø–∏—Å–æ–∫ API –º–æ–¥—É–ª–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        api_modules = [
            ("dashboard.api.users", "users", "/api/users"),
            ("dashboard.api.charts", "charts", "/api/charts"),
            ("dashboard.api.stats", "stats", "/api/stats"),
            ("dashboard.api.tasks", "tasks", "/api/tasks"),
            ("dashboard.api.achievements", "achievements", "/api/achievements")
        ]
        
        loaded_modules = []
        
        for module_path, router_name, prefix in api_modules:
            try:
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
                module = __import__(module_path, fromlist=[router_name])
                router = getattr(module, 'router')
                
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
                self.app.include_router(router, prefix=prefix, tags=[router_name])
                loaded_modules.append(f"{router_name} ({prefix})")
                
                logger.info(f"‚úÖ API –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: {module_path}")
                
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è API –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {module_path} - {e}")
            except AttributeError as e:
                logger.warning(f"‚ö†Ô∏è Router –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥—É–ª–µ {module_path} - {e}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API –º–æ–¥—É–ª—è {module_path}: {e}")
        
        if loaded_modules:
            logger.info(f"üì° –ó–∞–≥—Ä—É–∂–µ–Ω—ã API –º–æ–¥—É–ª–∏: {', '.join(loaded_modules)}")
        else:
            logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å–Ω—ã–µ API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ endpoints")
    
    def _setup_main_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        
        # HEAD –º–µ—Ç–æ–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        @self.app.head("/")
        @self.app.head("/health")
        async def monitoring_head():
            """HEAD endpoints –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
            return Response(status_code=200)
        
        @self.app.get("/", response_class=HTMLResponse)
        async def dashboard_home(request: Request):
            """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats_data = await cache_manager.get("dashboard_stats")
                
                if not stats_data:
                    stats_data = {
                        "total_users": 250,
                        "total_tasks": 3420,
                        "completed_tasks": 2847,
                        "active_users_today": 34
                    }
                    await cache_manager.set("dashboard_stats", stats_data, ttl=300)
                
                # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                uptime = datetime.now() - self.app.state.startup_time
                
                context = {
                    "request": request,
                    "title": settings.PROJECT_NAME,
                    "stats": stats_data,
                    "db_type": db_manager.db_type,
                    "cache_type": cache_manager.cache_type,
                    "uptime": str(uptime),
                    "version": settings.VERSION,
                    "dev_mode": self.dev_mode
                }
                
                # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
                if hasattr(self, 'templates'):
                    return self.templates.TemplateResponse("dashboard.html", context)
                else:
                    return HTMLResponse(self._get_fallback_html(context))
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                return HTMLResponse(self._get_fallback_html({
                    "title": "DailyCheck Bot Dashboard v4.0",
                    "error": str(e)
                }))
        
        @self.app.get("/dashboard")
        async def dashboard_redirect():
            """–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é"""
            return RedirectResponse(url="/", status_code=301)
        
        @self.app.get("/health")
        async def web_health_simple():
            """–ü—Ä–æ—Å—Ç–æ–π health check"""
            uptime = datetime.now() - self.app.state.startup_time
            
            return {
                "status": "healthy",
                "service": "DailyCheck Bot Dashboard",
                "version": settings.VERSION,
                "uptime": str(uptime),
                "database": db_manager.db_type,
                "cache": cache_manager.cache_type,
                "timestamp": datetime.now().isoformat()
            }
        
        @self.app.get("/ping")
        async def ping_endpoint():
            """–ü—Ä–æ—Å—Ç–æ–π ping endpoint"""
            return {
                "ping": "pong",
                "timestamp": datetime.now().isoformat(),
                "service": settings.PROJECT_NAME,
                "version": settings.VERSION
            }
        
        @self.app.get("/api")
        async def api_info():
            """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
            return {
                "name": settings.PROJECT_NAME,
                "version": settings.VERSION,
                "description": settings.DESCRIPTION,
                "docs_url": "/docs" if self.dev_mode else None,
                "health_url": "/api/health",
                "available_endpoints": [
                    "/api/health",
                    "/api/stats/overview",
                    "/api/system/info",
                    "/health",
                    "/ping"
                ],
                "timestamp": datetime.now().isoformat()
            }
        
        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def _get_fallback_html(self, context: dict) -> str:
        """Fallback HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        
        error_info = f"<div class='error'>–û—à–∏–±–∫–∞: {context.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}</div>" if 'error' in context else ""
        
        return f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{context.get('title', 'DailyCheck Bot Dashboard')}</title>
    <style>
        * {{ margin: 0; padding: 0; box-sizing: border-box; }}
        body {{ 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh; display: flex; align-items: center; justify-content: center;
            color: white; padding: 20px;
        }}
        .container {{ 
            text-align: center; max-width: 800px; padding: 40px 20px;
            background: rgba(255,255,255,0.1); border-radius: 20px;
            backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.2);
        }}
        .title {{ font-size: 2.5rem; margin-bottom: 20px; }}
        .stats {{ 
            display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 20px; margin: 30px 0;
        }}
        .stat {{ background: rgba(255,255,255,0.15); padding: 20px; border-radius: 10px; }}
        .stat-number {{ font-size: 2rem; font-weight: bold; margin-bottom: 5px; }}
        .links {{ margin-top: 30px; }}
        .links a {{ 
            display: inline-block; margin: 0 10px; padding: 10px 20px;
            background: rgba(255,255,255,0.2); color: white; text-decoration: none;
            border-radius: 20px; transition: all 0.3s;
        }}
        .links a:hover {{ background: rgba(255,255,255,0.3); }}
        .error {{ 
            background: rgba(255,0,0,0.2); border: 1px solid rgba(255,0,0,0.3);
            padding: 15px; border-radius: 10px; margin: 20px 0;
        }}
        .system-info {{ 
            margin-top: 20px; font-size: 0.9rem; opacity: 0.8;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1 class="title">ü§ñ DailyCheck Bot Dashboard v4.0</h1>
        <p>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π</p>
        
        {error_info}
        
        <div class="stats">
            <div class="stat">
                <div class="stat-number">250</div>
                <div>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
            </div>
            <div class="stat">
                <div class="stat-number">3.4K</div>
                <div>–ó–∞–¥–∞—á</div>
            </div>
            <div class="stat">
                <div class="stat-number">83%</div>
                <div>–í—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
            </div>
            <div class="stat">
                <div class="stat-number">34</div>
                <div>–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
            </div>
        </div>
        
        <div class="links">
            <a href="/api/health">Health Check</a>
            <a href="/api/stats/overview">API Stats</a>
            <a href="/ping">Ping</a>
            {f'<a href="/docs">API Docs</a>' if self.dev_mode else ''}
        </div>
        
        <div class="system-info">
            <p>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {context.get('db_type', 'Unknown')} | 
               –ö—ç—à: {context.get('cache_type', 'Unknown')} | 
               v{context.get('version', '4.0')}</p>
            <p>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {context.get('uptime', 'Unknown')}</p>
        </div>
    </div>
</body>
</html>
        """
    
    def _setup_error_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫"""
        
        @self.app.exception_handler(404)
        async def not_found_handler(request: Request, exc: HTTPException):
            return JSONResponse(
                status_code=404,
                content={
                    "error": "Not Found",
                    "message": f"Endpoint {request.url.path} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "method": request.method,
                    "available_endpoints": [
                        "/", "/health", "/ping", "/api",
                        "/api/health", "/api/stats/overview", "/api/system/info"
                    ],
                    "timestamp": datetime.now().isoformat()
                }
            )
        
        @self.app.exception_handler(500)
        async def internal_error_handler(request: Request, exc: Exception):
            error_id = f"err_{int(time.time())}"
            logger.error(f"Internal server error [{error_id}]: {exc}")
            logger.error(traceback.format_exc())
            
            return JSONResponse(
                status_code=500,
                content={
                    "error": "Internal Server Error",
                    "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                    "error_id": error_id,
                    "dev_mode": self.dev_mode,
                    "dev_details": str(exc) if self.dev_mode else None,
                    "timestamp": datetime.now().isoformat()
                }
            )
        
        @self.app.exception_handler(422)
        async def validation_error_handler(request: Request, exc: Exception):
            return JSONResponse(
                status_code=422,
                content={
                    "error": "Validation Error",
                    "message": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                    "details": str(exc) if self.dev_mode else "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö",
                    "timestamp": datetime.now().isoformat()
                }
            )
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def start_server(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è uvicorn
        config = uvicorn.Config(
            self.app,
            host=self.host,
            port=self.port,
            log_level="debug" if self.dev_mode else "info",
            reload=False,  # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            access_log=self.dev_mode,
            server_header=False,
            date_header=False,
            use_colors=True,
            loop="asyncio"
        )
        
        self.server = uvicorn.Server(config)
        
        logger.info("‚úÖ Dashboard API routes loaded successfully")
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{self.host}:{self.port}")
        logger.info(f"üìä –†–µ–∂–∏–º: {'üîß –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞' if self.dev_mode else 'üè≠ –ü—Ä–æ–¥–∞–∫—à–Ω'}")
        
        if self.dev_mode:
            logger.info(f"üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://{self.host}:{self.port}/docs")
            logger.info(f"üåê –î–∞—à–±–æ—Ä–¥: http://{self.host}:{self.port}/")
        
        logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        try:
            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
            await self.server.serve()
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
            logger.error(traceback.format_exc())
            raise
        finally:
            await self._graceful_shutdown()
    
    async def _graceful_shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            if self.server:
                self.server.should_exit = True
                logger.info("‚úÖ Uvicorn —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            await asyncio.sleep(1)
            
            logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")

# ============================================================================
# MAIN ENTRY POINT
# ============================================================================

async def async_main():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(
        description='–ó–∞–ø—É—Å–∫ DailyCheck Bot Dashboard v4.0',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python scripts/start_web.py --dev                    # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  python scripts/start_web.py --port 8080             # –î—Ä—É–≥–æ–π –ø–æ—Ä—Ç
  python scripts/start_web.py --host 127.0.0.1        # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ö–æ—Å—Ç
  python scripts/start_web.py --log-level DEBUG       # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        '''
    )
    
    parser.add_argument('--dev', action='store_true', 
                       help='–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–≤–∫–ª—é—á–∞–µ—Ç debug, docs, reload)')
    parser.add_argument('--port', type=int, default=settings.PORT,
                       help=f'–ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.PORT})')
    parser.add_argument('--host', default=settings.HOST,
                       help=f'–•–æ—Å—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.HOST})')
    parser.add_argument('--log-level', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'],
                       default='INFO', help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    dev_mode = args.dev or settings.DEBUG or settings.ENVIRONMENT == 'development'
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è dev —Ä–µ–∂–∏–º–∞
    if dev_mode:
        settings.DEBUG = True
        os.environ['ENVIRONMENT'] = 'development'
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    global logger
    logger = setup_comprehensive_logging(dev_mode, args.log_level)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
    logger.info("="*60)
    logger.info(f"üöÄ {settings.PROJECT_NAME}")
    logger.info(f"üìã –í–µ—Ä—Å–∏—è: {settings.VERSION}")
    logger.info(f"üåç –°—Ä–µ–¥–∞: {settings.ENVIRONMENT}")
    logger.info(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–≤–∫–ª—é—á–µ–Ω' if dev_mode else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    logger.info(f"üåê –°–µ—Ä–≤–µ—Ä: http://{args.host}:{args.port}")
    logger.info("="*60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        app = ComprehensiveWebApplication(
            dev_mode=dev_mode,
            host=args.host,
            port=args.port
        )
        
        await app.start_server()
        
    except KeyboardInterrupt:
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(traceback.format_exc())
        sys.exit(1)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
        if sys.version_info < (3, 8):
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –Ω–æ–≤–µ–µ")
            sys.exit(1)
        
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        asyncio.run(async_main())
        
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        sys.exit(1)

# ============================================================================
# ENTRY POINT
# ============================================================================

if __name__ == "__main__":
    main()
