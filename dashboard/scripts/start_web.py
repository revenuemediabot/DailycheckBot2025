#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/start_web.py [--dev] [--port PORT] [--host HOST]
"""

import sys
import os
import argparse
import logging
import signal
import asyncio
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    import uvicorn
    from fastapi import FastAPI, Request, Response
    from fastapi.staticfiles import StaticFiles
    from fastapi.templating import Jinja2Templates
    from fastapi.middleware.cors import CORSMiddleware
    from fastapi.middleware.gzip import GZipMiddleware
    from fastapi.middleware.trustedhost import TrustedHostMiddleware
    from fastapi.responses import JSONResponse
    import asyncio
    import time
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements-web.txt")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging(dev_mode: bool = False):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    log_level = logging.DEBUG if dev_mode else logging.INFO
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = Path('logs')
    log_dir.mkdir(exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    handlers = [
        logging.FileHandler(log_dir / 'web.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
    
    logging.basicConfig(
        format=log_format,
        level=log_level,
        handlers=handlers,
        force=True
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    if not dev_mode:
        logging.getLogger('uvicorn.access').setLevel(logging.WARNING)
        logging.getLogger('uvicorn.error').setLevel(logging.INFO)

logger = logging.getLogger(__name__)

class WebStarter:
    def __init__(self, dev_mode=False, host="0.0.0.0", port=8000):
        self.dev_mode = dev_mode
        self.host = host
        self.port = port
        self.app = None
        self.server = None
        self.shutdown_event = asyncio.Event()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
        self.project_root = Path(__file__).parent.parent
        self.dashboard_dir = self.project_root / "dashboard"
        self.static_dir = self.project_root / "static"
        self.templates_dir = self.dashboard_dir / "templates"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        self.create_directories()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.setup_signal_handlers()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.setup_app()
    
    def create_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = [
            'logs',
            self.static_dir,
            self.dashboard_dir,
            self.templates_dir,
            self.project_root / 'data',
            self.project_root / 'temp'
        ]
        
        for directory in directories:
            Path(directory).mkdir(exist_ok=True)
        
        logger.info("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
    
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        def signal_handler(signum, frame):
            logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
            self.shutdown_event.set()
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    def setup_app(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.app = FastAPI(
            title="Telegram Bot Dashboard",
            description="–í–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
            version="1.0.0",
            docs_url="/docs" if self.dev_mode else None,
            redoc_url="/redoc" if self.dev_mode else None,
            openapi_url="/openapi.json" if self.dev_mode else None,
            debug=self.dev_mode
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
        self.setup_middleware()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤
        self.setup_static_files()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ API
        self.setup_api_routes()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        self.setup_main_routes()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.setup_event_handlers()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
        self.setup_error_handlers()
        
        logger.info("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    def setup_middleware(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""
        
        # Trusted Host middleware (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        if not self.dev_mode:
            self.app.add_middleware(
                TrustedHostMiddleware,
                allowed_hosts=["*"]  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
            )
        
        # CORS middleware
        allowed_origins = ["*"] if self.dev_mode else [
            "https://yourdomain.com",
            "https://*.render.com",
            "https://dashboard-5q28.onrender.com"
        ]
        
        self.app.add_middleware(
            CORSMiddleware,
            allow_origins=allowed_origins,
            allow_credentials=True,
            allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
            allow_headers=["*"],
        )
        
        # Gzip compression
        self.app.add_middleware(GZipMiddleware, minimum_size=1000)
        
        # Security headers middleware
        @self.app.middleware("http")
        async def add_security_headers(request: Request, call_next):
            start_time = time.time()
            
            try:
                response = await call_next(request)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if not self.dev_mode:
                    response.headers["X-Content-Type-Options"] = "nosniff"
                    response.headers["X-Frame-Options"] = "DENY"
                    response.headers["X-XSS-Protection"] = "1; mode=block"
                    response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"
                    response.headers["Referrer-Policy"] = "strict-origin-when-cross-origin"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                process_time = time.time() - start_time
                response.headers["X-Process-Time"] = str(process_time)
                
                return response
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ middleware: {e}")
                return JSONResponse(
                    status_code=500,
                    content={"detail": "Internal server error"}
                )
        
        # Request logging middleware
        @self.app.middleware("http")
        async def log_requests(request: Request, call_next):
            start_time = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º IP –∫–ª–∏–µ–Ω—Ç–∞
            client_ip = request.headers.get("X-Forwarded-For", request.client.host)
            
            response = await call_next(request)
            
            process_time = time.time() - start_time
            
            logger.info(
                f"{request.method} {request.url.path} "
                f"- {response.status_code} "
                f"- {process_time:.3f}s "
                f"- {client_ip}"
            )
            
            return response
        
        logger.info("‚úÖ Middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def setup_static_files(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        if self.static_dir.exists():
            self.app.mount("/static", StaticFiles(directory=str(self.static_dir)), name="static")
            logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã: {self.static_dir}")
        else:
            logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.static_dir}")
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            (self.static_dir / "css").mkdir(parents=True, exist_ok=True)
            (self.static_dir / "js").mkdir(parents=True, exist_ok=True)
            (self.static_dir / "img").mkdir(parents=True, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã
        if self.templates_dir.exists():
            self.templates = Jinja2Templates(directory=str(self.templates_dir))
            logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã: {self.templates_dir}")
        else:
            logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.templates_dir}")
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —à–∞–±–ª–æ–Ω–æ–≤
            self.templates_dir.mkdir(parents=True, exist_ok=True)
            self.create_basic_templates()
    
    def create_basic_templates(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        base_template = self.templates_dir / "base.html"
        if not base_template.exists():
            base_template.write_text("""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Bot Dashboard{% endblock %}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
</head>
<body class="bg-gray-100">
    <nav class="bg-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <h1 class="text-xl font-bold">ü§ñ Bot Dashboard</h1>
                </div>
            </div>
        </div>
    </nav>
    
    <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        {% block content %}{% endblock %}
    </main>
</body>
</html>
            """, encoding='utf-8')
        
        dashboard_template = self.templates_dir / "dashboard.html"
        if not dashboard_template.exists():
            dashboard_template.write_text("""
{% extends "base.html" %}

{% block content %}
<div class="px-4 py-6 sm:px-0">
    <div class="bg-white overflow-hidden shadow rounded-lg">
        <div class="px-4 py-5 sm:p-6">
            <h2 class="text-lg font-medium text-gray-900 mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</h2>
            
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div class="bg-blue-50 overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</dt>
                                    <dd class="text-lg font-medium text-gray-900">{{ stats.users_count or 0 }}</dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="bg-green-50 overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">–ó–∞–¥–∞—á–∏</dt>
                                    <dd class="text-lg font-medium text-gray-900">{{ stats.tasks_count or 0 }}</dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="bg-yellow-50 overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</dt>
                                    <dd class="text-lg font-medium text-gray-900">{{ stats.total_completions or 0 }}</dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="bg-purple-50 overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è</dt>
                                    <dd class="text-lg font-medium text-gray-900">{{ stats.active_users_today or 0 }}</dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
            """, encoding='utf-8')
        
        self.templates = Jinja2Templates(directory=str(self.templates_dir))
        logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    def setup_api_routes(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–µ—Ä–æ–≤"""
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ dashboard
            from dashboard.api.users import router as users_router
            from dashboard.api.tasks import router as tasks_router
            from dashboard.api.stats import router as stats_router
            from dashboard.api.charts import router as charts_router
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
            self.app.include_router(users_router, prefix="/api/users", tags=["users"])
            self.app.include_router(tasks_router, prefix="/api/tasks", tags=["tasks"])
            self.app.include_router(stats_router, prefix="/api/stats", tags=["stats"])
            self.app.include_router(charts_router, prefix="/api/charts", tags=["charts"])
            
            logger.info("‚úÖ API —Ä–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
            
        except ImportError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è API —Ä–æ—É—Ç–µ—Ä–æ–≤: {e}")
            logger.info("–°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ API endpoints...")
            self.setup_basic_api()
    
    def setup_basic_api(self):
        """–ë–∞–∑–æ–≤—ã–µ API endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        @self.app.get("/api/health")
        async def health_check():
            return {
                "status": "healthy",
                "service": "dashboard",
                "version": "1.0.0",
                "dev_mode": self.dev_mode,
                "timestamp": time.time()
            }
        
        @self.app.get("/api/stats/overview")
        async def basic_stats():
            return {
                "users": {
                    "total": 0,
                    "active": 0,
                    "new_today": 0,
                    "new_week": 0
                },
                "tasks": {
                    "total": 0,
                    "completed": 0,
                    "completion_rate": 0,
                    "completed_24h": 0
                },
                "engagement": {
                    "daily_active_rate": 0.0,
                    "task_completion_rate": 0.0,
                    "user_retention": 0.0
                }
            }
        
        @self.app.get("/api/system/info")
        async def system_info():
            import platform
            import psutil
            
            return {
                "system": {
                    "platform": platform.system(),
                    "python_version": platform.python_version(),
                    "cpu_count": os.cpu_count(),
                    "memory_usage": psutil.virtual_memory().percent if 'psutil' in sys.modules else None
                },
                "app": {
                    "dev_mode": self.dev_mode,
                    "host": self.host,
                    "port": self.port
                }
            }
        
        logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–µ API endpoints —Å–æ–∑–¥–∞–Ω—ã")
    
    def setup_main_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        
        from fastapi import Request
        from fastapi.responses import HTMLResponse, RedirectResponse
        
        @self.app.get("/", response_class=HTMLResponse)
        async def dashboard_home(request: Request):
            """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
            try:
                if hasattr(self, 'templates'):
                    return self.templates.TemplateResponse(
                        "dashboard.html", 
                        {
                            "request": request,
                            "stats": {
                                "users_count": 0,
                                "tasks_count": 0,
                                "total_completions": 0,
                                "active_users_today": 0
                            }
                        }
                    )
                else:
                    return HTMLResponse(self.get_basic_dashboard_html())
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
                return HTMLResponse(self.get_basic_dashboard_html())
        
        @self.app.get("/dashboard")
        async def dashboard_redirect():
            """–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é"""
            return RedirectResponse(url="/", status_code=301)
        
        @self.app.get("/health")
        async def web_health():
            """Health check –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞"""
            return {
                "status": "healthy",
                "service": "web_dashboard",
                "timestamp": time.time(),
                "uptime": time.time() - self.start_time if hasattr(self, 'start_time') else 0
            }
        
        @self.app.get("/ping")
        async def ping():
            """–ü—Ä–æ—Å—Ç–æ–π ping endpoint"""
            return {"message": "pong"}
        
        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def get_basic_dashboard_html(self):
        """–ë–∞–∑–æ–≤—ã–π HTML –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"""
        return f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bot Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
</head>
<body class="bg-gray-100">
    <div class="container mx-auto px-4 py-8">
        <div class="bg-white rounded-lg shadow-lg p-6">
            <h1 class="text-3xl font-bold text-gray-800 mb-4">ü§ñ Bot Dashboard</h1>
            
            <div class="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
                <p class="text-green-700">
                    <strong>‚úÖ –°—Ç–∞—Ç—É—Å:</strong> –í–µ–±-–¥–∞—à–±–æ—Ä–¥ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!
                </p>
                <p class="text-green-600 text-sm mt-2">
                    –†–µ–∂–∏–º: {'–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞' if self.dev_mode else '–ü—Ä–æ–¥–∞–∫—à–Ω'} | 
                    –ê–¥—Ä–µ—Å: {self.host}:{self.port}
                </p>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <h3 class="font-semibold text-blue-800">API Status</h3>
                    <p class="text-blue-600">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</p>
                </div>
                
                <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <h3 class="font-semibold text-yellow-800">–®–∞–±–ª–æ–Ω—ã</h3>
                    <p class="text-yellow-600">üîÑ –ë–∞–∑–æ–≤—ã–µ</p>
                </div>
                
                <div class="bg-purple-50 border border-purple-200 rounded-lg p-4">
                    <h3 class="font-semibold text-purple-800">–î–∞–Ω–Ω—ã–µ</h3>
                    <p class="text-purple-600">‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</p>
                </div>
            </div>
            
            <div class="bg-white border rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">üîó API Endpoints:</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <h3 class="font-medium text-gray-700 mb-2">–û—Å–Ω–æ–≤–Ω—ã–µ:</h3>
                        <ul class="space-y-1 text-sm">
                            <li><a href="/api/health" class="text-blue-600 hover:underline">/api/health</a> - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è</li>
                            <li><a href="/api/stats/overview" class="text-blue-600 hover:underline">/api/stats/overview</a> - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</li>
                            <li><a href="/api/system/info" class="text-blue-600 hover:underline">/api/system/info</a> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</li>
                        </ul>
                    </div>
                    <div>
                        <h3 class="font-medium text-gray-700 mb-2">–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:</h3>
                        <ul class="space-y-1 text-sm">
                            {"<li><a href='/docs' class='text-blue-600 hover:underline'>/docs</a> - API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</li>" if self.dev_mode else "<li class='text-gray-400'>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ</li>"}
                            <li><a href="/ping" class="text-blue-600 hover:underline">/ping</a> - Ping test</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
        """
    
    def setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        
        @self.app.on_event("startup")
        async def startup_event():
            logger.info("üöÄ –í–µ–±-–¥–∞—à–±–æ—Ä–¥ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            self.start_time = time.time()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∫—ç—à—É –∏ —Ç.–¥.
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
                await self.check_system_resources()
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
                await self.initialize_external_services()
                
                logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        
        @self.app.on_event("shutdown")
        async def shutdown_event():
            logger.info("üõë –í–µ–±-–¥–∞—à–±–æ—Ä–¥ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            try:
                await self.cleanup_resources()
                logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def check_system_resources(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–ø–æ–∫
            required_dirs = [self.project_root, self.dashboard_dir]
            for directory in required_dirs:
                if not directory.exists():
                    logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
            import shutil
            total, used, free = shutil.disk_usage(self.project_root)
            free_gb = free // (1024**3)
            
            if free_gb < 1:  # –ú–µ–Ω—å—à–µ 1 –ì–ë
                logger.warning(f"‚ö†Ô∏è –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: {free_gb} –ì–ë")
            
            logger.info(f"üíæ –°–≤–æ–±–æ–¥–Ω–æ –º–µ—Å—Ç–∞: {free_gb} –ì–ë")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
    
    async def initialize_external_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:
            # - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            # - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis/–∫—ç—à–∞  
            # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö API
            # - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            
            logger.info("üîß –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
    
    async def cleanup_resources(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É:
            # - –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
            # - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            # - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            
            logger.info("üßπ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
    
    def setup_error_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫"""
        
        @self.app.exception_handler(404)
        async def not_found_handler(request: Request, exc):
            return JSONResponse(
                status_code=404,
                content={
                    "detail": "Endpoint not found",
                    "path": str(request.url.path),
                    "method": request.method
                }
            )
        
        @self.app.exception_handler(500)
        async def internal_error_handler(request: Request, exc):
            logger.error(f"Internal server error: {exc}")
            return JSONResponse(
                status_code=500,
                content={
                    "detail": "Internal server error",
                    "dev_mode": self.dev_mode
                }
            )
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def start_server(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        
        config = uvicorn.Config(
            self.app,
            host=self.host,
            port=self.port,
            log_level="debug" if self.dev_mode else "info",
            reload=False,  # –û—Ç–∫–ª—é—á–∞–µ–º reload –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            access_log=self.dev_mode,
            server_header=False,
            date_header=False,
            use_colors=True
        )
        
        self.server = uvicorn.Server(config)
        
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{self.host}:{self.port}")
        logger.info(f"üìä –†–µ–∂–∏–º: {'–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞' if self.dev_mode else '–ü—Ä–æ–¥–∞–∫—à–Ω'}")
        logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            await self.server.serve()
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
            raise
        finally:
            await self.graceful_shutdown()
    
    async def graceful_shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            if self.server:
                self.server.should_exit = True
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            await asyncio.sleep(1)
            
            logger.info("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

async def async_main():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞')
    parser.add_argument('--dev', action='store_true', help='–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--port', type=int, default=8000, help='–ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--host', default="0.0.0.0", help='–•–æ—Å—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--reload', action='store_true', help='–ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö')
    parser.add_argument('--log-level', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'], 
                       default='INFO', help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    dev_mode = args.dev or args.reload or os.getenv('ENVIRONMENT') == 'development'
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(dev_mode)
    
    if dev_mode:
        os.environ['ENVIRONMENT'] = 'development'
        logger.info("üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    port = int(os.getenv('PORT', args.port))
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    try:
        starter = WebStarter(dev_mode=dev_mode, host=args.host, port=port)
        await starter.start_server()
        
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–∫–∞!")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        sys.exit(1)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        asyncio.run(async_main())
    except KeyboardInterrupt:
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
