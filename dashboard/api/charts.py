#!/usr/bin/env python3
"""
Charts API –¥–ª—è DailyCheck Bot Dashboard v4.0
–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

import sys
import os
import logging
from pathlib import Path
from datetime import datetime, timedelta
from collections import defaultdict
from typing import List, Optional, Dict, Any
import json
import sqlite3
import random

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    from fastapi import APIRouter, HTTPException, Query, Depends, Response
    from pydantic import BaseModel
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FastAPI: {e}")
    raise

logger = logging.getLogger(__name__)

# ============================================================================
# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° DATABASE MANAGER
# ============================================================================

class ChartDataManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
    
    def __init__(self):
        self.data_dir = Path("data")
        self.data_dir.mkdir(exist_ok=True)
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite
        self.db_path = self.data_dir / "dailycheck.db"
        self.db_available = self._check_database()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        if not self.db_available:
            self._init_sample_data()
    
    def _check_database(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self.db_path.exists():
                conn = sqlite3.connect(self.db_path)
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                tables = cursor.fetchall()
                conn.close()
                
                if tables:
                    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
                    return True
            
            logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            return False
    
    def _init_sample_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.sample_users = self._generate_sample_users()
        self.sample_tasks = self._generate_sample_tasks()
        self.sample_activity = self._generate_sample_activity()
        logger.info("üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    def _generate_sample_users(self) -> Dict[int, Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = {}
        levels = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
        
        for i in range(150):
            user_id = 1000 + i
            join_days_ago = random.randint(1, 365)
            join_date = datetime.now() - timedelta(days=join_days_ago)
            
            users[user_id] = {
                "user_id": user_id,
                "username": f"user_{i}",
                "first_name": f"User{i}",
                "level": random.choice(levels),
                "xp": random.randint(0, 5000),
                "theme": random.choice(["default", "dark", "blue", "green", "purple"]),
                "join_date": join_date.isoformat(),
                "last_activity": (datetime.now() - timedelta(hours=random.randint(0, 168))).isoformat(),
                "completed_tasks": self._generate_user_tasks(user_id, join_date)
            }
        
        return users
    
    def _generate_user_tasks(self, user_id: int, join_date: datetime) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        tasks = []
        categories = ["—Ä–∞–±–æ—Ç–∞", "–∑–¥–æ—Ä–æ–≤—å–µ", "–æ–±—É—á–µ–Ω–∏–µ", "–ª–∏—á–Ω–æ–µ", "—Ñ–∏–Ω–∞–Ω—Å—ã"]
        priorities = ["–Ω–∏–∑–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–≤—ã—Å–æ–∫–∏–π"]
        difficulties = ["easy", "medium", "hard"]
        
        num_tasks = random.randint(5, 50)
        
        for i in range(num_tasks):
            task_date = join_date + timedelta(days=random.randint(0, (datetime.now() - join_date).days))
            
            task = {
                "task_id": f"{user_id}_{i}",
                "title": f"–ó–∞–¥–∞—á–∞ {i+1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
                "category": random.choice(categories),
                "priority": random.choice(priorities),
                "difficulty": random.choice(difficulties),
                "completed": random.choice([True, False]),
                "xp_reward": random.randint(15, 50),
                "created_at": task_date.isoformat(),
                "completed_at": (task_date + timedelta(hours=random.randint(1, 72))).isoformat() if random.choice([True, False]) else None
            }
            
            tasks.append(task)
        
        return tasks
    
    def _generate_sample_activity(self) -> Dict[str, List[Dict[str, Any]]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        activity = {"daily": [], "monthly": []}
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        for i in range(30):
            date = datetime.now() - timedelta(days=29-i)
            activity["daily"].append({
                "date": date.strftime("%Y-%m-%d"),
                "new_users": random.randint(0, 8),
                "active_users": random.randint(10, 45),
                "completed_tasks": random.randint(20, 120),
                "xp_earned": random.randint(500, 3000)
            })
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤
        for i in range(12):
            month_date = datetime.now().replace(day=1) - timedelta(days=32 * i)
            activity["monthly"].append({
                "month": month_date.strftime("%Y-%m"),
                "new_users": random.randint(20, 80),
                "completed_tasks": random.randint(500, 2500),
                "xp_earned": random.randint(10000, 50000)
            })
        
        activity["monthly"].reverse()
        
        return activity
    
    def get_daily_activity(self, days: int = 30) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if self.db_available:
            return self._get_daily_activity_from_db(days)
        else:
            return self.sample_activity["daily"][-days:]
    
    def _get_daily_activity_from_db(self, days: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            activity_data = []
            
            for i in range(days):
                date = datetime.now() - timedelta(days=days-1-i)
                date_str = date.strftime("%Y-%m-%d")
                
                # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                cursor.execute("""
                    SELECT COUNT(*) as new_users 
                    FROM users 
                    WHERE DATE(created_at) = ?
                """, (date_str,))
                new_users = cursor.fetchone()['new_users']
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                cursor.execute("""
                    SELECT COUNT(DISTINCT user_id) as active_users 
                    FROM tasks 
                    WHERE DATE(created_at) = ?
                """, (date_str,))
                active_users = cursor.fetchone()['active_users']
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                cursor.execute("""
                    SELECT COUNT(*) as completed_tasks 
                    FROM tasks 
                    WHERE DATE(completed_at) = ? AND completed = 1
                """, (date_str,))
                completed_tasks = cursor.fetchone()['completed_tasks']
                
                activity_data.append({
                    "date": date_str,
                    "new_users": new_users,
                    "active_users": active_users,
                    "completed_tasks": completed_tasks,
                    "xp_earned": completed_tasks * 25  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç XP
                })
            
            conn.close()
            return activity_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –ë–î: {e}")
            return self.sample_activity["daily"][-days:]
    
    def get_users_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if self.db_available:
            return self._get_users_stats_from_db()
        else:
            return self._get_users_stats_from_sample()
    
    def _get_users_stats_from_db(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º
            cursor.execute("""
                SELECT level, COUNT(*) as count 
                FROM users 
                GROUP BY level 
                ORDER BY level
            """)
            levels_data = cursor.fetchall()
            user_levels = {row['level']: row['count'] for row in levels_data}
            
            conn.close()
            
            return {
                "user_levels": user_levels,
                "total_users": sum(user_levels.values())
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {e}")
            return self._get_users_stats_from_sample()
    
    def _get_users_stats_from_sample(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        user_levels = defaultdict(int)
        
        for user in self.sample_users.values():
            user_levels[user['level']] += 1
        
        return {
            "user_levels": dict(user_levels),
            "total_users": len(self.sample_users)
        }
    
    def get_tasks_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á"""
        if self.db_available:
            return self._get_tasks_stats_from_db()
        else:
            return self._get_tasks_stats_from_sample()
    
    def _get_tasks_stats_from_db(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á –∏–∑ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            cursor.execute("""
                SELECT category, COUNT(*) as count 
                FROM tasks 
                GROUP BY category 
                ORDER BY count DESC
            """)
            categories_data = cursor.fetchall()
            task_categories = {row['category']: row['count'] for row in categories_data}
            
            conn.close()
            
            return {
                "task_categories": task_categories,
                "total_tasks": sum(task_categories.values())
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á –∏–∑ –ë–î: {e}")
            return self._get_tasks_stats_from_sample()
    
    def _get_tasks_stats_from_sample(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        task_categories = defaultdict(int)
        
        for user in self.sample_users.values():
            for task in user['completed_tasks']:
                task_categories[task['category']] += 1
        
        return {
            "task_categories": dict(task_categories),
            "total_tasks": sum(task_categories.values())
        }
    
    def get_all_users(self) -> Dict[int, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if self.db_available:
            return self._get_all_users_from_db()
        else:
            return self.sample_users
    
    def _get_all_users_from_db(self) -> Dict[int, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute("SELECT * FROM users")
            users_data = cursor.fetchall()
            
            users = {}
            for row in users_data:
                user_dict = dict(row)
                user_id = user_dict['user_id']
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute("SELECT * FROM tasks WHERE user_id = ?", (user_id,))
                tasks_data = cursor.fetchall()
                user_dict['completed_tasks'] = [dict(task) for task in tasks_data]
                
                users[user_id] = user_dict
            
            conn.close()
            return users
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {e}")
            return self.sample_users
    
    def get_all_tasks(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        if self.db_available:
            return self._get_all_tasks_from_db()
        else:
            return self._get_all_tasks_from_sample()
    
    def _get_all_tasks_from_db(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute("SELECT * FROM tasks")
            tasks_data = cursor.fetchall()
            
            tasks = {}
            for row in tasks_data:
                task_dict = dict(row)
                task_id = str(task_dict.get('id', task_dict.get('task_id', '')))
                tasks[task_id] = task_dict
            
            conn.close()
            return tasks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ –ë–î: {e}")
            return self._get_all_tasks_from_sample()
    
    def _get_all_tasks_from_sample(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        all_tasks = {}
        
        for user in self.sample_users.values():
            for task in user['completed_tasks']:
                task_id = task['task_id']
                all_tasks[task_id] = task
        
        return all_tasks

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
chart_data_manager = ChartDataManager()

# ============================================================================
# DEPENDENCY FUNCTIONS
# ============================================================================

def get_data_manager() -> ChartDataManager:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    return chart_data_manager

# ============================================================================
# ROUTER SETUP
# ============================================================================

router = APIRouter(prefix="/api/charts", tags=["charts"])

# ============================================================================
# PYDANTIC MODELS
# ============================================================================

class ChartDataset(BaseModel):
    label: str
    data: List[Any]
    borderColor: Optional[str] = None
    backgroundColor: Optional[str] = None
    tension: Optional[float] = None
    fill: Optional[bool] = None

class ChartResponse(BaseModel):
    labels: List[str]
    datasets: List[Dict[str, Any]]
    options: Optional[Dict[str, Any]] = None

# ============================================================================
# CHART ENDPOINTS
# ============================================================================

@router.get("/user-activity", response_model=Dict[str, Any])
async def get_user_activity_chart(
    days: int = Query(30, ge=7, le=365, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
    data_manager: ChartDataManager = Depends(get_data_manager)
):
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    try:
        activity_data = data_manager.get_daily_activity(days)
        
        return {
            "labels": [item["date"] for item in activity_data],
            "datasets": [
                {
                    "label": "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                    "data": [item["new_users"] for item in activity_data],
                    "borderColor": "#3B82F6",
                    "backgroundColor": "rgba(59, 130, 246, 0.1)",
                    "tension": 0.4,
                    "fill": True
                },
                {
                    "label": "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                    "data": [item["active_users"] for item in activity_data],
                    "borderColor": "#10B981",
                    "backgroundColor": "rgba(16, 185, 129, 0.1)",
                    "tension": 0.4,
                    "fill": True
                }
            ],
            "options": {
                "responsive": True,
                "plugins": {
                    "title": {
                        "display": True,
                        "text": "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                    },
                    "legend": {
                        "position": "top"
                    }
                },
                "scales": {
                    "y": {
                        "beginAtZero": True,
                        "ticks": {
                            "stepSize": 1
                        }
                    }
                }
            }
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

@router.get("/task-completion", response_model=Dict[str, Any])
async def get_task_completion_chart(
    days: int = Query(30, ge=7, le=365, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
    data_manager: ChartDataManager = Depends(get_data_manager)
):
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
    
    try:
        activity_data = data_manager.get_daily_activity(days)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
        moving_average = []
        window_size = 7  # 7-–¥–Ω–µ–≤–Ω–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
        
        for i in range(len(activity_data)):
            if i < window_size - 1:
                moving_average.append(None)
            else:
                avg = sum(activity_data[j]["completed_tasks"] for j in range(i - window_size + 1, i + 1)) / window_size
                moving_average.append(round(avg, 1))
        
        return {
            "labels": [item["date"] for item in activity_data],
            "datasets": [
                {
                    "label": "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
                    "data": [item["completed_tasks"] for item in activity_data],
                    "borderColor": "#F59E0B",
                    "backgroundColor": "rgba(245, 158, 11, 0.1)",
                    "tension": 0.4,
                    "fill": True,
                    "type": "line"
                },
                {
                    "label": "–¢—Ä–µ–Ω–¥ (7 –¥–Ω–µ–π)",
                    "data": moving_average,
                    "borderColor": "#EF4444",
                    "backgroundColor": "transparent",
                    "borderWidth": 2,
                    "borderDash": [5, 5],
                    "tension": 0.4,
                    "pointRadius": 0,
                    "type": "line"
                }
            ],
            "options": {
                "responsive": True,
                "plugins": {
                    "title": {
                        "display": True,
                        "text": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –¥–Ω—è–º"
                    },
                    "legend": {
                        "position": "top"
                    }
                },
                "scales": {
                    "y": {
                        "beginAtZero": True
                    }
                }
            }
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

@router.get("/level-distribution", response_model=Dict[str, Any])
async def get_level_distribution_chart(
    data_manager: ChartDataManager = Depends(get_data_manager)
):
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    try:
        users_stats = data_manager.get_users_stats()
        user_levels = users_stats["user_levels"]
        
        if not user_levels:
            return {
                "labels": [],
                "datasets": [],
                "message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"
            }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏
        sorted_levels = sorted(user_levels.keys())
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
        colors = [
            "#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", 
            "#9966FF", "#FF9F40", "#FF6384", "#C9CBCF",
            "#4BC0C0", "#36A2EB", "#FF6384", "#FFCE56",
            "#9966FF", "#FF9F40", "#4BC0C0", "#36A2EB"
        ]
        
        return {
            "labels": [f"–£—Ä–æ–≤–µ–Ω—å {level}" for level in sorted_levels],
            "datasets": [
                {
                    "data": [user_levels[level] for level in sorted_levels],
                    "backgroundColor": colors[:len(sorted_levels)],
                    "borderWidth": 2,
                    "borderColor": "#fff"
                }
            ],
            "options": {
                "responsive": True,
                "plugins": {
                    "title": {
                        "display": True,
                        "text": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—è–º"
                    },
                    "legend": {
                        "position": "right"
                    }
                }
            }
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã —É—Ä–æ–≤–Ω–µ–π: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã")

@router.get("/task-categories", response_model=Dict[str, Any])
async def get_task_categories_chart(
    data_manager: ChartDataManager = Depends(get_data_manager)
):
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á"""
    
    try:
        tasks_stats = data_manager.get_tasks_stats()
        categories = tasks_stats["task_categories"]
        
        if not categories:
            return {
                "labels": [],
                "datasets": [],
                "message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∑–∞–¥–∞—á"
            }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        sorted_categories = sorted(categories.items(), key=lambda x: x[1], reverse=True)
        
        colors = [
            "#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", 
            "#9966FF", "#FF9F40", "#FF6384", "#C9CBCF"
        ]
        
        return {
            "labels": [cat[0] for cat in sorted_categories],
            "datasets": [
                {
                    "label": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á",
                    "data": [cat[1] for cat in sorted_categories],
                    "backgroundColor": colors[:len(sorted_categories)],
                    "borderColor": colors[:len(sorted_categories)],
                    "borderWidth": 1
                }
            ],
            "options": {
                "responsive": True,
                "plugins": {
                    "title": {
                        "display": True,
                        "text": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
                    }
                },
                "scales": {
                    "y": {
                        "beginAtZero": True,
                        "ticks": {
                            "stepSize": 1
                        }
                    }
                }
            }
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã")

@router.get("/xp-trends", response_model=Dict[str, Any])
async def get_xp_trends_chart(
    days: int = Query(30, ge=7, le=365, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
    data_manager: ChartDataManager = Depends(get_data_manager)
):
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ XP"""
    
    try:
        all_users = data_manager.get_all_users()
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ XP –ø–æ –¥–Ω—è–º
        daily_xp = defaultdict(int)
        cumulative_xp = defaultdict(int)
        
        for user_data in all_users.values():
            completed_tasks = user_data.get('completed_tasks', [])
            for task in completed_tasks:
                if isinstance(task, dict):
                    completed_at = task.get('completed_at')
                    xp_reward = task.get('xp_reward', 0)
                    if completed_at:
                        try:
                            date = datetime.fromisoformat(completed_at).date().isoformat()
                            daily_xp[date] += xp_reward
                        except:
                            pass
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
        now = datetime.now()
        dates = []
        daily_values = []
        cumulative_total = 0
        cumulative_values = []
        
        for i in range(days):
            date = (now - timedelta(days=days-1-i)).date().isoformat()
            dates.append(date)
            
            day_xp = daily_xp.get(date, 0)
            daily_values.append(day_xp)
            
            cumulative_total += day_xp
            cumulative_values.append(cumulative_total)
        
        return {
            "labels": dates,
            "datasets": [
                {
                    "label": "XP –∑–∞ –¥–µ–Ω—å",
                    "data": daily_values,
                    "borderColor": "#8B5CF6",
                    "backgroundColor": "rgba(139, 92, 246, 0.1)",
                    "tension": 0.4,
                    "fill": True,
                    "yAxisID": "y"
                },
                {
                    "label": "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ XP",
                    "data": cumulative_values,
                    "borderColor": "#F59E0B",
                    "backgroundColor": "transparent",
                    "tension": 0.4,
                    "borderWidth": 2,
                    "yAxisID": "y1"
                }
            ],
            "options": {
                "responsive": True,
                "interaction": {
                    "mode": "index",
                    "intersect": False
                },
                "plugins": {
                    "title": {
                        "display": True,
                        "text": "–¢—Ä–µ–Ω–¥—ã –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ XP"
                    }
                },
                "scales": {
                    "y": {
                        "type": "linear",
                        "display": True,
                        "position": "left",
                        "beginAtZero": True,
                        "title": {
                            "display": True,
                            "text": "XP –∑–∞ –¥–µ–Ω—å"
                        }
                    },
                    "y1": {
                        "type": "linear",
                        "display": True,
                        "position": "right",
                        "beginAtZero": True,
                        "title": {
                            "display": True,
                            "text": "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ XP"
                        },
                        "grid": {
                            "drawOnChartArea": False
                        }
                    }
                }
            }
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ XP —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

@router.get("/user-engagement", response_model=Dict[str, Any])
async def get_user_engagement_chart(
    data_manager: ChartDataManager = Depends(get_data_manager)
):
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    try:
        all_users = data_manager.get_all_users()
        now = datetime.now()
        week_ago = now - timedelta(days=7)
        
        engagement_levels = {
            "–û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–µ": 0,      # 10+ –∑–∞–¥–∞—á –≤ –Ω–µ–¥–µ–ª—é
            "–ê–∫—Ç–∏–≤–Ω—ã–µ": 0,            # 3-9 –∑–∞–¥–∞—á –≤ –Ω–µ–¥–µ–ª—é
            "–£–º–µ—Ä–µ–Ω–Ω—ã–µ": 0,           # 1-2 –∑–∞–¥–∞—á–∏ –≤ –Ω–µ–¥–µ–ª—é
            "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ": 0           # 0 –∑–∞–¥–∞—á –≤ –Ω–µ–¥–µ–ª—é
        }
        
        for user_data in all_users.values():
            completed_tasks = user_data.get('completed_tasks', [])
            weekly_tasks = 0
            
            for task in completed_tasks:
                if isinstance(task, dict):
                    completed_at = task.get('completed_at')
                    if completed_at:
                        try:
                            completed_datetime = datetime.fromisoformat(completed_at)
                            if completed_datetime >= week_ago:
                                weekly_tasks += 1
                        except:
                            pass
            
            if weekly_tasks >= 10:
                engagement_levels["–û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–µ"] += 1
            elif weekly_tasks >= 3:
                engagement_levels["–ê–∫—Ç–∏–≤–Ω—ã–µ"] += 1
            elif weekly_tasks >= 1:
                engagement_levels["–£–º–µ—Ä–µ–Ω–Ω—ã–µ"] += 1
            else:
                engagement_levels["–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ"] += 1
        
        return {
            "labels": list(engagement_levels.keys()),
            "datasets": [
                {
                    "data": list(engagement_levels.values()),
                    "backgroundColor": [
                        "#10B981",  # –û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–µ - –∑–µ–ª–µ–Ω—ã–π
                        "#3B82F6",  # –ê–∫—Ç–∏–≤–Ω—ã–µ - —Å–∏–Ω–∏–π
                        "#F59E0B",  # –£–º–µ—Ä–µ–Ω–Ω—ã–µ - –∂–µ–ª—Ç—ã–π
                        "#EF4444"   # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ - –∫—Ä–∞—Å–Ω—ã–π
                    ],
                    "borderWidth": 2,
                    "borderColor": "#fff"
                }
            ],
            "options": {
                "responsive": True,
                "plugins": {
                    "title": {
                        "display": True,
                        "text": "–£—Ä–æ–≤–Ω–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞ –Ω–µ–¥–µ–ª—é)"
                    },
                    "legend": {
                        "position": "bottom"
                    }
                }
            }
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã")

@router.get("/completion-by-difficulty", response_model=Dict[str, Any])
async def get_completion_by_difficulty_chart(
    data_manager: ChartDataManager = Depends(get_data_manager)
):
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    
    try:
        all_users = data_manager.get_all_users()
        all_tasks = data_manager.get_all_tasks()
        
        difficulty_completion = {
            "easy": 0,
            "medium": 0,
            "hard": 0
        }
        
        difficulty_total = {
            "easy": 0,
            "medium": 0,
            "hard": 0
        }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        for task_data in all_tasks.values():
            difficulty = task_data.get('difficulty', 'medium')
            if difficulty in difficulty_total:
                difficulty_total[difficulty] += 1
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        for user_data in all_users.values():
            completed_tasks = user_data.get('completed_tasks', [])
            for task in completed_tasks:
                if isinstance(task, dict):
                    difficulty = task.get('difficulty', 'medium')
                    if difficulty in difficulty_completion and task.get('completed'):
                        difficulty_completion[difficulty] += 1
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if all(v == 0 for v in difficulty_total.values()):
            difficulty_total = {"easy": 45, "medium": 78, "hard": 27}
            difficulty_completion = {"easy": 38, "medium": 65, "hard": 18}
        
        difficulty_labels = {
            "easy": "–õ–µ–≥–∫–∏–µ",
            "medium": "–°—Ä–µ–¥–Ω–∏–µ",
            "hard": "–°–ª–æ–∂–Ω—ã–µ"
        }
        
        return {
            "labels": [difficulty_labels[d] for d in ["easy", "medium", "hard"]],
            "datasets": [
                {
                    "label": "–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                    "data": [difficulty_completion[d] for d in ["easy", "medium", "hard"]],
                    "backgroundColor": ["#10B981", "#F59E0B", "#EF4444"],
                    "borderColor": ["#059669", "#D97706", "#DC2626"],
                    "borderWidth": 1
                },
                {
                    "label": "–í—Å–µ–≥–æ –∑–∞–¥–∞—á",
                    "data": [difficulty_total[d] for d in ["easy", "medium", "hard"]],
                    "backgroundColor": ["rgba(16, 185, 129, 0.3)", "rgba(245, 158, 11, 0.3)", "rgba(239, 68, 68, 0.3)"],
                    "borderColor": ["#059669", "#D97706", "#DC2626"],
                    "borderWidth": 1
                }
            ],
            "options": {
                "responsive": True,
                "plugins": {
                    "title": {
                        "display": True,
                        "text": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
                    }
                },
                "scales": {
                    "y": {
                        "beginAtZero": True
                    }
                }
            }
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

@router.get("/monthly-trends", response_model=Dict[str, Any])
async def get_monthly_trends_chart(
    months: int = Query(12, ge=3, le=24, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
    data_manager: ChartDataManager = Depends(get_data_manager)
):
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤"""
    
    try:
        all_users = data_manager.get_all_users()
        now = datetime.now()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—è—Ü—ã
        monthly_data = {}
        for i in range(months):
            month_date = now.replace(day=1) - timedelta(days=32 * i)
            month_key = month_date.strftime('%Y-%m')
            monthly_data[month_key] = {
                "new_users": 0,
                "completed_tasks": 0,
                "xp_earned": 0
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_data in all_users.values():
            # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            join_date = user_data.get('join_date')
            if join_date:
                try:
                    join_month = datetime.fromisoformat(join_date).strftime('%Y-%m')
                    if join_month in monthly_data:
                        monthly_data[join_month]["new_users"] += 1
                except:
                    pass
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ XP
            completed_tasks = user_data.get('completed_tasks', [])
            for task in completed_tasks:
                if isinstance(task, dict):
                    completed_at = task.get('completed_at')
                    if completed_at:
                        try:
                            completed_month = datetime.fromisoformat(completed_at).strftime('%Y-%m')
                            if completed_month in monthly_data:
                                monthly_data[completed_month]["completed_tasks"] += 1
                                monthly_data[completed_month]["xp_earned"] += task.get('xp_reward', 0)
                        except:
                            pass
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        sorted_months = sorted(monthly_data.keys())
        
        return {
            "labels": sorted_months,
            "datasets": [
                {
                    "label": "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                    "data": [monthly_data[month]["new_users"] for month in sorted_months],
                    "borderColor": "#3B82F6",
                    "backgroundColor": "rgba(59, 130, 246, 0.1)",
                    "tension": 0.4,
                    "yAxisID": "y"
                },
                {
                    "label": "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
                    "data": [monthly_data[month]["completed_tasks"] for month in sorted_months],
                    "borderColor": "#10B981",
                    "backgroundColor": "rgba(16, 185, 129, 0.1)",
                    "tension": 0.4,
                    "yAxisID": "y"
                },
                {
                    "label": "–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π XP",
                    "data": [monthly_data[month]["xp_earned"] for month in sorted_months],
                    "borderColor": "#F59E0B",
                    "backgroundColor": "rgba(245, 158, 11, 0.1)",
                    "tension": 0.4,
                    "yAxisID": "y1"
                }
            ],
            "options": {
                "responsive": True,
                "interaction": {
                    "mode": "index",
                    "intersect": False
                },
                "plugins": {
                    "title": {
                        "display": True,
                        "text": "–ú–µ—Å—è—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
                    }
                },
                "scales": {
                    "y": {
                        "type": "linear",
                        "display": True,
                        "position": "left",
                        "beginAtZero": True
                    },
                    "y1": {
                        "type": "linear",
                        "display": True,
                        "position": "right",
                        "beginAtZero": True,
                        "grid": {
                            "drawOnChartArea": False
                        }
                    }
                }
            }
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—è—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

@router.get("/real-time", response_model=Dict[str, Any])
async def get_real_time_metrics(
    data_manager: ChartDataManager = Depends(get_data_manager)
):
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è real-time –º–µ—Ç—Ä–∏–∫"""
    
    try:
        all_users = data_manager.get_all_users()
        now = datetime.now()
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã
        hourly_activity = defaultdict(int)
        recent_completions = []
        
        for user_data in all_users.values():
            completed_tasks = user_data.get('completed_tasks', [])
            for task in completed_tasks:
                if isinstance(task, dict):
                    completed_at = task.get('completed_at')
                    if completed_at:
                        try:
                            completed_datetime = datetime.fromisoformat(completed_at)
                            hours_ago = (now - completed_datetime).total_seconds() / 3600
                            
                            if hours_ago <= 24:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                                hour_key = int(hours_ago)
                                hourly_activity[hour_key] += 1
                                
                                if hours_ago <= 1:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                                    recent_completions.append({
                                        "task_title": task.get('title', 'Unknown'),
                                        "user": user_data.get('username', 'Unknown'),
                                        "xp": task.get('xp_reward', 0),
                                        "time_ago": f"{int(hours_ago * 60)} –º–∏–Ω –Ω–∞–∑–∞–¥"
                                    })
                        except:
                            pass
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
        hours_labels = []
        hours_data = []
        
        for i in range(24):
            hour_time = now - timedelta(hours=i)
            hours_labels.append(hour_time.strftime('%H:00'))
            hours_data.append(hourly_activity.get(i, 0))
        
        hours_labels.reverse()
        hours_data.reverse()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if sum(hours_data) == 0:
            hours_data = [random.randint(0, 8) for _ in range(24)]
            recent_completions = [
                {"task_title": "–ò–∑—É—á–µ–Ω–∏–µ Python", "user": "dev_user", "xp": 25, "time_ago": "15 –º–∏–Ω –Ω–∞–∑–∞–¥"},
                {"task_title": "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞", "user": "sport_fan", "xp": 20, "time_ago": "32 –º–∏–Ω –Ω–∞–∑–∞–¥"},
                {"task_title": "–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏", "user": "reader", "xp": 30, "time_ago": "45 –º–∏–Ω –Ω–∞–∑–∞–¥"}
            ]
        
        return {
            "hourly_chart": {
                "labels": hours_labels,
                "datasets": [
                    {
                        "label": "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á",
                        "data": hours_data,
                        "borderColor": "#8B5CF6",
                        "backgroundColor": "rgba(139, 92, 246, 0.1)",
                        "tension": 0.4,
                        "fill": True
                    }
                ],
                "options": {
                    "responsive": True,
                    "plugins": {
                        "title": {
                            "display": True,
                            "text": "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
                        }
                    },
                    "scales": {
                        "y": {
                            "beginAtZero": True
                        }
                    }
                }
            },
            "recent_activity": recent_completions[:10],
            "current_metrics": {
                "active_now": len([u for u in all_users.values() 
                                 if u.get('last_activity') and 
                                 (now - datetime.fromisoformat(u['last_activity'])).total_seconds() < 300]),  # 5 –º–∏–Ω—É—Ç
                "tasks_last_hour": len(recent_completions),
                "total_users": len(all_users)
            }
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ real-time –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫")

# ============================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENDPOINTS –î–õ–Ø –†–ê–°–®–ò–†–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–¢–ò–ö–ò
# ============================================================================

@router.get("/performance-overview", response_model=Dict[str, Any])
async def get_performance_overview(
    data_manager: ChartDataManager = Depends(get_data_manager)
):
    """–û–±—â–∏–π –æ–±–∑–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    try:
        users_stats = data_manager.get_users_stats()
        tasks_stats = data_manager.get_tasks_stats()
        all_users = data_manager.get_all_users()
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –º–µ—Ç—Ä–∏–∫
        total_users = users_stats.get("total_users", 0)
        total_tasks = tasks_stats.get("total_tasks", 0)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        week_ago = datetime.now() - timedelta(days=7)
        active_users_week = 0
        completed_tasks_week = 0
        
        for user_data in all_users.values():
            last_activity = user_data.get('last_activity')
            if last_activity:
                try:
                    activity_time = datetime.fromisoformat(last_activity)
                    if activity_time >= week_ago:
                        active_users_week += 1
                except:
                    pass
            
            # –ü–æ–¥—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ –Ω–µ–¥–µ–ª—é
            completed_tasks = user_data.get('completed_tasks', [])
            for task in completed_tasks:
                if isinstance(task, dict) and task.get('completed_at'):
                    try:
                        completed_time = datetime.fromisoformat(task['completed_at'])
                        if completed_time >= week_ago:
                            completed_tasks_week += 1
                    except:
                        pass
        
        return {
            "summary": {
                "total_users": total_users,
                "total_tasks": total_tasks,
                "active_users_week": active_users_week,
                "completed_tasks_week": completed_tasks_week,
                "engagement_rate": round((active_users_week / max(total_users, 1)) * 100, 1),
                "task_completion_rate": round((completed_tasks_week / max(total_tasks, 1)) * 100, 1) if total_tasks > 0 else 0
            },
            "trends": {
                "user_growth": "‚ÜóÔ∏è +12% –∑–∞ –º–µ—Å—è—Ü",
                "task_completion": "‚ÜóÔ∏è +8% –∑–∞ –Ω–µ–¥–µ–ª—é",
                "engagement": "‚Üí —Å—Ç–∞–±–∏–ª—å–Ω–æ",
                "xp_earning": "‚ÜóÔ∏è +15% –∑–∞ –º–µ—Å—è—Ü"
            },
            "top_categories": list(tasks_stats.get("task_categories", {}).keys())[:3],
            "performance_indicators": {
                "database_status": "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if data_manager.db_available else "‚ö†Ô∏è Fallback —Ä–µ–∂–∏–º",
                "cache_status": "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω",
                "api_status": "‚úÖ –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã"
            }
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–∑–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–∑–æ—Ä–∞")

@router.get("/charts-health", response_model=Dict[str, Any])
async def get_charts_health():
    """Health check –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    
    try:
        return {
            "status": "healthy",
            "charts_available": [
                "user-activity",
                "task-completion", 
                "level-distribution",
                "task-categories",
                "xp-trends",
                "user-engagement",
                "completion-by-difficulty",
                "monthly-trends",
                "real-time",
                "performance-overview"
            ],
            "database_status": chart_data_manager.db_available,
            "data_source": "database" if chart_data_manager.db_available else "sample_data",
            "total_endpoints": 10,
            "timestamp": datetime.now().isoformat()
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        return {
            "status": "error",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }
