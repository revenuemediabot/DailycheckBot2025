#!/usr/bin/env python3
"""
Statistics API –¥–ª—è DailyCheck Bot Dashboard v4.0
–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import logging
import json
import sqlite3
import random
from pathlib import Path
from datetime import datetime, timedelta
from collections import defaultdict
from typing import List, Optional, Dict, Any
import traceback

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    from fastapi import APIRouter, HTTPException, Depends, Query, Response
    from pydantic import BaseModel
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ FastAPI: {e}")
    raise

logger = logging.getLogger(__name__)

# ============================================================================
# STATS DATA MANAGER
# ============================================================================

class StatsDataManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
    
    def __init__(self):
        self.data_dir = Path("data")
        self.data_dir.mkdir(exist_ok=True)
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite
        self.db_path = self.data_dir / "dailycheck.db"
        self.db_available = self._check_database()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        if not self.db_available:
            self._init_sample_data()
    
    def _check_database(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self.db_path.exists():
                conn = sqlite3.connect(self.db_path)
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                tables = cursor.fetchall()
                conn.close()
                
                if tables:
                    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                    return True
            
            logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False
    
    def _init_sample_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.sample_users = self._generate_sample_users()
        self.sample_tasks = self._generate_sample_tasks()
        self.sample_daily_stats = self._generate_daily_stats()
        logger.info("üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    def _generate_sample_users(self) -> Dict[int, Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        users = {}
        levels = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
        
        for i in range(200):  # –ë–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            user_id = 2000 + i
            join_days_ago = random.randint(1, 365)
            join_date = datetime.now() - timedelta(days=join_days_ago)
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            last_activity_hours_ago = random.randint(0, 168 * 4)  # –î–æ 4 –Ω–µ–¥–µ–ª—å
            last_activity = datetime.now() - timedelta(hours=last_activity_hours_ago)
            
            users[user_id] = {
                "user_id": user_id,
                "username": f"stat_user_{i}",
                "first_name": f"StatUser{i}",
                "level": random.choice(levels),
                "xp": random.randint(0, 5000),
                "points": random.randint(0, 2000),
                "theme": random.choice(["default", "dark", "blue", "green", "purple"]),
                "created_at": join_date.isoformat(),
                "last_activity": last_activity.isoformat(),
                "tasks_completed": random.randint(0, 150),
                "streak_days": random.randint(0, 30)
            }
        
        return users
    
    def _generate_sample_tasks(self) -> Dict[str, Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        tasks = {}
        categories = ["—Ä–∞–±–æ—Ç–∞", "–∑–¥–æ—Ä–æ–≤—å–µ", "–æ–±—É—á–µ–Ω–∏–µ", "–ª–∏—á–Ω–æ–µ", "—Ñ–∏–Ω–∞–Ω—Å—ã"]
        priorities = ["–Ω–∏–∑–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–≤—ã—Å–æ–∫–∏–π"]
        statuses = ["pending", "in_progress", "completed", "cancelled"]
        
        for i in range(1000):  # –ë–æ–ª—å—à–µ –∑–∞–¥–∞—á –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            task_id = f"stat_task_{i}"
            
            # –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            created_days_ago = random.randint(0, 90)
            created_date = datetime.now() - timedelta(days=created_days_ago)
            
            status = random.choice(statuses)
            completed_at = None
            
            if status == "completed":
                # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è
                completion_hours = random.randint(1, 72)
                completed_at = created_date + timedelta(hours=completion_hours)
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á—É —Å–ª—É—á–∞–π–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            assigned_to = 2000 + random.randint(0, 199)
            
            tasks[task_id] = {
                "id": task_id,
                "title": f"–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ {i+1}",
                "description": f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ {i+1}",
                "category": random.choice(categories),
                "priority": random.choice(priorities),
                "status": status,
                "assigned_to": assigned_to,
                "created_at": created_date.isoformat(),
                "completed_at": completed_at.isoformat() if completed_at else None,
                "points_reward": random.randint(10, 50),
                "estimated_hours": random.randint(1, 8),
                "actual_hours": random.randint(1, 12) if status == "completed" else None
            }
        
        return tasks
    
    def _generate_daily_stats(self) -> Dict[str, Dict[str, int]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        daily_stats = {}
        
        for i in range(90):  # 90 –¥–Ω–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            date = datetime.now() - timedelta(days=89-i)
            date_str = date.strftime('%Y-%m-%d')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            base_users = max(1, 50 - i // 3)  # –†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
            base_tasks = max(10, 100 - i // 2)  # –†–æ—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            
            daily_stats[date_str] = {
                "new_users": random.randint(max(0, base_users - 10), base_users + 15),
                "active_users": random.randint(base_users // 2, base_users * 2),
                "completed_tasks": random.randint(max(5, base_tasks - 20), base_tasks + 30),
                "points_earned": random.randint(500, 2500),
                "total_users": base_users * 5,  # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                "total_tasks": base_tasks * 10   # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            }
        
        return daily_stats
    
    def get_all_users(self) -> Dict[int, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if self.db_available:
            return self._get_users_from_db()
        else:
            return self.sample_users
    
    def _get_users_from_db(self) -> Dict[int, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute("SELECT * FROM users")
            users_data = cursor.fetchall()
            
            users = {}
            for row in users_data:
                user_dict = dict(row)
                user_id = user_dict['user_id']
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if 'points' not in user_dict:
                    user_dict['points'] = user_dict.get('xp', 0) // 5
                
                users[user_id] = user_dict
            
            conn.close()
            return users
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {e}")
            return self.sample_users
    
    def get_all_tasks(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        if self.db_available:
            return self._get_tasks_from_db()
        else:
            return self.sample_tasks
    
    def _get_tasks_from_db(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute("SELECT * FROM tasks")
            tasks_data = cursor.fetchall()
            
            tasks = {}
            for row in tasks_data:
                task_dict = dict(row)
                task_id = str(task_dict.get('id', task_dict.get('task_id', '')))
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if task_dict.get('completed'):
                    task_dict['status'] = 'completed'
                else:
                    task_dict['status'] = 'pending'
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ assigned_to –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if 'assigned_to' not in task_dict:
                    task_dict['assigned_to'] = task_dict.get('user_id')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ points_reward –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if 'points_reward' not in task_dict:
                    task_dict['points_reward'] = 25
                
                tasks[task_id] = task_dict
            
            conn.close()
            return tasks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ –ë–î: {e}")
            return self.sample_tasks
    
    def get_daily_stats(self, days: int = 30) -> Dict[str, Dict[str, int]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.db_available:
            return self._get_daily_stats_from_db(days)
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            sorted_dates = sorted(self.sample_daily_stats.keys())
            return {date: self.sample_daily_stats[date] for date in sorted_dates[-days:]}
    
    def _get_daily_stats_from_db(self, days: int) -> Dict[str, Dict[str, int]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            daily_stats = {}
            
            for i in range(days):
                date = datetime.now() - timedelta(days=days-1-i)
                date_str = date.strftime('%Y-%m-%d')
                
                # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                cursor.execute("""
                    SELECT COUNT(*) as count 
                    FROM users 
                    WHERE DATE(created_at) = ?
                """, (date_str,))
                new_users = cursor.fetchone()['count']
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å)
                cursor.execute("""
                    SELECT COUNT(DISTINCT user_id) as count 
                    FROM tasks 
                    WHERE DATE(created_at) = ? OR DATE(completed_at) = ?
                """, (date_str, date_str))
                active_users = cursor.fetchone()['count']
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                cursor.execute("""
                    SELECT COUNT(*) as count 
                    FROM tasks 
                    WHERE DATE(completed_at) = ? AND completed = 1
                """, (date_str,))
                completed_tasks = cursor.fetchone()['count']
                
                # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –¥–∞—Ç—É
                cursor.execute("""
                    SELECT COUNT(*) as count 
                    FROM users 
                    WHERE DATE(created_at) <= ?
                """, (date_str,))
                total_users = cursor.fetchone()['count']
                
                # –í—Å–µ–≥–æ –∑–∞–¥–∞—á –Ω–∞ –¥–∞—Ç—É
                cursor.execute("""
                    SELECT COUNT(*) as count 
                    FROM tasks 
                    WHERE DATE(created_at) <= ?
                """, (date_str,))
                total_tasks = cursor.fetchone()['count']
                
                daily_stats[date_str] = {
                    "new_users": new_users,
                    "active_users": active_users,
                    "completed_tasks": completed_tasks,
                    "points_earned": completed_tasks * 25,  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                    "total_users": total_users,
                    "total_tasks": total_tasks
                }
            
            conn.close()
            return daily_stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î: {e}")
            return self._get_daily_stats_fallback(days)
    
    def _get_daily_stats_fallback(self, days: int) -> Dict[str, Dict[str, int]]:
        """Fallback –¥–ª—è –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        daily_stats = {}
        
        for i in range(days):
            date = datetime.now() - timedelta(days=days-1-i)
            date_str = date.strftime('%Y-%m-%d')
            
            daily_stats[date_str] = {
                "new_users": random.randint(1, 10),
                "active_users": random.randint(15, 45),
                "completed_tasks": random.randint(20, 80),
                "points_earned": random.randint(500, 2000),
                "total_users": 100 + i * 2,
                "total_tasks": 500 + i * 10
            }
        
        return daily_stats
    
    def get_overview_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        users = self.get_all_users()
        tasks = self.get_all_tasks()
        
        total_users = len(users)
        total_tasks = len(tasks)
        completed_tasks = len([t for t in tasks.values() if t.get("status") == "completed"])
        total_points = sum(u.get("points", 0) for u in users.values())
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        now = datetime.now()
        yesterday = now - timedelta(days=1)
        
        active_users_24h = 0
        for user in users.values():
            if user.get("last_activity"):
                try:
                    last_activity = datetime.fromisoformat(user["last_activity"].replace('Z', '+00:00'))
                    if last_activity >= yesterday:
                        active_users_24h += 1
                except:
                    pass
        
        return {
            "total_users": total_users,
            "total_tasks": total_tasks,
            "completed_tasks": completed_tasks,
            "total_points": total_points,
            "active_users_24h": active_users_24h,
            "completion_rate": (completed_tasks / max(total_tasks, 1)) * 100,
            "avg_points_per_user": total_points / max(total_users, 1),
            "engagement_rate": (active_users_24h / max(total_users, 1)) * 100
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
stats_data_manager = StatsDataManager()

# ============================================================================
# DEPENDENCY FUNCTIONS
# ============================================================================

def get_data_manager() -> StatsDataManager:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    return stats_data_manager

# ============================================================================
# ROUTER SETUP
# ============================================================================

router = APIRouter(prefix="/api/stats", tags=["statistics"])

# ============================================================================
# PYDANTIC MODELS
# ============================================================================

class OverviewStatsResponse(BaseModel):
    total_users: int
    total_tasks: int
    completed_tasks: int
    total_points: int
    kpi_metrics: Dict[str, Any]
    trends: Dict[str, Any]

class DailyStatsResponse(BaseModel):
    daily_stats: Dict[str, Dict[str, int]]
    period: Dict[str, Any]
    summary: Dict[str, Any]
    peaks: Dict[str, Any]

# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

def _calculate_kpi_metrics(data_manager: StatsDataManager) -> Dict[str, Any]:
    """–í—ã—á–∏—Å–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    try:
        users = data_manager.get_all_users()
        tasks = data_manager.get_all_tasks()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ KPI
        total_users = len(users)
        total_tasks = len(tasks)
        completed_tasks = len([t for t in tasks.values() if t.get("status") == "completed"])
        total_points = sum(u.get("points", 0) for u in users.values())
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        now = datetime.now()
        yesterday = now - timedelta(days=1)
        
        active_users_24h = 0
        new_users_24h = 0
        completed_tasks_24h = 0
        
        for user in users.values():
            if user.get("last_activity"):
                try:
                    last_activity = datetime.fromisoformat(user["last_activity"].replace('Z', '+00:00'))
                    if last_activity >= yesterday:
                        active_users_24h += 1
                except:
                    pass
            
            if user.get("created_at"):
                try:
                    created = datetime.fromisoformat(user["created_at"].replace('Z', '+00:00'))
                    if created >= yesterday:
                        new_users_24h += 1
                except:
                    pass
        
        for task in tasks.values():
            if task.get("completed_at"):
                try:
                    completed = datetime.fromisoformat(task["completed_at"].replace('Z', '+00:00'))
                    if completed >= yesterday:
                        completed_tasks_24h += 1
                except:
                    pass
        
        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        completion_rate = (completed_tasks / max(total_tasks, 1)) * 100
        avg_points_per_user = total_points / max(total_users, 1)
        user_engagement = (active_users_24h / max(total_users, 1)) * 100
        
        return {
            "total_users": total_users,
            "total_tasks": total_tasks,
            "completed_tasks": completed_tasks,
            "total_points": total_points,
            "active_users_24h": active_users_24h,
            "new_users_24h": new_users_24h,
            "completed_tasks_24h": completed_tasks_24h,
            "completion_rate": round(completion_rate, 2),
            "avg_points_per_user": round(avg_points_per_user, 2),
            "user_engagement_rate": round(user_engagement, 2)
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ KPI –º–µ—Ç—Ä–∏–∫: {e}")
        return {
            "total_users": 0,
            "total_tasks": 0,
            "completed_tasks": 0,
            "total_points": 0,
            "active_users_24h": 0,
            "new_users_24h": 0,
            "completed_tasks_24h": 0,
            "completion_rate": 0,
            "avg_points_per_user": 0,
            "user_engagement_rate": 0
        }

def _calculate_trends(data_manager: StatsDataManager) -> Dict[str, Any]:
    """–í—ã—á–∏—Å–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    try:
        daily_stats = data_manager.get_daily_stats(30)
        
        if len(daily_stats) < 2:
            return {"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–æ–≤"}
        
        dates = sorted(daily_stats.keys())
        
        # –¢—Ä–µ–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_trend = _calculate_trend([daily_stats[date]["new_users"] for date in dates])
        
        # –¢—Ä–µ–Ω–¥—ã –∑–∞–¥–∞—á
        tasks_trend = _calculate_trend([daily_stats[date]["completed_tasks"] for date in dates])
        
        # –¢—Ä–µ–Ω–¥—ã –æ—á–∫–æ–≤
        points_trend = _calculate_trend([daily_stats[date]["points_earned"] for date in dates])
        
        # –¢—Ä–µ–Ω–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_trend = _calculate_trend([daily_stats[date]["active_users"] for date in dates])
        
        return {
            "users": users_trend,
            "tasks": tasks_trend,
            "points": points_trend,
            "activity": activity_trend,
            "period_days": len(dates)
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        return {"error": f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {str(e)}"}

def _calculate_trend(values: List[int]) -> Dict[str, Any]:
    """–í—ã—á–∏—Å–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π"""
    try:
        if len(values) < 2:
            return {"direction": "stable", "percentage": 0, "absolute": 0}
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ 7 –¥–Ω—è–º–∏
        if len(values) >= 14:
            recent_avg = sum(values[-7:]) / 7
            previous_avg = sum(values[-14:-7]) / 7
        else:
            recent_avg = sum(values[len(values)//2:]) / max(len(values)//2, 1)
            previous_avg = sum(values[:len(values)//2]) / max(len(values)//2, 1)
        
        if previous_avg == 0:
            if recent_avg > 0:
                return {"direction": "up", "percentage": 100, "absolute": recent_avg}
            else:
                return {"direction": "stable", "percentage": 0, "absolute": 0}
        
        percentage_change = ((recent_avg - previous_avg) / previous_avg) * 100
        absolute_change = recent_avg - previous_avg
        
        if percentage_change > 5:
            direction = "up"
        elif percentage_change < -5:
            direction = "down"
        else:
            direction = "stable"
        
        return {
            "direction": direction,
            "percentage": round(percentage_change, 2),
            "absolute": round(absolute_change, 2),
            "recent_avg": round(recent_avg, 2),
            "previous_avg": round(previous_avg, 2)
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞: {e}")
        return {"direction": "stable", "percentage": 0, "absolute": 0}

def _analyze_performance(users: Dict, tasks: Dict, days: int) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_users = len(users)
        total_tasks = len(tasks)
        completed_tasks = len([t for t in tasks.values() if t.get("status") == "completed"])
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = len([u for u in users.values() if _is_user_active_in_period(u, days)])
        user_retention = (active_users / max(total_users, 1)) * 100
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á
        task_completion_rate = (completed_tasks / max(total_tasks, 1)) * 100
        avg_tasks_per_user = total_tasks / max(total_users, 1)
        
        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
        completion_times = []
        for task in tasks.values():
            if task.get("created_at") and task.get("completed_at"):
                try:
                    created = datetime.fromisoformat(task["created_at"].replace('Z', '+00:00'))
                    completed = datetime.fromisoformat(task["completed_at"].replace('Z', '+00:00'))
                    completion_time = (completed - created).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö
                    completion_times.append(completion_time)
                except:
                    pass
        
        avg_completion_time = sum(completion_times) / max(len(completion_times), 1)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_performance = defaultdict(lambda: {"total": 0, "completed": 0})
        for task in tasks.values():
            category = task.get("category", "other")
            category_performance[category]["total"] += 1
            if task.get("status") == "completed":
                category_performance[category]["completed"] += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category in category_performance:
            total = category_performance[category]["total"]
            completed = category_performance[category]["completed"]
            category_performance[category]["completion_rate"] = (completed / max(total, 1)) * 100
        
        return {
            "users": {
                "total": total_users,
                "active": active_users,
                "retention_rate": round(user_retention, 2)
            },
            "tasks": {
                "total": total_tasks,
                "completed": completed_tasks,
                "completion_rate": round(task_completion_rate, 2),
                "avg_per_user": round(avg_tasks_per_user, 2),
                "avg_completion_time_hours": round(avg_completion_time, 2)
            },
            "categories": dict(category_performance),
            "efficiency_score": round((task_completion_rate + user_retention) / 2, 2)
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return {
            "users": {"total": 0, "active": 0, "retention_rate": 0},
            "tasks": {"total": 0, "completed": 0, "completion_rate": 0, "avg_per_user": 0, "avg_completion_time_hours": 0},
            "categories": {},
            "efficiency_score": 0
        }

def _is_user_active_in_period(user: Dict, days: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–∏–æ–¥–µ"""
    if not user.get("last_activity"):
        return False
    
    try:
        last_activity = datetime.fromisoformat(user["last_activity"].replace('Z', '+00:00'))
        cutoff = datetime.now() - timedelta(days=days)
        return last_activity >= cutoff
    except:
        return False

def _compare_periods(users: Dict, tasks: Dict, current_start: datetime, prev_start: datetime, days: int) -> Dict[str, Any]:
    """–°—Ä–∞–≤–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º"""
    try:
        # –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        current_users = {}
        current_tasks = {}
        
        for user_id, user in users.items():
            if user.get("created_at"):
                try:
                    created = datetime.fromisoformat(user["created_at"].replace('Z', '+00:00'))
                    if created >= current_start:
                        current_users[user_id] = user
                except:
                    pass
        
        for task_id, task in tasks.items():
            if task.get("created_at"):
                try:
                    created = datetime.fromisoformat(task["created_at"].replace('Z', '+00:00'))
                    if created >= current_start:
                        current_tasks[task_id] = task
                except:
                    pass
        
        # –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        prev_users = {}
        prev_tasks = {}
        
        for user_id, user in users.items():
            if user.get("created_at"):
                try:
                    created = datetime.fromisoformat(user["created_at"].replace('Z', '+00:00'))
                    if prev_start <= created < current_start:
                        prev_users[user_id] = user
                except:
                    pass
        
        for task_id, task in tasks.items():
            if task.get("created_at"):
                try:
                    created = datetime.fromisoformat(task["created_at"].replace('Z', '+00:00'))
                    if prev_start <= created < current_start:
                        prev_tasks[task_id] = task
                except:
                    pass
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        users_change = len(current_users) - len(prev_users)
        tasks_change = len(current_tasks) - len(prev_tasks)
        
        current_completed = len([t for t in current_tasks.values() if t.get("status") == "completed"])
        prev_completed = len([t for t in prev_tasks.values() if t.get("status") == "completed"])
        completed_change = current_completed - prev_completed
        
        return {
            "current_period": {
                "users": len(current_users),
                "tasks": len(current_tasks),
                "completed_tasks": current_completed
            },
            "previous_period": {
                "users": len(prev_users),
                "tasks": len(prev_tasks),
                "completed_tasks": prev_completed
            },
            "changes": {
                "users": users_change,
                "tasks": tasks_change,
                "completed_tasks": completed_change
            },
            "percentage_changes": {
                "users": ((users_change / max(len(prev_users), 1)) * 100) if prev_users else 0,
                "tasks": ((tasks_change / max(len(prev_tasks), 1)) * 100) if prev_tasks else 0,
                "completed_tasks": ((completed_change / max(prev_completed, 1)) * 100) if prev_completed else 0
            }
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤: {e}")
        return {
            "current_period": {"users": 0, "tasks": 0, "completed_tasks": 0},
            "previous_period": {"users": 0, "tasks": 0, "completed_tasks": 0},
            "changes": {"users": 0, "tasks": 0, "completed_tasks": 0},
            "percentage_changes": {"users": 0, "tasks": 0, "completed_tasks": 0}
        }

def _analyze_user_engagement(users: Dict, tasks: Dict) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        total_users = len(users)
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        now = datetime.now()
        active_1d = 0
        active_7d = 0
        active_30d = 0
        
        for user in users.values():
            if user.get("last_activity"):
                try:
                    last_activity = datetime.fromisoformat(user["last_activity"].replace('Z', '+00:00'))
                    days_since = (now - last_activity).days
                    
                    if days_since <= 1:
                        active_1d += 1
                    if days_since <= 7:
                        active_7d += 1
                    if days_since <= 30:
                        active_30d += 1
                except:
                    pass
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_distribution = {
            "very_active": 0,    # > 10 –∑–∞–¥–∞—á –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
            "active": 0,         # 5-10 –∑–∞–¥–∞—á –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 3-6 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
            "moderate": 0,       # 1-4 –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é
            "inactive": 0        # 0 –∑–∞–¥–∞—á –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏
        }
        
        for user_id, user in users.items():
            user_tasks = [t for t in tasks.values() if t.get("assigned_to") == user_id]
            completed_tasks = len([t for t in user_tasks if t.get("status") == "completed"])
            
            last_activity_days = 999
            if user.get("last_activity"):
                try:
                    last_activity = datetime.fromisoformat(user["last_activity"].replace('Z', '+00:00'))
                    last_activity_days = (now - last_activity).days
                except:
                    pass
            
            if completed_tasks > 10 or last_activity_days <= 1:
                activity_distribution["very_active"] += 1
            elif completed_tasks >= 5 or last_activity_days <= 3:
                activity_distribution["active"] += 1
            elif completed_tasks >= 1 or last_activity_days <= 7:
                activity_distribution["moderate"] += 1
            else:
                activity_distribution["inactive"] += 1
        
        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        avg_tasks_per_user = len(tasks) / max(total_users, 1)
        avg_session_frequency = active_7d / max(total_users, 1) * 7  # —Å–µ—Å—Å–∏–π –≤ –Ω–µ–¥–µ–ª—é
        
        return {
            "daily_active_users": active_1d,
            "weekly_active_users": active_7d,
            "monthly_active_users": active_30d,
            "retention_rates": {
                "daily": (active_1d / max(total_users, 1)) * 100,
                "weekly": (active_7d / max(total_users, 1)) * 100,
                "monthly": (active_30d / max(total_users, 1)) * 100
            },
            "activity_distribution": activity_distribution,
            "engagement_score": round(((active_7d / max(total_users, 1)) * 100 + avg_tasks_per_user * 10) / 2, 2),
            "avg_tasks_per_user": round(avg_tasks_per_user, 2),
            "avg_session_frequency": round(avg_session_frequency, 2)
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
        return {
            "daily_active_users": 0,
            "weekly_active_users": 0,
            "monthly_active_users": 0,
            "retention_rates": {"daily": 0, "weekly": 0, "monthly": 0},
            "activity_distribution": {"very_active": 0, "active": 0, "moderate": 0, "inactive": 0},
            "engagement_score": 0,
            "avg_tasks_per_user": 0,
            "avg_session_frequency": 0
        }

def _segment_users(users: Dict, tasks: Dict) -> Dict[str, Any]:
    """–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        segments = {
            "champions": [],      # –í—ã—Å–æ–∫–∏–µ –æ—á–∫–∏ + –Ω–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            "loyal_users": [],    # –°—Ç–∞—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ + —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            "potential_loyalists": [],  # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ + –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            "new_users": [],      # –ù–µ–¥–∞–≤–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            "at_risk": [],        # –†–∞–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–µ, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
            "hibernating": []     # –î–∞–≤–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
        }
        
        now = datetime.now()
        
        for user_id, user in users.items():
            points = user.get("points", 0)
            created_days_ago = 999
            last_activity_days_ago = 999
            
            if user.get("created_at"):
                try:
                    created = datetime.fromisoformat(user["created_at"].replace('Z', '+00:00'))
                    created_days_ago = (now - created).days
                except:
                    pass
            
            if user.get("last_activity"):
                try:
                    last_activity = datetime.fromisoformat(user["last_activity"].replace('Z', '+00:00'))
                    last_activity_days_ago = (now - last_activity).days
                except:
                    pass
            
            user_info = {
                "user_id": user_id,
                "username": user.get("username", "Unknown"),
                "points": points,
                "level": user.get("level", 1),
                "created_days_ago": created_days_ago,
                "last_activity_days_ago": last_activity_days_ago
            }
            
            # –õ–æ–≥–∏–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
            if points >= 1000 and last_activity_days_ago <= 7:
                segments["champions"].append(user_info)
            elif created_days_ago >= 30 and last_activity_days_ago <= 14:
                segments["loyal_users"].append(user_info)
            elif created_days_ago <= 30 and last_activity_days_ago <= 7:
                segments["potential_loyalists"].append(user_info)
            elif created_days_ago <= 7:
                segments["new_users"].append(user_info)
            elif 7 < last_activity_days_ago <= 30 and points > 100:
                segments["at_risk"].append(user_info)
            else:
                segments["hibernating"].append(user_info)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        segment_sizes = {name: len(users_list) for name, users_list in segments.items()}
        
        return {
            "segments": segments,
            "segment_sizes": segment_sizes,
            "total_users": len(users)
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return {
            "segments": {"champions": [], "loyal_users": [], "potential_loyalists": [], "new_users": [], "at_risk": [], "hibernating": []},
            "segment_sizes": {"champions": 0, "loyal_users": 0, "potential_loyalists": 0, "new_users": 0, "at_risk": 0, "hibernating": 0},
            "total_users": 0
        }

def _perform_cohort_analysis(users: Dict) -> Dict[str, Any]:
    """–ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –º–µ—Å—è—Ü–∞–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        cohorts = defaultdict(list)
        
        for user_id, user in users.items():
            if user.get("created_at"):
                try:
                    created = datetime.fromisoformat(user["created_at"].replace('Z', '+00:00'))
                    cohort_month = created.strftime('%Y-%m')
                    cohorts[cohort_month].append({
                        "user_id": user_id,
                        "created_at": created,
                        "last_activity": user.get("last_activity")
                    })
                except:
                    pass
        
        # –ê–Ω–∞–ª–∏–∑ —É–¥–µ—Ä–∂–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–≥–æ—Ä—Ç—ã
        cohort_analysis = {}
        
        for cohort_month, cohort_users in cohorts.items():
            if not cohort_users:
                continue
            
            cohort_size = len(cohort_users)
            retention_data = {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö
            for period_months in [1, 3, 6, 12]:
                active_users = 0
                
                for user in cohort_users:
                    if user.get("last_activity"):
                        try:
                            last_activity = datetime.fromisoformat(user["last_activity"].replace('Z', '+00:00'))
                            period_cutoff = user["created_at"] + timedelta(days=period_months * 30)
                            
                            if last_activity >= period_cutoff:
                                active_users += 1
                        except:
                            pass
                
                retention_rate = (active_users / cohort_size) * 100 if cohort_size > 0 else 0
                retention_data[f"{period_months}_month"] = {
                    "active_users": active_users,
                    "retention_rate": round(retention_rate, 2)
                }
            
            cohort_analysis[cohort_month] = {
                "cohort_size": cohort_size,
                "retention": retention_data
            }
        
        return {
            "cohorts": cohort_analysis,
            "total_cohorts": len(cohorts)
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–≥–æ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return {"cohorts": {}, "total_cohorts": 0}

# ============================================================================
# API ENDPOINTS
# ============================================================================

@router.get("/overview", response_model=Dict[str, Any])
async def get_overview_stats(
    data_manager: StatsDataManager = Depends(get_data_manager)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–∞—à–±–æ—Ä–¥–∞
    """
    try:
        overview = data_manager.get_overview_stats()
        
        # –î–æ–±–∞–≤–ª—è–µ–º KPI –º–µ—Ç—Ä–∏–∫–∏
        kpi_metrics = _calculate_kpi_metrics(data_manager)
        overview["kpi_metrics"] = kpi_metrics
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã
        trends = _calculate_trends(data_manager)
        overview["trends"] = trends
        
        return overview
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        logger.error(traceback.format_exc())
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@router.get("/daily", response_model=Dict[str, Any])
async def get_daily_stats(
    days: int = Query(30, ge=1, le=365),
    data_manager: StatsDataManager = Depends(get_data_manager)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    """
    try:
        daily_stats = data_manager.get_daily_stats(days)
        
        if not daily_stats:
            return {
                "daily_stats": {},
                "period": {"days": days, "start_date": None, "end_date": None},
                "summary": {},
                "peaks": {}
            }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        total_new_users = sum(day["new_users"] for day in daily_stats.values())
        total_completed_tasks = sum(day["completed_tasks"] for day in daily_stats.values())
        total_points_earned = sum(day["points_earned"] for day in daily_stats.values())
        avg_active_users = sum(day["active_users"] for day in daily_stats.values()) / max(len(daily_stats), 1)
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–Ω–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
        max_users_day = max(daily_stats.items(), key=lambda x: x[1]["new_users"])
        max_tasks_day = max(daily_stats.items(), key=lambda x: x[1]["completed_tasks"])
        max_points_day = max(daily_stats.items(), key=lambda x: x[1]["points_earned"])
        
        return {
            "daily_stats": daily_stats,
            "period": {
                "days": days,
                "start_date": min(daily_stats.keys()) if daily_stats else None,
                "end_date": max(daily_stats.keys()) if daily_stats else None
            },
            "summary": {
                "total_new_users": total_new_users,
                "total_completed_tasks": total_completed_tasks,
                "total_points_earned": total_points_earned,
                "avg_active_users": round(avg_active_users, 2),
                "avg_new_users_per_day": round(total_new_users / max(days, 1), 2),
                "avg_tasks_per_day": round(total_completed_tasks / max(days, 1), 2),
                "avg_points_per_day": round(total_points_earned / max(days, 1), 2)
            },
            "peaks": {
                "max_users_day": {
                    "date": max_users_day[0],
                    "count": max_users_day[1]["new_users"]
                },
                "max_tasks_day": {
                    "date": max_tasks_day[0],
                    "count": max_tasks_day[1]["completed_tasks"]
                },
                "max_points_day": {
                    "date": max_points_day[0],
                    "count": max_points_day[1]["points_earned"]
                }
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        logger.error(traceback.format_exc())
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@router.get("/performance", response_model=Dict[str, Any])
async def get_performance_stats(
    period: str = Query("month", regex="^(week|month|quarter|year)$"),
    data_manager: StatsDataManager = Depends(get_data_manager)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        period_days = {
            "week": 7,
            "month": 30,
            "quarter": 90,
            "year": 365
        }
        
        days = period_days[period]
        users = data_manager.get_all_users()
        tasks = data_manager.get_all_tasks()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É
        cutoff_date = datetime.now() - timedelta(days=days)
        
        period_users = {}
        period_tasks = {}
        
        for user_id, user in users.items():
            if user.get("created_at"):
                try:
                    created = datetime.fromisoformat(user["created_at"].replace('Z', '+00:00'))
                    if created >= cutoff_date:
                        period_users[user_id] = user
                except:
                    pass
        
        for task_id, task in tasks.items():
            if task.get("created_at"):
                try:
                    created = datetime.fromisoformat(task["created_at"].replace('Z', '+00:00'))
                    if created >= cutoff_date:
                        period_tasks[task_id] = task
                except:
                    pass
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_analysis = _analyze_performance(period_users, period_tasks, days)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
        prev_cutoff_date = cutoff_date - timedelta(days=days)
        comparison = _compare_periods(users, tasks, cutoff_date, prev_cutoff_date, days)
        
        return {
            "period": period,
            "days": days,
            "date_range": {
                "start": cutoff_date.date().isoformat(),
                "end": datetime.now().date().isoformat()
            },
            "performance": performance_analysis,
            "comparison": comparison,
            "generated_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        logger.error(traceback.format_exc())
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {str(e)}")

@router.get("/engagement", response_model=Dict[str, Any])
async def get_engagement_stats(
    data_manager: StatsDataManager = Depends(get_data_manager)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    try:
        users = data_manager.get_all_users()
        tasks = data_manager.get_all_tasks()
        
        # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        engagement_analysis = _analyze_user_engagement(users, tasks)
        
        # –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_segments = _segment_users(users, tasks)
        
        # –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        cohort_analysis = _perform_cohort_analysis(users)
        
        return {
            "engagement_metrics": engagement_analysis,
            "user_segments": user_segments,
            "cohort_analysis": cohort_analysis,
            "generated_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
        logger.error(traceback.format_exc())
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: {str(e)}")

@router.get("/export", response_model=Dict[str, Any])
async def export_stats(
    format: str = Query("json", regex="^(json|csv)$"),
    stats_type: str = Query("overview", regex="^(overview|daily|performance|engagement)$"),
    period: Optional[str] = Query("month", regex="^(week|month|quarter|year)$"),
    data_manager: StatsDataManager = Depends(get_data_manager)
):
    """
    –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if stats_type == "overview":
            data = data_manager.get_overview_stats()
        elif stats_type == "daily":
            data = data_manager.get_daily_stats(30)
        elif stats_type == "performance":
            period_days = {"week": 7, "month": 30, "quarter": 90, "year": 365}
            days = period_days.get(period, 30)
            data = _analyze_performance(
                data_manager.get_all_users(),
                data_manager.get_all_tasks(),
                days
            )
        elif stats_type == "engagement":
            data = _analyze_user_engagement(
                data_manager.get_all_users(),
                data_manager.get_all_tasks()
            )
        else:
            data = {}
        
        return {
            "format": format,
            "stats_type": stats_type,
            "period": period,
            "data": data,
            "exported_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        logger.error(traceback.format_exc())
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

# ============================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENDPOINTS
# ============================================================================

@router.get("/health", response_model=Dict[str, Any])
async def get_stats_health():
    """Health check –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    try:
        return {
            "status": "healthy",
            "endpoints_available": [
                "overview",
                "daily", 
                "performance",
                "engagement",
                "export"
            ],
            "database_status": stats_data_manager.db_available,
            "data_source": "database" if stats_data_manager.db_available else "sample_data",
            "total_endpoints": 5,
            "calculations_available": [
                "kpi_metrics",
                "trends",
                "performance_analysis",
                "user_segmentation",
                "cohort_analysis"
            ],
            "timestamp": datetime.now().isoformat()
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            "status": "error",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@router.get("/summary", response_model=Dict[str, Any])
async def get_stats_summary(
    data_manager: StatsDataManager = Depends(get_data_manager)
):
    """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫"""
    
    try:
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        overview = data_manager.get_overview_stats()
        daily_stats = data_manager.get_daily_stats(7)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        users = data_manager.get_all_users()
        tasks = data_manager.get_all_tasks()
        
        # –ë—ã—Å—Ç—Ä—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        kpi = _calculate_kpi_metrics(data_manager)
        trends = _calculate_trends(data_manager)
        engagement = _analyze_user_engagement(users, tasks)
        
        return {
            "quick_stats": {
                "total_users": overview.get("total_users", 0),
                "total_tasks": overview.get("total_tasks", 0),
                "completion_rate": overview.get("completion_rate", 0),
                "active_users_24h": kpi.get("active_users_24h", 0),
                "engagement_score": engagement.get("engagement_score", 0)
            },
            "recent_trends": {
                "users_trend": trends.get("users", {}).get("direction", "stable"),
                "tasks_trend": trends.get("tasks", {}).get("direction", "stable"),
                "activity_trend": trends.get("activity", {}).get("direction", "stable")
            },
            "top_insights": [
                f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {overview.get('total_users', 0)}",
                f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–¥–∞—á: {overview.get('completed_tasks', 0)}",
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: {kpi.get('active_users_24h', 0)}",
                f"–†–µ–π—Ç–∏–Ω–≥ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: {engagement.get('engagement_score', 0)}"
            ],
            "data_source": "database" if data_manager.db_available else "sample_data",
            "generated_at": datetime.now().isoformat()
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏")
