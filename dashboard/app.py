#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DailyCheck Web Dashboard - FastAPI Application
–í–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–ª—è Telegram –±–æ—Ç–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0.0
–î–∞—Ç–∞: 2025-06-10
"""

import os
import sys
import logging
from pathlib import Path
from contextlib import asynccontextmanager

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent.parent))

from fastapi import FastAPI, Request, HTTPException, Depends
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.responses import HTMLResponse, JSONResponse
import uvicorn

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from dashboard.config import settings
from dashboard.core.data_manager import DataManager
from dashboard.api import users, tasks, stats, charts
from dashboard.dependencies import get_data_manager
from shared.models import HealthCheck

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
data_manager: DataManager = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global data_manager
    
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ DailyCheck Web Dashboard...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        data_manager = DataManager(settings.DATA_DIR)
        await data_manager.initialize()
        
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {await data_manager.get_users_count()}")
        logger.info(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: {await data_manager.get_tasks_count()}")
        logger.info("‚úÖ Dashboard –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Dashboard...")
    if data_manager:
        await data_manager.cleanup()

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="DailyCheck Dashboard",
    description="–í–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö Telegram –±–æ—Ç–∞",
    version="1.0.0",
    docs_url="/api/docs" if settings.DEBUG else None,
    redoc_url="/api/redoc" if settings.DEBUG else None,
    lifespan=lifespan
)

# Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(GZipMiddleware, minimum_size=1000)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
static_dir = Path(__file__).parent / "static"
if static_dir.exists():
    app.mount("/static", StaticFiles(directory=str(static_dir)), name="static")

# –®–∞–±–ª–æ–Ω—ã
templates_dir = Path(__file__).parent / "templates"
templates = Jinja2Templates(directory=str(templates_dir))

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(users.router, prefix="/api/users", tags=["users"])
app.include_router(tasks.router, prefix="/api/tasks", tags=["tasks"])
app.include_router(stats.router, prefix="/api/stats", tags=["statistics"])
app.include_router(charts.router, prefix="/api/charts", tags=["charts"])

# ===== –û–°–ù–û–í–ù–´–ï –ú–ê–†–®–†–£–¢–´ =====

@app.get("/", response_class=HTMLResponse)
async def dashboard_home(
    request: Request,
    dm: DataManager = Depends(get_data_manager)
):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        stats_data = {
            "users_count": await dm.get_users_count(),
            "tasks_count": await dm.get_tasks_count(),
            "total_completions": await dm.get_total_completions(),
            "active_users_today": await dm.get_active_users_count(days=1)
        }
        
        return templates.TemplateResponse(
            "dashboard.html",
            {
                "request": request,
                "title": "DailyCheck Dashboard",
                "stats": stats_data,
                "debug": settings.DEBUG
            }
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.get("/users", response_class=HTMLResponse)
async def users_page(
    request: Request,
    dm: DataManager = Depends(get_data_manager)
):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        users_data = await dm.get_users_summary()
        
        return templates.TemplateResponse(
            "users.html",
            {
                "request": request,
                "title": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - DailyCheck Dashboard",
                "users": users_data
            }
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.get("/tasks", response_class=HTMLResponse)
async def tasks_page(
    request: Request,
    dm: DataManager = Depends(get_data_manager)
):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–¥–∞—á"""
    try:
        tasks_data = await dm.get_tasks_summary()
        
        return templates.TemplateResponse(
            "tasks.html",
            {
                "request": request,
                "title": "–ó–∞–¥–∞—á–∏ - DailyCheck Dashboard",
                "tasks": tasks_data
            }
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.get("/analytics", response_class=HTMLResponse)
async def analytics_page(
    request: Request,
    dm: DataManager = Depends(get_data_manager)
):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        analytics_data = await dm.get_analytics_summary()
        
        return templates.TemplateResponse(
            "analytics.html",
            {
                "request": request,
                "title": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - DailyCheck Dashboard",
                "analytics": analytics_data
            }
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

# ===== –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ê–†–®–†–£–¢–´ =====

@app.get("/health")
async def health_check():
    """Health check –¥–ª—è Render"""
    try:
        dm = data_manager
        if not dm:
            raise Exception("DataManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        users_count = await dm.get_users_count()
        
        return JSONResponse(
            content={
                "status": "healthy",
                "service": "dashboard",
                "version": "1.0.0",
                "timestamp": str(Path(__file__).stat().st_mtime),
                "data": {
                    "users_count": users_count,
                    "data_dir": str(settings.DATA_DIR),
                    "debug_mode": settings.DEBUG
                }
            },
            status_code=200
        )
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return JSONResponse(
            content={
                "status": "unhealthy",
                "service": "dashboard",
                "error": str(e)
            },
            status_code=503
        )

@app.get("/api/info")
async def api_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
    return {
        "name": "DailyCheck Dashboard API",
        "version": "1.0.0",
        "environment": settings.ENVIRONMENT,
        "debug": settings.DEBUG,
        "endpoints": {
            "users": "/api/users",
            "tasks": "/api/tasks", 
            "stats": "/api/stats",
            "charts": "/api/charts"
        }
    }

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö =====

@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫"""
    if request.url.path.startswith("/api/"):
        return JSONResponse(
            status_code=404,
            content={"detail": "API endpoint not found"}
        )
    
    return templates.TemplateResponse(
        "errors/404.html",
        {"request": request, "title": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"},
        status_code=404
    )

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–æ–∫"""
    logger.error(f"Internal server error: {exc}")
    
    if request.url.path.startswith("/api/"):
        return JSONResponse(
            status_code=500,
            content={"detail": "Internal server error"}
        )
    
    return templates.TemplateResponse(
        "errors/500.html",
        {"request": request, "title": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"},
        status_code=500
    )

# ===== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====

def run_dashboard():
    """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ Dashboard –Ω–∞ {settings.DASHBOARD_HOST}:{settings.DASHBOARD_PORT}")
    logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞: {settings.DATA_DIR}")
    logger.info(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {settings.DEBUG}")
    
    uvicorn.run(
        "dashboard.app:app",
        host=settings.DASHBOARD_HOST,
        port=settings.DASHBOARD_PORT,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower(),
        access_log=settings.DEBUG
    )

if __name__ == "__main__":
    run_dashboard(
