#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DailyCheck Web Dashboard - FastAPI Application
–í–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–ª—è Telegram –±–æ—Ç–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0.0
–î–∞—Ç–∞: 2025-06-10
"""

import os
import sys
import logging
import time
import json
from datetime import datetime
from pathlib import Path
from contextlib import asynccontextmanager
from typing import Optional, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from fastapi import FastAPI, Request, HTTPException, Depends, BackgroundTasks
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import HTMLResponse, JSONResponse, FileResponse
from fastapi.security import HTTPBearer
import uvicorn

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from dashboard.config import settings
except ImportError:
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ config –Ω–µ –Ω–∞–π–¥–µ–Ω
    class Settings:
        DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'
        LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
        DATA_DIR = Path(os.getenv('DATA_DIR', './data'))
        DASHBOARD_HOST = os.getenv('HOST', '0.0.0.0')
        DASHBOARD_PORT = int(os.getenv('PORT', 8000))
        ALLOWED_ORIGINS = ["*"]
        ENVIRONMENT = os.getenv('ENVIRONMENT', 'production')
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö
        def __post_init__(self):
            self.DATA_DIR.mkdir(exist_ok=True)
    
    settings = Settings()

try:
    from dashboard.core.data_manager import DataManager
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è DataManager
    class DataManager:
        def __init__(self, data_dir):
            self.data_dir = Path(data_dir)
            self.data_dir.mkdir(exist_ok=True)
        
        async def initialize(self):
            logger.info("üîß DataManager –∑–∞–≥–ª—É—à–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        async def cleanup(self):
            logger.info("üßπ DataManager –∑–∞–≥–ª—É—à–∫–∞ –æ—á–∏—â–µ–Ω–∞")
        
        async def get_users_count(self):
            return 0
        
        async def get_tasks_count(self):
            return 0
        
        async def get_total_completions(self):
            return 0
        
        async def get_active_users_count(self, days=1):
            return 0
        
        async def get_users_summary(self):
            return {"total": 0, "active": 0, "new": 0}
        
        async def get_tasks_summary(self):
            return {"total": 0, "completed": 0, "pending": 0}
        
        async def get_analytics_summary(self):
            return {"engagement": 0, "retention": 0, "growth": 0}

try:
    from dashboard.dependencies import get_data_manager
except ImportError:
    async def get_data_manager():
        global data_manager
        return data_manager

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ API —Ä–æ—É—Ç–µ—Ä–æ–≤
api_routers_available = True
try:
    from dashboard.api import users, tasks, stats, charts
except ImportError:
    api_routers_available = False
    logger.warning("‚ö†Ô∏è API —Ä–æ—É—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ endpoints")

# –ú–æ–¥–µ–ª–∏ –¥–ª—è API
try:
    from shared.models import HealthCheck
except ImportError:
    from pydantic import BaseModel
    
    class HealthCheck(BaseModel):
        status: str
        service: str
        version: str
        timestamp: float

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('logs/dashboard.log', encoding='utf-8') if Path('logs').exists() else logging.NullHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
data_manager: DataManager = None
app_start_time = time.time()

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global data_manager, app_start_time
    
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ DailyCheck Web Dashboard...")
    app_start_time = time.time()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        required_dirs = [
            settings.DATA_DIR,
            Path('logs'),
            Path('temp'),
            Path('static'),
            Path('dashboard/templates')
        ]
        
        for directory in required_dirs:
            directory.mkdir(exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        data_manager = DataManager(settings.DATA_DIR)
        await data_manager.initialize()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        users_count = await data_manager.get_users_count()
        tasks_count = await data_manager.get_tasks_count()
        
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        logger.info(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: {tasks_count}")
        logger.info(f"üåê Dashboard –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://{settings.DASHBOARD_HOST}:{settings.DASHBOARD_PORT}")
        logger.info("‚úÖ Dashboard –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫, —Ä–∞–±–æ—Ç–∞–µ–º —Å –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
    
    yield
    
    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Dashboard...")
    try:
        if data_manager:
            await data_manager.cleanup()
        logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="DailyCheck Dashboard",
    description="–í–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö Telegram –±–æ—Ç–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏",
    version="1.0.0",
    docs_url="/api/docs" if settings.DEBUG else None,
    redoc_url="/api/redoc" if settings.DEBUG else None,
    openapi_url="/api/openapi.json" if settings.DEBUG else None,
    lifespan=lifespan
)

# ===== MIDDLEWARE =====

# Trusted Host middleware (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
if not settings.DEBUG:
    allowed_hosts = ["*"]  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    if hasattr(settings, 'ALLOWED_HOSTS'):
        allowed_hosts = settings.ALLOWED_HOSTS
    
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=allowed_hosts
    )

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=getattr(settings, 'ALLOWED_ORIGINS', ["*"]),
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# Gzip compression
app.add_middleware(GZipMiddleware, minimum_size=1000)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫
@app.middleware("http")
async def logging_middleware(request: Request, call_next):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
    start_time = time.time()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
    client_ip = request.headers.get("X-Forwarded-For", request.client.host)
    user_agent = request.headers.get("User-Agent", "Unknown")
    
    try:
        response = await call_next(request)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        process_time = time.time() - start_time
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        logger.info(
            f"{request.method} {request.url.path} "
            f"- {response.status_code} "
            f"- {process_time:.3f}s "
            f"- {client_ip}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        response.headers["X-Process-Time"] = str(process_time)
        response.headers["X-Request-ID"] = str(hash(f"{client_ip}{start_time}"))
        
        return response
        
    except Exception as e:
        process_time = time.time() - start_time
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e} ({process_time:.3f}s)")
        
        return JSONResponse(
            status_code=500,
            content={"detail": "Internal server error", "request_id": str(hash(f"{client_ip}{start_time}"))}
        )

# ===== –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ –ò –®–ê–ë–õ–û–ù–´ =====

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
static_dir = Path(__file__).parent / "static"
if static_dir.exists():
    app.mount("/static", StaticFiles(directory=str(static_dir)), name="static")
    logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: {static_dir}")
else:
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    static_dir.mkdir(exist_ok=True)
    (static_dir / "css").mkdir(exist_ok=True)
    (static_dir / "js").mkdir(exist_ok=True)
    (static_dir / "img").mkdir(exist_ok=True)
    logger.warning(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤: {static_dir}")

# –®–∞–±–ª–æ–Ω—ã
templates_dir = Path(__file__).parent / "templates"
if templates_dir.exists():
    templates = Jinja2Templates(directory=str(templates_dir))
    logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω—ã: {templates_dir}")
else:
    templates_dir.mkdir(exist_ok=True)
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
    create_basic_templates(templates_dir)
    templates = Jinja2Templates(directory=str(templates_dir))
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã: {templates_dir}")

def create_basic_templates(templates_dir: Path):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    
    # –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
    base_template = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}DailyCheck Dashboard{% endblock %}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>ü§ñ</text></svg>">
</head>
<body class="bg-gray-50 min-h-screen">
    <!-- Navigation -->
    <nav class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <h1 class="text-xl font-bold text-gray-900">ü§ñ DailyCheck</h1>
                    </div>
                    <div class="hidden md:ml-6 md:flex md:space-x-8">
                        <a href="/" class="text-gray-900 hover:text-blue-600 px-3 py-2 text-sm font-medium">–ì–ª–∞–≤–Ω–∞—è</a>
                        <a href="/users" class="text-gray-500 hover:text-blue-600 px-3 py-2 text-sm font-medium">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</a>
                        <a href="/tasks" class="text-gray-500 hover:text-blue-600 px-3 py-2 text-sm font-medium">–ó–∞–¥–∞—á–∏</a>
                        <a href="/analytics" class="text-gray-500 hover:text-blue-600 px-3 py-2 text-sm font-medium">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</a>
                    </div>
                </div>
                <div class="flex items-center">
                    <span class="text-sm text-gray-500">
                        {% if debug %}üîß Dev{% else %}üöÄ Prod{% endif %}
                    </span>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        {% block content %}{% endblock %}
    </main>

    <!-- Scripts -->
    {% block scripts %}{% endblock %}
</body>
</html>
    """
    
    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    dashboard_template = """
{% extends "base.html" %}

{% block content %}
<div class="px-4 py-6 sm:px-0">
    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
    <div class="mb-8">
        <h2 class="text-2xl font-bold text-gray-900">–û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã</h2>
        <p class="mt-1 text-gray-600">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏ Telegram –±–æ—Ç–∞</p>
    </div>

    <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                            <span class="text-white text-sm">üë•</span>
                        </div>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</dt>
                            <dd class="text-lg font-medium text-gray-900">{{ stats.users_count or 0 }}</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                            <span class="text-white text-sm">üìù</span>
                        </div>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">–ó–∞–¥–∞—á–∏</dt>
                            <dd class="text-lg font-medium text-gray-900">{{ stats.tasks_count or 0 }}</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center">
                            <span class="text-white text-sm">‚úÖ</span>
                        </div>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</dt>
                            <dd class="text-lg font-medium text-gray-900">{{ stats.total_completions or 0 }}</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center">
                            <span class="text-white text-sm">üìä</span>
                        </div>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è</dt>
                            <dd class="text-lg font-medium text-gray-900">{{ stats.active_users_today or 0 }}</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã -->
        <div class="bg-white shadow rounded-lg p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
            <div class="space-y-3">
                <div class="flex items-center">
                    <div class="w-3 h-3 bg-green-500 rounded-full mr-3"></div>
                    <span class="text-sm text-gray-700">–í–µ–±-—Å–µ—Ä–≤–µ—Ä: –ê–∫—Ç–∏–≤–µ–Ω</span>
                </div>
                <div class="flex items-center">
                    <div class="w-3 h-3 bg-green-500 rounded-full mr-3"></div>
                    <span class="text-sm text-gray-700">–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞</span>
                </div>
                <div class="flex items-center">
                    <div class="w-3 h-3 bg-yellow-500 rounded-full mr-3"></div>
                    <span class="text-sm text-gray-700">API: –ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º</span>
                </div>
            </div>
        </div>

        <!-- –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è -->
        <div class="bg-white shadow rounded-lg p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
            <div class="space-y-3">
                <a href="/api/health" class="block w-full bg-blue-50 hover:bg-blue-100 text-blue-700 font-medium py-2 px-4 rounded-lg text-center transition">
                    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ API
                </a>
                <a href="/api/stats/overview" class="block w-full bg-green-50 hover:bg-green-100 text-green-700 font-medium py-2 px-4 rounded-lg text-center transition">
                    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                </a>
                {% if debug %}
                <a href="/docs" class="block w-full bg-purple-50 hover:bg-purple-100 text-purple-700 font-medium py-2 px-4 rounded-lg text-center transition">
                    API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
                </a>
                {% endif %}
            </div>
        </div>
    </div>
</div>
{% endblock %}
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã
    (templates_dir / "base.html").write_text(base_template.strip(), encoding='utf-8')
    (templates_dir / "dashboard.html").write_text(dashboard_template.strip(), encoding='utf-8')

# ===== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï API –†–û–£–¢–ï–†–û–í =====

if api_routers_available:
    app.include_router(users.router, prefix="/api/users", tags=["users"])
    app.include_router(tasks.router, prefix="/api/tasks", tags=["tasks"])
    app.include_router(stats.router, prefix="/api/stats", tags=["statistics"])
    app.include_router(charts.router, prefix="/api/charts", tags=["charts"])
    logger.info("‚úÖ API —Ä–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
else:
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ API endpoints
    @app.get("/api/users/summary")
    async def users_summary():
        return {"total": 0, "active": 0, "new_today": 0}
    
    @app.get("/api/tasks/summary")
    async def tasks_summary():
        return {"total": 0, "completed": 0, "pending": 0}
    
    logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–µ API endpoints —Å–æ–∑–¥–∞–Ω—ã")

# ===== –û–°–ù–û–í–ù–´–ï –ú–ê–†–®–†–£–¢–´ =====

@app.get("/", response_class=HTMLResponse)
async def dashboard_home(
    request: Request,
    dm: DataManager = Depends(get_data_manager)
):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        stats_data = {
            "users_count": await dm.get_users_count(),
            "tasks_count": await dm.get_tasks_count(),
            "total_completions": await dm.get_total_completions(),
            "active_users_today": await dm.get_active_users_count(days=1)
        }
        
        return templates.TemplateResponse(
            "dashboard.html",
            {
                "request": request,
                "title": "DailyCheck Dashboard",
                "stats": stats_data,
                "debug": settings.DEBUG
            }
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        return templates.TemplateResponse(
            "dashboard.html",
            {
                "request": request,
                "title": "DailyCheck Dashboard",
                "stats": {
                    "users_count": 0,
                    "tasks_count": 0,
                    "total_completions": 0,
                    "active_users_today": 0
                },
                "debug": settings.DEBUG,
                "error": str(e)
            }
        )

@app.get("/users", response_class=HTMLResponse)
async def users_page(
    request: Request,
    dm: DataManager = Depends(get_data_manager)
):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        users_data = await dm.get_users_summary()
        
        return templates.TemplateResponse(
            "users.html",
            {
                "request": request,
                "title": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - DailyCheck Dashboard",
                "users": users_data,
                "debug": settings.DEBUG
            }
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return JSONResponse(
            status_code=500,
            content={"detail": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"}
        )

@app.get("/tasks", response_class=HTMLResponse)
async def tasks_page(
    request: Request,
    dm: DataManager = Depends(get_data_manager)
):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–¥–∞—á"""
    try:
        tasks_data = await dm.get_tasks_summary()
        
        return templates.TemplateResponse(
            "tasks.html",
            {
                "request": request,
                "title": "–ó–∞–¥–∞—á–∏ - DailyCheck Dashboard",
                "tasks": tasks_data,
                "debug": settings.DEBUG
            }
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á: {e}")
        return JSONResponse(
            status_code=500,
            content={"detail": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"}
        )

@app.get("/analytics", response_class=HTMLResponse)
async def analytics_page(
    request: Request,
    dm: DataManager = Depends(get_data_manager)
):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        analytics_data = await dm.get_analytics_summary()
        
        return templates.TemplateResponse(
            "analytics.html",
            {
                "request": request,
                "title": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - DailyCheck Dashboard",
                "analytics": analytics_data,
                "debug": settings.DEBUG
            }
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        return JSONResponse(
            status_code=500,
            content={"detail": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"}
        )

# ===== –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ê–†–®–†–£–¢–´ =====

@app.get("/health", response_model=HealthCheck)
async def health_check():
    """Health check –¥–ª—è Render –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        dm = data_manager
        if not dm:
            raise Exception("DataManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        users_count = await dm.get_users_count()
        uptime = time.time() - app_start_time
        
        return HealthCheck(
            status="healthy",
            service="dashboard",
            version="1.0.0",
            timestamp=time.time(),
            data={
                "users_count": users_count,
                "data_dir": str(settings.DATA_DIR),
                "debug_mode": settings.DEBUG,
                "uptime_seconds": uptime
            }
        )
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return JSONResponse(
            status_code=503,
            content={
                "status": "unhealthy",
                "service": "dashboard",
                "error": str(e),
                "timestamp": time.time()
            }
        )

@app.get("/api/info")
async def api_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
    return {
        "name": "DailyCheck Dashboard API",
        "version": "1.0.0",
        "environment": getattr(settings, 'ENVIRONMENT', 'production'),
        "debug": settings.DEBUG,
        "uptime": time.time() - app_start_time,
        "endpoints": {
            "users": "/api/users",
            "tasks": "/api/tasks", 
            "stats": "/api/stats",
            "charts": "/api/charts"
        },
        "features": {
            "api_routers": api_routers_available,
            "data_manager": data_manager is not None,
            "templates": templates_dir.exists()
        }
    }

@app.get("/api/system/status")
async def system_status():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        import psutil
        import platform
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        system_info = {
            "platform": platform.system(),
            "python_version": platform.python_version(),
            "cpu_count": os.cpu_count(),
            "memory_usage": psutil.virtual_memory().percent,
            "disk_usage": psutil.disk_usage('/').percent
        }
    except ImportError:
        system_info = {
            "platform": "unknown",
            "python_version": "unknown",
            "cpu_count": os.cpu_count(),
            "memory_usage": None,
            "disk_usage": None
        }
    
    return {
        "status": "operational",
        "uptime": time.time() - app_start_time,
        "timestamp": time.time(),
        "system": system_info,
        "application": {
            "debug": settings.DEBUG,
            "data_dir": str(settings.DATA_DIR),
            "components": {
                "data_manager": data_manager is not None,
                "api_routers": api_routers_available,
                "templates": templates_dir.exists()
            }
        }
    }

@app.get("/ping")
async def ping():
    """–ü—Ä–æ—Å—Ç–æ–π ping endpoint"""
    return {
        "message": "pong", 
        "timestamp": time.time(),
        "service": "dashboard"
    }

# –†–µ–¥–∏—Ä–µ–∫—Ç—ã
@app.get("/dashboard")
async def dashboard_redirect():
    """–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é"""
    from fastapi.responses import RedirectResponse
    return RedirectResponse(url="/", status_code=301)

# ===== –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ –ú–ê–†–®–†–£–¢–´ =====

@app.get("/favicon.ico")
async def favicon():
    """–ò–∫–æ–Ω–∫–∞ —Å–∞–π—Ç–∞"""
    favicon_path = static_dir / "img" / "favicon.ico"
    if favicon_path.exists():
        return FileResponse(favicon_path)
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º emoji –∏–∫–æ–Ω–∫—É
        return JSONResponse({"message": "ü§ñ"})

@app.get("/robots.txt")
async def robots():
    """Robots.txt –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤"""
    return JSONResponse(
        content="User-agent: *\nDisallow: /api/\nAllow: /",
        media_type="text/plain"
    )

# ===== –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò =====

@app.post("/api/tasks/background")
async def create_background_task(background_tasks: BackgroundTasks):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–ø—Ä–∏–º–µ—Ä)"""
    def sample_task():
        import time
        time.sleep(5)
        logger.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    
    background_tasks.add_task(sample_task)
    return {"message": "–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞"}

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö =====

@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫"""
    if request.url.path.startswith("/api/"):
        return JSONResponse(
            status_code=404,
            content={
                "detail": "API endpoint not found",
                "path": str(request.url.path),
                "method": request.method
            }
        )
    
    # –î–ª—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HTML
    try:
        return templates.TemplateResponse(
            "errors/404.html",
            {"request": request, "title": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"},
            status_code=404
        )
    except:
        return JSONResponse(
            status_code=404,
            content={"detail": "Page not found"}
        )

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–æ–∫"""
    logger.error(f"Internal server error: {exc}")
    
    if request.url.path.startswith("/api/"):
        return JSONResponse(
            status_code=500,
            content={
                "detail": "Internal server error",
                "debug": settings.DEBUG
            }
        )
    
    try:
        return templates.TemplateResponse(
            "errors/500.html",
            {"request": request, "title": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"},
            status_code=500
        )
    except:
        return JSONResponse(
            status_code=500,
            content={"detail": "Internal server error"}
        )

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "detail": exc.detail,
            "status_code": exc.status_code
        }
    )

# ===== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====

def create_app() -> FastAPI:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return app

def run_dashboard(
    host: str = None,
    port: int = None,
    dev: bool = None,
    reload: bool = None
):
    """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
    host = host or settings.DASHBOARD_HOST
    port = port or settings.DASHBOARD_PORT
    dev = dev if dev is not None else settings.DEBUG
    reload = reload if reload is not None else dev
    
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ Dashboard –Ω–∞ http://{host}:{port}")
    logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞: {settings.DATA_DIR}")
    logger.info(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {dev}")
    logger.info(f"üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: {reload}")
    
    try:
        uvicorn.run(
            "dashboard.app:app",
            host=host,
            port=port,
            reload=reload,
            log_level="debug" if dev else "info",
            access_log=dev,
            server_header=False,
            date_header=False
        )
    except KeyboardInterrupt:
        logger.info("üëã Dashboard –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Dashboard: {e}")
        raise

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –Ω–∞–ø—Ä—è–º—É—é
    import argparse
    
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ DailyCheck Dashboard')
    parser.add_argument('--host', default=settings.DASHBOARD_HOST, help='Host –¥–ª—è –∑–∞–ø—É—Å–∫–∞')
    parser.add_argument('--port', type=int, default=settings.DASHBOARD_PORT, help='Port –¥–ª—è –∑–∞–ø—É—Å–∫–∞')
    parser.add_argument('--dev', action='store_true', help='–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--reload', action='store_true', help='–ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞')
    
    args = parser.parse_args()
    
    run_dashboard(
        host=args.host,
        port=args.port, 
        dev=args.dev,
        reload=args.reload
    )
