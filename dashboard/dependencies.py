#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DailycheckBot2025 - Dashboard Dependencies
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, middleware –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0.0
–î–∞—Ç–∞: 2025-06-10
"""

import asyncio
import time
import logging
from typing import Optional, Dict, Any, Generator, AsyncGenerator
from functools import lru_cache
from contextlib import asynccontextmanager

import redis.asyncio as redis
from fastapi import Depends, HTTPException, Request, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy.orm import sessionmaker

from dashboard.config import settings
from dashboard.core.data_manager import DataManager
from dashboard.core.statistics import StatisticsCalculator
from dashboard.core.analytics import AnalyticsEngine

logger = logging.getLogger(__name__)

# ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====

# –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
_data_manager: Optional[DataManager] = None

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
_statistics_calculator: Optional[StatisticsCalculator] = None

# –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–≤–∏–∂–æ–∫ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)  
_analytics_engine: Optional[AnalyticsEngine] = None

# Redis –∫–ª–∏–µ–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
_redis_client: Optional[redis.Redis] = None

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
_db_engine = None
_db_session_factory = None

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í =====

async def init_data_manager() -> DataManager:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    global _data_manager
    
    if _data_manager is None:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataManager...")
        _data_manager = DataManager(settings.DATA_DIR)
        await _data_manager.initialize()
        logger.info("‚úÖ DataManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    return _data_manager

async def init_statistics_calculator() -> StatisticsCalculator:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    global _statistics_calculator
    
    if _statistics_calculator is None:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è StatisticsCalculator...")
        data_manager = await get_data_manager()
        _statistics_calculator = StatisticsCalculator(data_manager)
        await _statistics_calculator.initialize()
        logger.info("‚úÖ StatisticsCalculator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    return _statistics_calculator

async def init_analytics_engine() -> AnalyticsEngine:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
    global _analytics_engine
    
    if _analytics_engine is None:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AnalyticsEngine...")
        data_manager = await get_data_manager()
        stats_calculator = await get_statistics_calculator()
        _analytics_engine = AnalyticsEngine(data_manager, stats_calculator)
        await _analytics_engine.initialize()
        logger.info("‚úÖ AnalyticsEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    return _analytics_engine

async def init_redis() -> Optional[redis.Redis]:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global _redis_client
    
    if settings.REDIS_URL and _redis_client is None:
        try:
            logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...")
            _redis_client = redis.from_url(
                settings.REDIS_URL,
                encoding="utf-8",
                decode_responses=True,
                max_connections=10
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await _redis_client.ping()
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
            _redis_client = None
    
    return _redis_client

async def init_database() -> Optional[AsyncSession]:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    global _db_engine, _db_session_factory
    
    if settings.DATABASE_URL and _db_engine is None:
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            _db_engine = create_async_engine(
                settings.DATABASE_URL,
                pool_size=settings.DB_POOL_SIZE,
                max_overflow=settings.DB_MAX_OVERFLOW,
                echo=settings.DEBUG
            )
            
            _db_session_factory = async_sessionmaker(
                _db_engine,
                class_=AsyncSession,
                expire_on_commit=False
            )
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            _db_engine = None
            _db_session_factory = None
    
    return _db_session_factory

# ===== –ü–†–û–í–ê–ô–î–ï–†–´ –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô =====

async def get_data_manager() -> DataManager:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä DataManager"""
    if _data_manager is None:
        return await init_data_manager()
    return _data_manager

async def get_statistics_calculator() -> StatisticsCalculator:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä StatisticsCalculator"""
    if _statistics_calculator is None:
        return await init_statistics_calculator()
    return _statistics_calculator

async def get_analytics_engine() -> AnalyticsEngine:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä AnalyticsEngine"""
    if _analytics_engine is None:
        return await init_analytics_engine()
    return _analytics_engine

async def get_redis() -> Optional[redis.Redis]:
    """–ü–æ–ª—É—á–∏—Ç—å Redis –∫–ª–∏–µ–Ω—Ç"""
    if settings.REDIS_URL and _redis_client is None:
        return await init_redis()
    return _redis_client

async def get_db_session() -> Optional[AsyncSession]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if _db_session_factory is None:
        await init_database()
    
    if _db_session_factory:
        async with _db_session_factory() as session:
            try:
                yield session
                await session.commit()
            except Exception:
                await session.rollback()
                raise
            finally:
                await session.close()
    else:
        yield None

# ===== –ö–≠–®–ò–†–û–í–ê–ù–ò–ï =====

class CacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, redis_client: Optional[redis.Redis] = None):
        self.redis = redis_client
        self.memory_cache: Dict[str, Dict[str, Any]] = {}
        self.cache_ttl = settings.CACHE_TTL
    
    async def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        if not settings.CACHE_ENABLED:
            return None
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Redis
        if self.redis:
            try:
                import json
                value = await self.redis.get(key)
                if value:
                    return json.loads(value)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis: {e}")
        
        # Fallback –Ω–∞ –ø–∞–º—è—Ç—å
        if key in self.memory_cache:
            cache_item = self.memory_cache[key]
            if time.time() - cache_item['timestamp'] < self.cache_ttl:
                return cache_item['data']
            else:
                del self.memory_cache[key]
        
        return None
    
    async def set(self, key: str, value: Any, ttl: Optional[int] = None) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à"""
        if not settings.CACHE_ENABLED:
            return
        
        ttl = ttl or self.cache_ttl
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
        if self.redis:
            try:
                import json
                await self.redis.setex(key, ttl, json.dumps(value, default=str))
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Redis: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        self.memory_cache[key] = {
            'data': value,
            'timestamp': time.time()
        }
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞ –≤ –ø–∞–º—è—Ç–∏
        await self._cleanup_memory_cache()
    
    async def delete(self, key: str) -> None:
        """–£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        if self.redis:
            try:
                await self.redis.delete(key)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Redis: {e}")
        
        if key in self.memory_cache:
            del self.memory_cache[key]
    
    async def clear(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à"""
        if self.redis:
            try:
                await self.redis.flushdb()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis: {e}")
        
        self.memory_cache.clear()
    
    async def _cleanup_memory_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞ –≤ –ø–∞–º—è—Ç–∏"""
        current_time = time.time()
        expired_keys = [
            key for key, item in self.memory_cache.items()
            if current_time - item['timestamp'] > self.cache_ttl
        ]
        
        for key in expired_keys:
            del self.memory_cache[key]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –º–µ–Ω–µ–¥–∂–µ—Ä
_cache_manager: Optional[CacheManager] = None

async def get_cache_manager() -> CacheManager:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global _cache_manager
    
    if _cache_manager is None:
        redis_client = await get_redis()
        _cache_manager = CacheManager(redis_client)
    
    return _cache_manager

# ===== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====

security = HTTPBearer(auto_error=False)

class TelegramAuth:
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Web App"""
    
    def __init__(self):
        self.bot_token = settings.TELEGRAM_BOT_TOKEN
        self.admin_ids = settings.ADMIN_USER_IDS
    
    async def verify_telegram_data(self, init_data: str) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö Telegram Web App"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ Telegram
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        if not self.bot_token:
            return None
        
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ hash –∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
            # return parse_and_verify_telegram_data(init_data, self.bot_token)
            return {"user_id": 123456, "username": "test_user"}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id in self.admin_ids

telegram_auth = TelegramAuth()

async def get_current_user(
    credentials: Optional[HTTPAuthorizationCredentials] = Depends(security)
) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –±—É–¥—É—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"""
    if not credentials:
        return None
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –¥–∞–Ω–Ω—ã—Ö
    user_data = await telegram_auth.verify_telegram_data(credentials.credentials)
    return user_data

async def require_auth(
    current_user: Optional[Dict[str, Any]] = Depends(get_current_user)
) -> Dict[str, Any]:
    """–¢—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if not current_user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
        )
    return current_user

async def require_admin(
    current_user: Dict[str, Any] = Depends(require_auth)
) -> Dict[str, Any]:
    """–¢—Ä–µ–±–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = current_user.get("user_id")
    if not user_id or not telegram_auth.is_admin(user_id):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )
    return current_user

# ===== RATE LIMITING =====

class RateLimiter:
    """–ü—Ä–æ—Å—Ç–æ–π rate limiter –≤ –ø–∞–º—è—Ç–∏"""
    
    def __init__(self):
        self.requests: Dict[str, list] = {}
        self.limits = self._parse_limit(settings.API_RATE_LIMIT)
    
    def _parse_limit(self, limit_str: str) -> Dict[str, int]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ª–∏–º–∏—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '100/minute')"""
        try:
            count, period = limit_str.split('/')
            return {
                'count': int(count),
                'period': {'second': 1, 'minute': 60, 'hour': 3600}.get(period, 60)
            }
        except:
            return {'count': 100, 'period': 60}
    
    async def is_allowed(self, client_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        current_time = time.time()
        
        if client_id not in self.requests:
            self.requests[client_id] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        cutoff_time = current_time - self.limits['period']
        self.requests[client_id] = [
            req_time for req_time in self.requests[client_id]
            if req_time > cutoff_time
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.requests[client_id]) >= self.limits['count']:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.requests[client_id].append(current_time)
        return True

rate_limiter = RateLimiter()

async def check_rate_limit(request: Request):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limit"""
    client_ip = request.client.host
    
    if not await rate_limiter.is_allowed(client_ip):
        raise HTTPException(
            status_code=status.HTTP_429_TOO_MANY_REQUESTS,
            detail="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"
        )

# ===== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –ú–ï–¢–†–ò–ö–ò =====

class MetricsCollector:
    """–°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.metrics: Dict[str, Any] = {
            'requests_total': 0,
            'requests_by_endpoint': {},
            'response_times': [],
            'errors_total': 0,
            'cache_hits': 0,
            'cache_misses': 0
        }
        self.start_time = time.time()
    
    def record_request(self, endpoint: str, response_time: float, status_code: int):
        """–ó–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É –∑–∞–ø—Ä–æ—Å–∞"""
        self.metrics['requests_total'] += 1
        
        if endpoint not in self.metrics['requests_by_endpoint']:
            self.metrics['requests_by_endpoint'][endpoint] = 0
        self.metrics['requests_by_endpoint'][endpoint] += 1
        
        self.metrics['response_times'].append(response_time)
        
        if status_code >= 400:
            self.metrics['errors_total'] += 1
    
    def record_cache_hit(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∫—ç—à"""
        self.metrics['cache_hits'] += 1
    
    def record_cache_miss(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–∞—Ö –∫—ç—à–∞"""
        self.metrics['cache_misses'] += 1
    
    def get_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏"""
        uptime = time.time() - self.start_time
        avg_response_time = (
            sum(self.metrics['response_times']) / len(self.metrics['response_times'])
            if self.metrics['response_times'] else 0
        )
        
        cache_hit_rate = (
            self.metrics['cache_hits'] / 
            (self.metrics['cache_hits'] + self.metrics['cache_misses'])
            if (self.metrics['cache_hits'] + self.metrics['cache_misses']) > 0 else 0
        )
        
        return {
            **self.metrics,
            'uptime_seconds': uptime,
            'avg_response_time': avg_response_time,
            'cache_hit_rate': cache_hit_rate
        }

metrics_collector = MetricsCollector()

async def get_metrics_collector() -> MetricsCollector:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫"""
    return metrics_collector

# ===== –ö–û–ù–¢–ï–ö–°–¢–ù–´–ï –ú–ï–ù–ï–î–ñ–ï–†–´ =====

@asynccontextmanager
async def get_components() -> AsyncGenerator[Dict[str, Any], None]:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    components = {
        'data_manager': await get_data_manager(),
        'statistics': await get_statistics_calculator(),
        'analytics': await get_analytics_engine(),
        'cache': await get_cache_manager(),
        'metrics': await get_metrics_collector()
    }
    
    try:
        yield components
    finally:
        # Cleanup –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        pass

# ===== –£–¢–ò–õ–ò–¢–´ =====

def get_client_ip(request: Request) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
    forwarded_for = request.headers.get("X-Forwarded-For")
    if forwarded_for:
        return forwarded_for.split(",")[0].strip()
    
    real_ip = request.headers.get("X-Real-IP")
    if real_ip:
        return real_ip
    
    return request.client.host

def get_user_agent(request: Request) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å User-Agent –∫–ª–∏–µ–Ω—Ç–∞"""
    return request.headers.get("User-Agent", "Unknown")

async def log_request(request: Request, response_time: float, status_code: int):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞"""
    client_ip = get_client_ip(request)
    user_agent = get_user_agent(request)
    
    logger.info(
        f"{request.method} {request.url.path} "
        f"- {status_code} - {response_time:.3f}s "
        f"- {client_ip} - {user_agent}"
    )
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics_collector.record_request(
        request.url.path, 
        response_time, 
        status_code
    )

# ===== –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í =====

async def cleanup_resources():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global _data_manager, _statistics_calculator, _analytics_engine, _redis_client, _db_engine
    
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
    
    try:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if _data_manager:
            await _data_manager.cleanup()
        
        if _statistics_calculator:
            await _statistics_calculator.cleanup()
        
        if _analytics_engine:
            await _analytics_engine.cleanup()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis
        if _redis_client:
            await _redis_client.close()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
        if _db_engine:
            await _db_engine.dispose()
        
        logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò =====

@lru_cache()
def get_settings():
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)"""
    return settings

def get_logger(name: str = __name__):
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    return logging.getLogger(name)
