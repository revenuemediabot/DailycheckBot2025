#!/usr/bin/env python3

import os
import sys
import logging

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ event loop –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
try:
    import nest_asyncio
    nest_asyncio.apply()
    print("‚úÖ nest_asyncio –ø—Ä–∏–º–µ–Ω–µ–Ω")
except ImportError:
    print("‚ö†Ô∏è nest_asyncio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except:
    pass

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.getenv("PORT", "8080"))

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    sys.exit(1)

logger.info(f"‚úÖ BOT_TOKEN: {BOT_TOKEN[:10]}...")
if OPENAI_API_KEY:
    logger.info(f"‚úÖ OpenAI: {OPENAI_API_KEY[:10]}...")

# HTTP —Å–µ—Ä–≤–µ—Ä
import threading
import http.server
import socketserver
import json

def start_health_server():
    class HealthHandler(http.server.SimpleHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            data = {
                "status": "ok",
                "service": "dailycheck-bot",
                "version": "4.0",
                "message": "Bot is running!"
            }
            self.wfile.write(json.dumps(data).encode())
        
        def log_message(self, format, *args):
            pass
    
    def run_server():
        try:
            with socketserver.TCPServer(("", PORT), HealthHandler) as httpd:
                logger.info(f"‚úÖ Health server –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
                httpd.serve_forever()
        except Exception as e:
            logger.error(f"HTTP server –æ—à–∏–±–∫–∞: {e}")
    
    threading.Thread(target=run_server, daemon=True).start()

# Telegram –∏–º–ø–æ—Ä—Ç—ã
try:
    from telegram.ext import Application, ApplicationBuilder, CommandHandler, MessageHandler, filters
    from telegram import Update
    from telegram.ext import ContextTypes
    logger.info("‚úÖ Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Telegram: {e}")
    sys.exit(1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = (
        f"üöÄ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        f"–Ø DailyCheck Bot - –≤–∞—à AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n\n"
        f"üìñ –ö–æ–º–∞–Ω–¥—ã:\n"
        f"/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        f"/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
        f"/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
        f"/ai <—Ç–µ–∫—Å—Ç> - AI –ø–æ–º–æ—â—å\n\n"
        f"üí¨ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!"
    )
    await update.message.reply_text(welcome_text)
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

# –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é help_command –Ω–∞ —ç—Ç—É –≤–µ—Ä—Å–∏—é (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç):

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìö DailyCheck Bot - –°–ø—Ä–∞–≤–∫–∞\n\n"
        "ü§ñ AI –§—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai <–≤–∞—à –≤–æ–ø—Ä–æ—Å>\n"
        "‚Ä¢ –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
        "üîß –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞\n"
        "/ai <—Ç–µ–∫—Å—Ç> - –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ AI\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ –ö–∞–∫ –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å?\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∏ —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π\n"
        "‚Ä¢ –°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "‚Ä¢ –ö–∞–∫ –±–æ—Ä–æ—Ç—å—Å—è —Å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–µ–π?"
    )
    await update.message.reply_text(help_text)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply_text –≤–º–µ—Å—Ç–æ reply_html

async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ping_text = (
        "üèì <b>–ü–æ–Ω–≥!</b>\n\n"
        f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ\n"
        f"ü§ñ AI: {'–≤–∫–ª—é—á–µ–Ω' if OPENAI_API_KEY else '–≤—ã–∫–ª—é—á–µ–Ω'}\n"
        f"üåê –°–µ—Ä–≤–µ—Ä: –∞–∫—Ç–∏–≤–µ–Ω\n"
        f"‚ö° –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
    )
    await update.message.reply_html(ping_text)

async def ai_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "üí≠ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ai <–≤–∞—à –≤–æ–ø—Ä–æ—Å>\n"
            "–ü—Ä–∏–º–µ—Ä: /ai –ö–∞–∫ –ª—É—á—à–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å?"
        )
        return
    
    user_text = " ".join(context.args)
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    response = await generate_ai_response(user_text)
    await update.message.reply_text(response)

# AI —Ñ—É–Ω–∫—Ü–∏–∏
async def generate_ai_response(text: str) -> str:
    if not OPENAI_API_KEY:
        return (
            f"ü§ñ AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω OPENAI_API_KEY).\n\n"
            f"–ù–æ —è –∑–∞–ø–æ–º–Ω–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å: '{text}'\n\n"
            f"üí° –ü–æ–∫–∞ —á—Ç–æ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!"
        )
    
    try:
        from openai import AsyncOpenAI
        client = AsyncOpenAI(api_key=OPENAI_API_KEY)
        
        system_prompt = (
            "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. "
            "–û—Ç–≤–µ—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –ø–æ–ª–µ–∑–Ω–æ –∏ —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º. "
            "–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏. "
            "–î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã."
        )
        
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": text}
            ],
            max_tokens=400,
            temperature=0.7
        )
        
        return f"ü§ñ {response.choices[0].message.content.strip()}"
        
    except Exception as e:
        logger.error(f"AI –æ—à–∏–±–∫–∞: {e}")
        return (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å AI —Å–µ—Ä–≤–∏—Å–æ–º.\n\n"
            f"–í–∞—à –∑–∞–ø—Ä–æ—Å: '{text}'\n\n"
            f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É!"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    user = update.effective_user
    
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} (@{user.username}): {user_text[:50]}...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    try:
        response = await generate_ai_response(user_text)
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "üòÖ –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã."
        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ main() (–ø–æ—Å–ª–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è):

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ DailyCheck Bot v4.0...")
    logger.info(f"Python: {sys.version}")
    logger.info(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {sys.platform}")
    
    # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –ø–∞—É–∑—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    import time
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤...")
    time.sleep(10)  # 10 —Å–µ–∫—É–Ω–¥ –ø–∞—É–∑–∞
    
    try:
        # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        start_health_server()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        
        # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
        
        logger.info("üéØ –ó–∞–ø—É—Å–∫ polling...")
        
        # –ó–∞–ø—É—Å–∫ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        max_retries = 3
        for attempt in range(max_retries):
            try:
                app.run_polling(drop_pending_updates=True)
                break  # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
            except Exception as e:
                if "Conflict" in str(e) and attempt < max_retries - 1:
                    logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}), –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 15 —Å–µ–∫...")
                    time.sleep(15)
                else:
                    raise
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
