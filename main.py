# ===================== –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï MAIN.PY =====================
# –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–ª–æ–∫–∞

# ===================== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –ò –¢–ê–ô–ú–ï–†–´ =====================

async def remind_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/remind")
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚è∞ **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**\n\n"
            "–§–æ—Ä–º–∞—Ç: `/remind <–≤—Ä–µ–º—è_–≤_–º–∏–Ω—É—Ç–∞—Ö> <—Ç–µ–∫—Å—Ç>`\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `/remind 30 –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤`\n"
            "‚Ä¢ `/remind 60 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π`\n"
            "‚Ä¢ `/remind 120 –û–±–µ–¥`",
            parse_mode="Markdown"
        )
        return
    
    try:
        minutes = int(context.args[0])
        reminder_text = " ".join(context.args[1:])
        
        if minutes <= 0:
            await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return
        
        reminder = {
            "text": reminder_text,
            "created_at": datetime.now().isoformat(),
            "remind_at": (datetime.now() + timedelta(minutes=minutes)).isoformat(),
            "minutes": minutes
        }
        
        user_reminders[user_id].append(reminder)
        save_user_data()
        
        await update.message.reply_text(
            f"‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
            f"üìù –¢–µ–∫—Å—Ç: {reminder_text}\n"
            f"‚è±Ô∏è –ß–µ—Ä–µ–∑: {minutes} –º–∏–Ω—É—Ç\n"
            f"üïê –í—Ä–µ–º—è: {(datetime.now() + timedelta(minutes=minutes)).strftime('%H:%M')}\n\n"
            f"üí° –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å APScheduler –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –º–∏–Ω—É—Ç–∞—Ö.")

async def timer_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä"""
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/timer")
    
    if not context.args:
        await update.message.reply_text(
            "‚è≤Ô∏è **–¢–∞–π–º–µ—Ä**\n\n"
            "–§–æ—Ä–º–∞—Ç: `/timer <–º–∏–Ω—É—Ç—ã>`\n\n"
            "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã:\n"
            "‚Ä¢ `/timer 25` - –ø–æ–º–æ–¥–æ—Ä–æ (—Ä–∞–±–æ—Ç–∞)\n"
            "‚Ä¢ `/timer 5` - –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤\n"
            "‚Ä¢ `/timer 15` - –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤\n"
            "‚Ä¢ `/timer 60` - —á–∞—Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏",
            parse_mode="Markdown"
        )
        return
    
    try:
        minutes = int(context.args[0])
        
        if minutes <= 0:
            await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return
        
        users_data[user_id]["timer_uses"] += 1
        xp_msg = add_xp(user_id, 5)
        achievements = check_achievements(user_id)
        
        timer = {
            "minutes": minutes,
            "started_at": datetime.now().isoformat(),
            "ends_at": (datetime.now() + timedelta(minutes=minutes)).isoformat()
        }
        
        user_timers[user_id].append(timer)
        save_user_data()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–∞–π–º–µ—Ä–∞
        timer_type = "‚è≤Ô∏è –¢–∞–π–º–µ—Ä"
        if minutes == 25:
            timer_type = "üçÖ –ü–æ–º–æ–¥–æ—Ä–æ"
        elif minutes == 5:
            timer_type = "‚òï –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤"
        elif minutes == 15:
            timer_type = "üõãÔ∏è –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤"
        
        response = f"{timer_type} –∑–∞–ø—É—â–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç!\n"
        response += f"üïê –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤: {(datetime.now() + timedelta(minutes=minutes)).strftime('%H:%M')}\n"
        response += f"{xp_msg}"
        
        if achievements:
            response += f"\nüèÜ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {', '.join(achievements)}"
        
        await update.message.reply_text(response)
        
    except ValueError:
        await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –º–∏–Ω—É—Ç–∞—Ö.")

# ===================== –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ï –¶–ï–õ–ò =====================

async def weekly_goals_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏"""
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/weekly_goals")
    
    goals = users_data[user_id]["weekly_goals"]
    if not goals:
        keyboard = [
            [InlineKeyboardButton("üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏", callback_data="set_weekly_goals")],
            [InlineKeyboardButton("üí° –ü—Ä–∏–º–µ—Ä—ã —Ü–µ–ª–µ–π", callback_data="example_goals")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üéØ **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π.**\n\n"
            "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –ø–æ–º–æ–≥–∞—é—Ç:\n"
            "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ —Ü–µ–ª–∏!",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
    
    text = "üéØ **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏:**\n\n"
    keyboard = []
    
    for i, goal in enumerate(goals, 1):
        status = "‚úÖ" if goal.get("completed", False) else "‚≠ï"
        progress = goal.get("progress", 0)
        target = goal.get("target", 1)
        
        text += f"{status} {i}. {goal['name']}\n"
        if target > 1:
            text += f"   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{target}\n"
        text += f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {goal['created_at'][:10]}\n\n"
        
        if not goal.get("completed", False):
            keyboard.append([InlineKeyboardButton(f"‚úÖ –¶–µ–ª—å {i}", callback_data=f"complete_goal_{i-1}")])
    
    keyboard.extend([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="add_weekly_goal")],
        [InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è", callback_data="reset_weekly_goals")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

async def set_weekly_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏"""
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/set_weekly")
    
    if not context.args:
        await update.message.reply_text(
            "üéØ **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏**\n\n"
            "–§–æ—Ä–º–∞—Ç: `/set_weekly —Ü–µ–ª—å1; —Ü–µ–ª—å2; —Ü–µ–ª—å3`\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "`/set_weekly –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É; –°–¥–µ–ª–∞—Ç—å 5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫; –ò–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É; –í—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏`\n\n"
            "üí° –¶–µ–ª–∏ –∑–∞–º–µ–Ω—è—Ç —Ç–µ–∫—É—â–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏",
            parse_mode="Markdown"
        )
        return
    
    goals_text = " ".join(context.args)
    goal_names = [goal.strip() for goal in goals_text.split(";") if goal.strip()]
    
    if not goal_names:
        await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ü–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç!")
        return
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ü–µ–ª–∏
    users_data[user_id]["weekly_goals"] = []
    
    for name in goal_names:
        goal = {
            "name": name,
            "completed": False,
            "created_at": datetime.now().isoformat(),
            "progress": 0,
            "target": 1
        }
        users_data[user_id]["weekly_goals"].append(goal)
    
    xp_reward = len(goal_names) * 10
    xp_msg = add_xp(user_id, xp_reward)
    achievements = check_achievements(user_id)
    
    save_user_data()
    
    response = f"üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(goal_names)} –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!\n{xp_msg}"
    if achievements:
        response += f"\nüèÜ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {', '.join(achievements)}"
    
    await update.message.reply_text(response)

# ===================== –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø =====================

async def theme_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/theme")
    
    if not context.args:
        current_theme_key = user_themes[user_id]
        current_theme = THEMES[current_theme_key]["name"]
        
        text = f"üé® **–¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è**\n\n"
        text += f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {current_theme}\n\n"
        text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:\n"
        
        for i, (key, theme) in enumerate(THEMES.items(), 1):
            marker = "‚ñ∂Ô∏è" if key == current_theme_key else f"{i}."
            text += f"{marker} {theme['name']}\n"
        
        text += f"\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/theme <–Ω–æ–º–µ—Ä>`"
        await update.message.reply_text(text, parse_mode="Markdown")
        return
    
    try:
        theme_num = int(context.args[0])
        theme_keys = list(THEMES.keys())
        
        if 1 <= theme_num <= len(theme_keys):
            new_theme_key = theme_keys[theme_num - 1]
            user_themes[user_id] = new_theme_key
            new_theme = THEMES[new_theme_key]
            
            xp_msg = add_xp(user_id, 5)
            save_user_data()
            
            await update.message.reply_text(
                f"üé® –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_theme['name']}\n"
                f"{new_theme['accent']} –ù–æ–≤—ã–π —Å—Ç–∏–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                f"{xp_msg}"
            )
        else:
            await update.message.reply_text(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(THEMES)}")
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–º—ã")

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/settings")
    
    user = users_data[user_id]
    theme = THEMES[user_themes[user_id]]["name"]
    ai_chat = user_ai_chat[user_id]
    
    text = f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
    text += f"üé® –¢–µ–º–∞: {theme}\n"
    text += f"ü§ñ AI-—á–∞—Ç: {'–≤–∫–ª—é—á–µ–Ω' if ai_chat else '–≤—ã–∫–ª—é—á–µ–Ω'}\n"
    text += f"üö≠ Dry —Ä–µ–∂–∏–º: {'–≤–∫–ª—é—á–µ–Ω' if user['dry_mode'] else '–≤—ã–∫–ª—é—á–µ–Ω'}\n"
    text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['created_at'][:10]}\n"
    text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {get_user_level(user['xp'])[1]}\n"
    text += f"‚ö° XP: {user['xp']}\n"
    text += f"üî• –°—Ç—Ä–∏–∫: {user['streak']} –¥–Ω–µ–π\n\n"
    
    text += "**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:**\n"
    text += "‚Ä¢ `/theme` - —Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É\n"
    text += "‚Ä¢ `/ai_chat` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å AI-—á–∞—Ç\n"
    text += "‚Ä¢ `/dryon` –∏–ª–∏ `/dryoff` - dry —Ä–µ–∂–∏–º\n"
    text += "‚Ä¢ `/export` - —ç–∫—Å–ø–æ—Ä—Ç –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
    
    keyboard = [
        [InlineKeyboardButton("üé® –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data="change_theme")],
        [InlineKeyboardButton("ü§ñ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å AI", callback_data="toggle_ai")],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

# ===================== –≠–ö–°–ü–û–†–¢ –ò –£–¢–ò–õ–ò–¢–´ =====================

async def export_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/export")
    
    user_data = {
        "user_info": {
            "user_id": user_id,
            "level": get_user_level(users_data[user_id]["xp"])[1],
            "xp": users_data[user_id]["xp"],
            "streak": users_data[user_id]["streak"],
            "created_at": users_data[user_id]["created_at"],
            "theme": THEMES[user_themes[user_id]]["name"]
        },
        "tasks": users_data[user_id]["tasks"],
        "achievements": [ACHIEVEMENTS[i] for i in user_achievements[user_id]],
        "weekly_goals": users_data[user_id]["weekly_goals"],
        "statistics": {
            "total_tasks_created": users_data[user_id]["total_tasks_created"],
            "total_tasks_completed": users_data[user_id]["total_tasks_completed"],
            "completed_today": users_data[user_id]["completed_today"],
            "timer_uses": users_data[user_id]["timer_uses"],
            "stats_views": users_data[user_id]["stats_views"]
        },
        "social": {
            "friends_count": len(user_friends[user_id]),
            "friends_list": user_friends[user_id]
        },
        "export_info": {
            "export_date": datetime.now().isoformat(),
            "bot_version": "4.0",
            "format": "JSON"
        }
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞ (–≤ –ø–∞–º—è—Ç–∏)
    json_data = json.dumps(user_data, ensure_ascii=False, indent=2)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ CSV –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞—á
    csv_output = StringIO()
    csv_writer = csv.writer(csv_output)
    csv_writer.writerow(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è", "–ü–æ–¥–∑–∞–¥–∞—á–∏"])
    
    for task in users_data[user_id]["tasks"]:
        status = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" if task.get("completed", False) else "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        category = CATEGORIES[task.get("category", "personal")]["name"]
        priority = PRIORITIES[task.get("priority", "medium")]["name"]
        subtasks_count = len(task.get("subtasks", []))
        
        csv_writer.writerow([
            task["name"],
            status,
            category,
            priority,
            task["created_at"][:10],
            subtasks_count
        ])
    
    csv_data = csv_output.getvalue()
    csv_output.close()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    stats_text = (
        f"üì§ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
        f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"üìã –ó–∞–¥–∞—á: {len(user_data['tasks'])}\n"
        f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(user_data['achievements'])}\n"
        f"üéØ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π: {len(user_data['weekly_goals'])}\n"
        f"üë• –î—Ä—É–∑–µ–π: {user_data['social']['friends_count']}\n"
        f"‚ö° XP: {user_data['user_info']['xp']}\n"
        f"üìä –£—Ä–æ–≤–µ–Ω—å: {user_data['user_info']['level']}\n\n"
        f"üìÅ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
        f"‚Ä¢ JSON - –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        f"‚Ä¢ CSV - —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á\n\n"
        f"üíæ –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å JSON", callback_data="show_json")],
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å CSV", callback_data="show_csv")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º
    users_data[user_id]["export_json"] = json_data[:2000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    users_data[user_id]["export_csv"] = csv_data[:2000]
    
    await update.message.reply_text(stats_text, reply_markup=reply_markup, parse_mode="Markdown")

async def health_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    user_id = update.effective_user.id
    log_command(user_id, "/health")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    system_status = "‚úÖ –û—Ç–ª–∏—á–Ω–æ"
    ai_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if OPENAI_API_KEY else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    total_tasks_all_users = sum(len(user.get("tasks", [])) for user in users_data.values())
    active_users = len([u for u in users_data.values() if len(u.get("tasks", [])) > 0])
    
    await update.message.reply_text(
        f"üè• **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã**\n\n"
        f"ü§ñ –ë–æ—Ç: {system_status}\n"
        f"üß† AI: {ai_status}\n"
        f"üåê HTTP —Å–µ—Ä–≤–µ—Ä: –ø–æ—Ä—Ç {PORT}\n"
        f"üíæ –î–∞–Ω–Ω—ã–µ: —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è\n\n"
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {global_stats['total_users']}\n"
        f"üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
        f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks_all_users}\n"
        f"üìä –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {global_stats['commands_executed']}\n"
        f"ü§ñ AI –∑–∞–ø—Ä–æ—Å–æ–≤: {global_stats['ai_requests']}\n\n"
        f"‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}\n"
        f"üîÑ –í–µ—Ä—Å–∏—è: 4.0 (FULL)",
        parse_mode="Markdown"
    )

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    user_id = update.effective_user.id
    log_command(user_id, "/test")
    
    if user_id != ADMIN_USER_ID and ADMIN_USER_ID != 0:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    test_tasks = [
        {"name": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ - –†–∞–±–æ—Ç–∞", "completed": True, "category": "work", "priority": "high"},
        {"name": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ - –ó–¥–æ—Ä–æ–≤—å–µ", "completed": False, "category": "health", "priority": "medium"},
        {"name": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ - –û–±—É—á–µ–Ω–∏–µ", "completed": True, "category": "study", "priority": "low"},
        {"name": "–ó–∞–¥–∞—á–∞ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏", "completed": False, "category": "personal", "priority": "medium", 
         "subtasks": [
             {"name": "–ü–æ–¥–∑–∞–¥–∞—á–∞ 1", "completed": True},
             {"name": "–ü–æ–¥–∑–∞–¥–∞—á–∞ 2", "completed": False}
         ]}
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    users_data[user_id]["tasks"].extend(test_tasks)
    users_data[user_id]["total_tasks_created"] += len(test_tasks)
    users_data[user_id]["completed_today"] += 2
    users_data[user_id]["streak"] = 5
    users_data[user_id]["timer_uses"] += 3
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–ª–∏
    test_goals = [
        {"name": "–¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å 1", "completed": True, "created_at": datetime.now().isoformat()},
        {"name": "–¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å 2", "completed": False, "created_at": datetime.now().isoformat()}
    ]
    users_data[user_id]["weekly_goals"].extend(test_goals)
    
    # –î–∞–µ–º XP
    add_xp(user_id, 150)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievements = check_achievements(user_id)
    
    save_user_data()
    
    response = "üß™ **–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!**\n\n"
    response += f"üìã –î–æ–±–∞–≤–ª–µ–Ω–æ {len(test_tasks)} –∑–∞–¥–∞—á\n"
    response += f"üéØ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(test_goals)} —Ü–µ–ª–µ–π\n"
    response += f"‚ö° –î–æ–±–∞–≤–ª–µ–Ω–æ 150 XP\n"
    response += f"üî• –°—Ç—Ä–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 5 –¥–Ω–µ–π\n"
    
    if achievements:
        response += f"\nüèÜ –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {', '.join(achievements)}"
    
    await update.message.reply_text(response, parse_mode="Markdown")

# ===================== –†–ï–ñ–ò–ú "DRY" =====================

async def dryon_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –¥–Ω–µ–π –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è"""
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/dryon")
    
    if users_data[user_id]["dry_mode"]:
        days = users_data[user_id]["dry_days"]
        await update.message.reply_text(
            f"üö≠ –†–µ–∂–∏–º 'Dry' —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!\n"
            f"–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫: {days} –¥–Ω–µ–π"
        )
        return
    
    users_data[user_id]["dry_mode"] = True
    users_data[user_id]["dry_days"] = 0
    save_user_data()
    
    await update.message.reply_text(
        "üö≠ **–†–µ–∂–∏–º 'Dry' –≤–∫–ª—é—á–µ–Ω!**\n\n"
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–Ω–µ–π –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è –Ω–∞—á–∞—Ç–æ.\n"
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Å—Ç–æ–π–∫–æ—Å—Ç–∏ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ XP!\n\n"
        "üí™ –í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/dryoff` –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞.",
        parse_mode="Markdown"
    )

async def dryoff_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç –¥–Ω–µ–π –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è"""
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/dryoff")
    
    if not users_data[user_id]["dry_mode"]:
        await update.message.reply_text("üö≠ –†–µ–∂–∏–º 'Dry' –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/dryon` –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return
    
    days = users_data[user_id]["dry_days"]
    users_data[user_id]["dry_mode"] = False
    
    # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ dry –¥–Ω–∏
    xp_reward = days * 10
    if days >= 7:
        xp_reward += 50  # –ë–æ–Ω—É—Å –∑–∞ –Ω–µ–¥–µ–ª—é
    if days >= 30:
        xp_reward += 100  # –ë–æ–Ω—É—Å –∑–∞ –º–µ—Å—è—Ü
    
    xp_msg = add_xp(user_id, xp_reward)
    save_user_data()
    
    # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if days == 0:
        message = "–ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—Å—è –ª—É—á—à–µ."
    elif days < 7:
        message = "–•–æ—Ä–æ—à–∏–π —Å—Ç–∞—Ä—Ç! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ."
    elif days < 30:
        message = "–í–ø–µ—á–∞—Ç–ª—è—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –ø–æ–∫–∞–∑–∞–ª–∏ —Å–∏–ª—É –≤–æ–ª–∏."
    else:
        message = "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω —Å–∏–ª—ã –≤–æ–ª–∏!"
    
    await update.message.reply_text(
        f"üö≠ **–û—Ç—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
        f"üìä –î–Ω–µ–π –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è: {days}\n"
        f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {xp_reward} XP\n"
        f"üí™ {message}\n\n"
        f"{xp_msg}",
        parse_mode="Markdown"
    )

# ===================== –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò =====================

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —á–∞—Ç–∞–º"""
    user_id = update.effective_user.id
    log_command(user_id, "/broadcast")
    
    if user_id != ADMIN_USER_ID and ADMIN_USER_ID != 0:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n"
            "–§–æ—Ä–º–∞—Ç: `/broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/broadcast –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞! –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.`"
        )
        return
    
    message = " ".join(context.args)
    sent_count = 0
    failed_count = 0
    
    await update.message.reply_text(f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    for target_user_id in users_data.keys():
        try:
            await context.bot.send_message(
                target_user_id, 
                f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n{message}",
                parse_mode="Markdown"
            )
            sent_count += 1
        except Exception as e:
            failed_count += 1
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
    
    await update.message.reply_text(
        f"üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
        f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(sent_count/(sent_count+failed_count)*100):.1f}%"
    )

async def stats_global_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    user_id = update.effective_user.id
    log_command(user_id, "/stats_global")
    
    if user_id != ADMIN_USER_ID and ADMIN_USER_ID != 0:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    # –ü–æ–¥—Å—á–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_tasks = sum(len(user.get("tasks", [])) for user in users_data.values())
    total_completed = sum(
        sum(1 for task in user.get("tasks", []) if task.get("completed", False))
        for user in users_data.values()
    )
    total_xp = sum(user.get("xp", 0) for user in users_data.values())
    active_users = len([u for u in users_data.values() if len(u.get("tasks", [])) > 0])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
    level_stats = {}
    for user in users_data.values():
        level = get_user_level(user.get("xp", 0))[1]
        level_stats[level] = level_stats.get(level, 0) + 1
    
    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ XP
    top_users = sorted(
        [(uid, user.get("xp", 0)) for uid, user in users_data.items()],
        key=lambda x: x[1], reverse=True
    )[:5]
    
    text = f"üìä **–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
    text += f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
    text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {global_stats['total_users']}\n"
    text += f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n\n"
    
    text += f"üìã **–ó–∞–¥–∞—á–∏:**\n"
    text += f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {total_tasks}\n"
    text += f"   ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_completed}\n"
    text += f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {(total_completed/max(1,total_tasks)*100):.1f}%\n\n"
    
    text += f"‚ö° **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
    text += f"   ‚Ä¢ –û–±—â–∏–π XP: {total_xp:,}\n"
    text += f"   ‚Ä¢ –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {global_stats['commands_executed']:,}\n"
    text += f"   ‚Ä¢ AI –∑–∞–ø—Ä–æ—Å–æ–≤: {global_stats['ai_requests']:,}\n\n"
    
    text += f"üèÜ **–¢–æ–ø-5 –ø–æ XP:**\n"
    for i, (uid, xp) in enumerate(top_users, 1):
        level = get_user_level(xp)[1]
        text += f"   {i}. ID{uid}: {xp} XP ({level})\n"
    
    text += f"\nüìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º:**\n"
    for level, count in sorted(level_stats.items(), key=lambda x: LEVELS.index(x[0]) if x[0] in LEVELS else 999):
        text += f"   ‚Ä¢ {level}: {count} —á–µ–ª.\n"
    
    await update.message.reply_text(text, parse_mode="Markdown")

# ===================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô =====================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    user_text = update.message.text
    init_user(user_id)
    
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_text[:50]}...")
    
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω AI-—á–∞—Ç —Ä–µ–∂–∏–º
    if user_ai_chat.get(user_id, False):
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è AI
        text_lower = user_text.lower()
        if any(word in text_lower for word in ["–º–æ—Ç–∏–≤", "–ø–æ–¥–¥–µ—Ä–∂", "–≤–¥–æ—Ö–Ω–æ–≤", "—Å–∏–ª—ã", "–º–æ–≥—É"]):
            ai_type = "motivate"
        elif any(word in text_lower for word in ["–ø–ª–∞–Ω–∏—Ä", "–ø—Ä–æ–¥—É–∫—Ç–∏–≤", "–∑–∞–¥–∞—á", "—Å–æ–≤–µ—Ç—ã", "–∫–∞–∫"]):
            ai_type = "coach"
        elif any(word in text_lower for word in ["—Å—Ç—Ä–µ—Å—Å", "—É—Å—Ç–∞–ª", "–≥—Ä—É—Å—Ç–Ω", "–ø–ª–æ—Ö", "–¥–µ–ø—Ä–µ—Å—Å"]):
            ai_type = "psy"
        else:
            ai_type = "general"
        
        response = await generate_ai_response(user_text, user_id, ai_type)
        await update.message.reply_text(response)
        return
    
    # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    responses = {
        "–ø—Ä–∏–≤–µ—Ç": "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        "–ø–æ–º–æ—â—å": "üÜò –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
        "–∫–∞–∫ –¥–µ–ª–∞": f"üòä –û—Ç–ª–∏—á–Ω–æ! –£ –≤–∞—Å {users_data[user_id]['xp']} XP. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥–æ–π /stats",
        "—Å–ø–∞—Å–∏–±–æ": "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!",
        "–ø–æ–∫–∞": "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–∏ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞—á!"
    }
    
    user_text_lower = user_text.lower()
    for key, response in responses.items():
        if key in user_text_lower:
            await update.message.reply_text(response)
            return
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    await update.message.reply_text(
        "ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "‚Ä¢ /help - –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ /ai_chat - –≤–∫–ª—é—á–∏—Ç—å AI —Ä–µ–∂–∏–º\n"
        "‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )

# ===================== CALLBACK HANDLERS (–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫) =====================

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "show_tasks":
        await tasks_command(update, context)
    elif data == "show_stats":
        await stats_command(update, context)
    elif data == "show_achievements":
        achievements_list = [ACHIEVEMENTS[i] for i in user_achievements.get(user_id, [])]
        text = "üèÜ **–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n\n"
        if achievements_list:
            for ach in achievements_list:
                text += f"{ach['emoji']} **{ach['name']}**\n"
                text += f"   {ach['desc']}\n"
                text += f"   üéÅ –ù–∞–≥—Ä–∞–¥–∞: {ach['xp_reward']} XP\n\n"
        else:
            text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n"
            text += "–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!"
        await query.edit_message_text(text, parse_mode="Markdown")
    elif data == "show_ai_help":
        ai_status = "–ø–æ–¥–∫–ª—é—á–µ–Ω" if OPENAI_API_KEY else "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ OPENAI_API_KEY)"
        text = (
            f"ü§ñ **AI –ü–æ–º–æ—â—å** (—Å—Ç–∞—Ç—É—Å: {ai_status})\n\n"
            f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ AI –∫–æ–º–∞–Ω–¥—ã:**\n"
            f"‚Ä¢ `/ai_chat` - –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è\n"
            f"‚Ä¢ `/motivate [—Ç–µ–∫—Å—Ç]` - –ø–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é\n"
            f"‚Ä¢ `/ai_coach [–≤–æ–ø—Ä–æ—Å]` - —Å–æ–≤–µ—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            f"‚Ä¢ `/psy [–ø—Ä–æ–±–ª–µ–º–∞]` - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
            f"‚Ä¢ `/suggest_tasks [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]` - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–¥–∞—á–∏\n\n"
            f"üí° –í AI-—á–∞—Ç —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã!"
        )
        await query.edit_message_text(text, parse_mode="Markdown")
    elif data == "show_settings":
        await settings_command(update, context)
    elif data == "show_weekly_goals":
        await weekly_goals_command(update, context)
    elif data.startswith("complete_task_"):
        task_index = int(data.split("_")[2])
        if task_index < len(users_data[user_id]["tasks"]):
            task = users_data[user_id]["tasks"][task_index]
            task["completed"] = True
            users_data[user_id]["completed_today"] += 1
            users_data[user_id]["total_tasks_completed"] += 1
            global_stats["tasks_completed"] += 1
            
            xp_reward = 25
            # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            if task.get("priority") == "high":
                xp_reward += 10
            elif task.get("priority") == "low":
                xp_reward += 5
            
            xp_msg = add_xp(user_id, xp_reward)
            achievements = check_achievements(user_id)
            
            save_user_data()
            
            response = f"‚úÖ **–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!**\n"
            response += f"üìù {task['name']}\n"
            response += f"{xp_msg}"
            
            if achievements:
                response += f"\nüèÜ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {', '.join(achievements)}"
            
            await query.edit_message_text(response, parse_mode="Markdown")
    elif data.startswith("complete_goal_"):
        goal_index = int(data.split("_")[2])
        if goal_index < len(users_data[user_id]["weekly_goals"]):
            goal = users_data[user_id]["weekly_goals"][goal_index]
            goal["completed"] = True
            
            xp_msg = add_xp(user_id, 50)
            achievements = check_achievements(user_id)
            save_user_data()
            
            response = f"üéØ **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ü–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!**\n"
            response += f"üìù {goal['name']}\n"
            response += f"{xp_msg}"
            
            if achievements:
                response += f"\nüèÜ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {', '.join(achievements)}"
            
            await query.edit_message_text(response, parse_mode="Markdown")
    elif data == "confirm_reset":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task in users_data[user_id]["tasks"]:
            task["completed"] = False
            for subtask in task.get("subtasks", []):
                subtask["completed"] = False
        
        users_data[user_id]["completed_today"] = 0
        save_user_data()
        
        await query.edit_message_text(
            "üîÑ **–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–Ω—è —Å–±—Ä–æ—à–µ–Ω!**\n\n"
            "–í—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ.\n"
            "–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å!"
        )
    # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏...

# ===================== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====================

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ DailyCheck Bot v4.0 - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø...")
    logger.info(f"Python: {sys.version}")
    logger.info(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {sys.platform}")
    logger.info(f"–ü–æ—Ä—Ç: {PORT}")
    
    try:
        # –®–ê–ì 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        load_user_data()
        
        # –®–ê–ì 2: –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        logger.info("üåê –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞...")
        http_thread = start_health_server()
        
        # –®–ê–ì 3: –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(3)
        logger.info("‚è≥ HTTP —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è")
        
        # –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        
        # –®–ê–ì 5: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –í–°–ï–• –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        logger.info("üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("ping", ping_command))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ (7 –∫–æ–º–∞–Ω–¥)
        app.add_handler(CommandHandler("tasks", tasks_command))
        app.add_handler(CommandHandler("settasks", settasks_command))
        app.add_handler(CommandHandler("addtask", addtask_command))
        app.add_handler(CommandHandler("addsub", addsub_command))
        app.add_handler(CommandHandler("edit", edit_command))
        app.add_handler(CommandHandler("reset", reset_command))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (2 –∫–æ–º–∞–Ω–¥—ã)
        app.add_handler(CommandHandler("stats", stats_command))
        app.add_handler(CommandHandler("analytics", analytics_command))
        
        # AI —Ñ—É–Ω–∫—Ü–∏–∏ (5 –∫–æ–º–∞–Ω–¥)
        app.add_handler(CommandHandler("ai_chat", ai_chat_command))
        app.add_handler(CommandHandler("motivate", motivate_command))
        app.add_handler(CommandHandler("ai_coach", ai_coach_command))
        app.add_handler(CommandHandler("psy", psy_command))
        app.add_handler(CommandHandler("suggest_tasks", suggest_tasks_command))
        
        # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (3 –∫–æ–º–∞–Ω–¥—ã)
        app.add_handler(CommandHandler("friends", friends_command))
        app.add_handler(CommandHandler("add_friend", add_friend_command))
        app.add_handler(CommandHandler("myid", myid_command))
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ç–∞–π–º–µ—Ä—ã (2 –∫–æ–º–∞–Ω–¥—ã)
        app.add_handler(CommandHandler("remind", remind_command))
        app.add_handler(CommandHandler("timer", timer_command))
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏ (2 –∫–æ–º–∞–Ω–¥—ã)
        app.add_handler(CommandHandler("weekly_goals", weekly_goals_command))
        app.add_handler(CommandHandler("set_weekly", set_weekly_command))
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (2 –∫–æ–º–∞–Ω–¥—ã)
        app.add_handler(CommandHandler("theme", theme_command))
        app.add_handler(CommandHandler("settings", settings_command))
        
        # –≠–∫—Å–ø–æ—Ä—Ç –∏ —É—Ç–∏–ª–∏—Ç—ã (3 –∫–æ–º–∞–Ω–¥—ã)
        app.add_handler(CommandHandler("export", export_command))
        app.add_handler(CommandHandler("health", health_command))
        app.add_handler(CommandHandler("test", test_command))
        
        # –†–µ–∂–∏–º "Dry" (2 –∫–æ–º–∞–Ω–¥—ã)
        app.add_handler(CommandHandler("dryon", dryon_command))
        app.add_handler(CommandHandler("dryoff", dryoff_command))
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (2 –∫–æ–º–∞–Ω–¥—ã)
        app.add_handler(CommandHandler("broadcast", broadcast_command))
        app.add_handler(CommandHandler("stats_global", stats_global_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫
        app.add_handler(CallbackQueryHandler(button_callback))
        app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
        
        logger.info("‚úÖ –í–°–ï 32 –ö–û–ú–ê–ù–î–´ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        logger.info("üì± –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        logger.info("üéØ –ó–∞–ø—É—Å–∫ polling...")
        
        # –®–ê–ì 6: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        app.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            save_user_data()
            logger.info("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π")
        except:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        logger.info("üîÑ HTTP —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å...")
        try:
            while True:
                time.sleep(60)
                logger.info("üíì –ü—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω (HTTP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç)")
        except KeyboardInterrupt:
            logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ KeyboardInterrupt")
        try:
            save_user_data()
            logger.info("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")
        except:
            pass
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        try:
            save_user_data()
        except:
            pass
        logger.info("üîÑ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è HTTP —Å–µ—Ä–≤–µ—Ä–∞...")
        try:
            while True:
                time.sleep(300)
                logger.info("üíì –ü—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω")
        except:
            pass
