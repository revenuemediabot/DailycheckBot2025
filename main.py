#!/usr/bin/env python3

import os
import sys
import logging
import threading
import time
import json
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Any
import hashlib
import uuid

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ event loop –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
try:
    import nest_asyncio
    nest_asyncio.apply()
    print("‚úÖ nest_asyncio –ø—Ä–∏–º–µ–Ω–µ–Ω")
except ImportError:
    print("‚ö†Ô∏è nest_asyncio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except:
    pass

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0"))
PORT = int(os.getenv("PORT", "10000"))

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    sys.exit(1)

logger.info(f"‚úÖ BOT_TOKEN: {BOT_TOKEN[:10]}...")
if OPENAI_API_KEY:
    logger.info(f"‚úÖ OpenAI: {OPENAI_API_KEY[:10]}...")

# ===================== –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• =====================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_data = {}
user_achievements = {}
user_themes = {}
user_ai_chat = {}
user_friends = {}
global_stats = {"total_users": 0, "commands_executed": 0, "tasks_completed": 0}

# –£—Ä–æ–≤–Ω–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
LEVELS = [
    "üå± –ù–æ–≤–∏—á–æ–∫", "üåø –†–æ—Å—Ç–æ–∫", "üåæ –°–∞–∂–µ–Ω–µ—Ü", "üå≥ –î–µ—Ä–µ–≤–æ", "üçÄ –£–¥–∞—á–ª–∏–≤—ã–π",
    "üí™ –°–∏–ª—å–Ω—ã–π", "üß† –£–º–Ω—ã–π", "üéØ –¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π", "‚ö° –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π", "üî• –û–≥–Ω–µ–Ω–Ω—ã–π",
    "üíé –ê–ª–º–∞–∑–Ω—ã–π", "üëë –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π", "üåü –ó–≤–µ–∑–¥–Ω—ã–π", "üöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π", "üèÜ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "üëπ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"
]

ACHIEVEMENTS = [
    {"name": "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", "desc": "–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É", "emoji": "üë∂"},
    {"name": "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å", "desc": "–í—ã–ø–æ–ª–Ω–∏—Ç—å 5 –∑–∞–¥–∞—á –∑–∞ –¥–µ–Ω—å", "emoji": "üí™"},
    {"name": "–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü", "desc": "7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏", "emoji": "üèÉ"},
    {"name": "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", "desc": "–°–æ–∑–¥–∞—Ç—å 20 –∑–∞–¥–∞—á", "emoji": "üìã"},
    {"name": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π", "desc": "–î–æ–±–∞–≤–∏—Ç—å 3 –¥—Ä—É–∑–µ–π", "emoji": "üë•"},
    {"name": "AI –§–∞–Ω–∞—Ç", "desc": "–°–¥–µ–ª–∞—Ç—å 50 AI –∑–∞–ø—Ä–æ—Å–æ–≤", "emoji": "ü§ñ"},
    {"name": "–ú–∞—Å—Ç–µ—Ä –≤—Ä–µ–º–µ–Ω–∏", "desc": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–π–º–µ—Ä 10 —Ä–∞–∑", "emoji": "‚è∞"},
    {"name": "–ê–Ω–∞–ª–∏—Ç–∏–∫", "desc": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 15 —Ä–∞–∑", "emoji": "üìä"},
    {"name": "–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π", "desc": "–í—ã–ø–æ–ª–Ω–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Ü–µ–ª—å", "emoji": "üéØ"},
    {"name": "–õ–µ–≥–µ–Ω–¥–∞", "desc": "–î–æ—Å—Ç–∏—á—å 16 —É—Ä–æ–≤–Ω—è", "emoji": "üëë"}
]

CATEGORIES = ["üè¢ –†–∞–±–æ—Ç–∞", "üí™ –ó–¥–æ—Ä–æ–≤—å–µ", "üìö –û–±—É—á–µ–Ω–∏–µ", "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –õ–∏—á–Ω–æ–µ", "üí∞ –§–∏–Ω–∞–Ω—Å—ã"]
PRIORITIES = ["üü¢ –ù–∏–∑–∫–∏–π", "üü° –°—Ä–µ–¥–Ω–∏–π", "üî¥ –í—ã—Å–æ–∫–∏–π"]
THEMES = ["üåô –¢–µ–º–Ω–∞—è", "‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è", "üåà –†–∞–¥—É–∂–Ω–∞—è", "üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω–∞—è", "üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è"]

# ===================== HTTP –°–ï–†–í–ï–† =====================

def start_health_server():
    import http.server
    import socketserver
    
    class HealthHandler(http.server.SimpleHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            data = {
                "status": "ok",
                "service": "dailycheck-bot",
                "version": "4.0",
                "users": global_stats["total_users"],
                "commands": global_stats["commands_executed"],
                "uptime": time.time(),
                "message": "Bot is running with full features!"
            }
            self.wfile.write(json.dumps(data).encode())
        
        def log_message(self, format, *args):
            if '/health' in format or self.path == '/':
                logger.info(f"Health check: {self.client_address[0]}")
    
    def run_server():
        try:
            with socketserver.TCPServer(("0.0.0.0", PORT), HealthHandler) as httpd:
                logger.info(f"‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –ó–ê–ü–£–©–ï–ù –Ω–∞ 0.0.0.0:{PORT}")
                httpd.serve_forever()
        except Exception as e:
            logger.error(f"‚ùå HTTP server –æ—à–∏–±–∫–∞: {e}")
    
    server_thread = threading.Thread(target=run_server, daemon=True)
    server_thread.start()
    time.sleep(2)
    logger.info(f"üåê Health check –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://0.0.0.0:{PORT}")
    return server_thread

# ===================== –£–¢–ò–õ–ò–¢–´ =====================

def init_user(user_id: int) -> None:
    if user_id not in users_data:
        users_data[user_id] = {
            "tasks": [],
            "completed_today": 0,
            "streak": 0,
            "last_activity": datetime.now().strftime("%Y-%m-%d"),
            "xp": 0,
            "level": 0,
            "weekly_goals": [],
            "reminders": [],
            "timers": [],
            "dry_mode": False,
            "dry_days": 0,
            "created_at": datetime.now().isoformat()
        }
        user_achievements[user_id] = []
        user_themes[user_id] = "üåô –¢–µ–º–Ω–∞—è"
        user_ai_chat[user_id] = False
        user_friends[user_id] = []
        global_stats["total_users"] += 1

def get_user_level(xp: int) -> tuple:
    level = min(xp // 100, len(LEVELS) - 1)
    return level, LEVELS[level]

def add_xp(user_id: int, amount: int) -> str:
    old_level = get_user_level(users_data[user_id]["xp"])[0]
    users_data[user_id]["xp"] += amount
    new_level = get_user_level(users_data[user_id]["xp"])[0]
    
    if new_level > old_level:
        return f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {LEVELS[new_level]}"
    return f"+{amount} XP"

def check_achievements(user_id: int) -> List[str]:
    user = users_data[user_id]
    new_achievements = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    checks = [
        (len(user["tasks"]) >= 1, 0),
        (user["completed_today"] >= 5, 1),
        (user["streak"] >= 7, 2),
        (len(user["tasks"]) >= 20, 3),
        (len(user_friends[user_id]) >= 3, 4),
        (user["xp"] >= 5000, 5),
        (True, 6),  # –¢–∞–π–º–µ—Ä—ã (—É–ø—Ä–æ—â–µ–Ω–æ)
        (True, 7),  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–æ)
        (len(user["weekly_goals"]) > 0, 8),
        (get_user_level(user["xp"])[0] >= 15, 9)
    ]
    
    for condition, achievement_id in checks:
        if condition and achievement_id not in user_achievements[user_id]:
            user_achievements[user_id].append(achievement_id)
            new_achievements.append(ACHIEVEMENTS[achievement_id]["emoji"] + " " + ACHIEVEMENTS[achievement_id]["name"])
    
    return new_achievements

def log_command(user_id: int, command: str):
    global_stats["commands_executed"] += 1
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ {command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

# ===================== TELEGRAM –ò–ú–ü–û–†–¢–´ =====================

try:
    from telegram.ext import Application, ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import ContextTypes
    logger.info("‚úÖ Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Telegram: {e}")
    sys.exit(1)

# ===================== –ö–û–ú–ê–ù–î–´ =====================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    init_user(user_id)
    log_command(user_id, "/start")
    
    keyboard = [
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="tasks")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"), 
         InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")],
        [InlineKeyboardButton("ü§ñ AI –ü–æ–º–æ—â—å", callback_data="ai_help"),
         InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    level_info = get_user_level(users_data[user_id]["xp"])
    text = (
        f"üöÄ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        f"–Ø DailyCheck Bot v4.0 - –≤–∞—à AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n\n"
        f"üìä –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level_info[1]}\n"
        f"‚ö° XP: {users_data[user_id]['xp']}\n"
        f"üî• –°—Ç—Ä–∏–∫: {users_data[user_id]['streak']} –¥–Ω–µ–π\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await update.message.reply_text(text, reply_markup=reply_markup)

# ===================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ê–ú–ò =====================

async def tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/tasks")
    
    tasks = users_data[user_id]["tasks"]
    if not tasks:
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task")],
            [InlineKeyboardButton("üìù –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞", callback_data="set_tasks")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!",
            reply_markup=reply_markup
        )
        return
    
    text = "üìã **–í–∞—à–∏ –∑–∞–¥–∞—á–∏:**\n\n"
    keyboard = []
    
    for i, task in enumerate(tasks):
        status = "‚úÖ" if task.get("completed", False) else "‚≠ï"
        priority = task.get("priority", "üü° –°—Ä–µ–¥–Ω–∏–π")
        category = task.get("category", "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –õ–∏—á–Ω–æ–µ")
        
        text += f"{status} {task['name']}\n"
        text += f"   {priority} | {category}\n"
        if task.get("estimate"):
            text += f"   ‚è±Ô∏è {task['estimate']} –º–∏–Ω\n"
        text += "\n"
        
        if not task.get("completed", False):
            keyboard.append([InlineKeyboardButton(f"‚úÖ {task['name'][:20]}...", callback_data=f"complete_{i}")])
    
    keyboard.extend([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_task"),
         InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_tasks")],
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_tasks")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

async def settasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/settasks")
    
    if not context.args:
        await update.message.reply_text(
            "üìù **–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á**\n\n"
            "–§–æ—Ä–º–∞—Ç: `/settasks –∑–∞–¥–∞—á–∞1; –∑–∞–¥–∞—á–∞2; –∑–∞–¥–∞—á–∞3`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "`/settasks –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É; –°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É; –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É`"
        )
        return
    
    tasks_text = " ".join(context.args)
    task_names = [task.strip() for task in tasks_text.split(";") if task.strip()]
    
    users_data[user_id]["tasks"] = []
    for name in task_names:
        task = {
            "name": name,
            "completed": False,
            "created_at": datetime.now().isoformat(),
            "category": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –õ–∏—á–Ω–æ–µ",
            "priority": "üü° –°—Ä–µ–¥–Ω–∏–π"
        }
        users_data[user_id]["tasks"].append(task)
    
    xp_msg = add_xp(user_id, len(task_names) * 5)
    achievements = check_achievements(user_id)
    
    response = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(task_names)} –∑–∞–¥–∞—á!\n{xp_msg}"
    if achievements:
        response += f"\nüèÜ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {', '.join(achievements)}"
    
    await update.message.reply_text(response)

async def addtask_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/addtask")
    
    if not context.args:
        await update.message.reply_text(
            "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏**\n\n"
            "–§–æ—Ä–º–∞—Ç: `/addtask –Ω–∞–∑–≤–∞–Ω–∏–µ [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç] [–≤—Ä–µ–º—è]`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "`/addtask –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç —Ä–∞–±–æ—Ç–∞ –≤—ã—Å–æ–∫–∏–π 60`\n\n"
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: —Ä–∞–±–æ—Ç–∞, –∑–¥–æ—Ä–æ–≤—å–µ, –æ–±—É—á–µ–Ω–∏–µ, –ª–∏—á–Ω–æ–µ, —Ñ–∏–Ω–∞–Ω—Å—ã\n"
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: –Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π"
        )
        return
    
    args = context.args
    name = args[0]
    category = "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –õ–∏—á–Ω–æ–µ"
    priority = "üü° –°—Ä–µ–¥–Ω–∏–π"
    estimate = None
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if len(args) > 1:
        for arg in args[1:]:
            if arg.lower() in ["—Ä–∞–±–æ—Ç–∞", "work"]:
                category = "üè¢ –†–∞–±–æ—Ç–∞"
            elif arg.lower() in ["–∑–¥–æ—Ä–æ–≤—å–µ", "health"]:
                category = "üí™ –ó–¥–æ—Ä–æ–≤—å–µ"
            elif arg.lower() in ["–æ–±—É—á–µ–Ω–∏–µ", "study"]:
                category = "üìö –û–±—É—á–µ–Ω–∏–µ"
            elif arg.lower() in ["—Ñ–∏–Ω–∞–Ω—Å—ã", "finance"]:
                category = "üí∞ –§–∏–Ω–∞–Ω—Å—ã"
            elif arg.lower() in ["–Ω–∏–∑–∫–∏–π", "low"]:
                priority = "üü¢ –ù–∏–∑–∫–∏–π"
            elif arg.lower() in ["–≤—ã—Å–æ–∫–∏–π", "high"]:
                priority = "üî¥ –í—ã—Å–æ–∫–∏–π"
            elif arg.isdigit():
                estimate = int(arg)
    
    task = {
        "name": name,
        "completed": False,
        "created_at": datetime.now().isoformat(),
        "category": category,
        "priority": priority,
        "estimate": estimate
    }
    
    users_data[user_id]["tasks"].append(task)
    xp_msg = add_xp(user_id, 10)
    achievements = check_achievements(user_id)
    
    response = f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n{xp_msg}"
    if achievements:
        response += f"\nüèÜ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {', '.join(achievements)}"
    
    await update.message.reply_text(response)

# ===================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====================

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/stats")
    
    user = users_data[user_id]
    level_info = get_user_level(user["xp"])
    
    total_tasks = len(user["tasks"])
    completed_tasks = sum(1 for task in user["tasks"] if task.get("completed", False))
    completion_rate = (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_stats = {}
    for task in user["tasks"]:
        cat = task.get("category", "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –õ–∏—á–Ω–æ–µ")
        if cat not in category_stats:
            category_stats[cat] = {"total": 0, "completed": 0}
        category_stats[cat]["total"] += 1
        if task.get("completed", False):
            category_stats[cat]["completed"] += 1
    
    text = f"üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
    text += f"üë§ –£—Ä–æ–≤–µ–Ω—å: {level_info[1]}\n"
    text += f"‚ö° XP: {user['xp']}/{(level_info[0] + 1) * 100}\n"
    text += f"üî• –°—Ç—Ä–∏–∫: {user['streak']} –¥–Ω–µ–π\n"
    text += f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
    text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks}\n"
    text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completion_rate:.1f}%\n\n"
    
    text += "üìä **–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**\n"
    for cat, stats in category_stats.items():
        rate = (stats["completed"] / stats["total"] * 100) if stats["total"] > 0 else 0
        text += f"{cat}: {stats['completed']}/{stats['total']} ({rate:.0f}%)\n"
    
    text += f"\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(user_achievements[user_id])}/{len(ACHIEVEMENTS)}\n"
    text += f"üë• –î—Ä—É–∑–µ–π: {len(user_friends[user_id])}\n"
    
    await update.message.reply_text(text, parse_mode="Markdown")

async def analytics_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/analytics")
    
    user = users_data[user_id]
    
    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    text = f"üìà **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**\n\n"
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    productive_hours = ["9:00-12:00", "14:00-17:00", "19:00-21:00"]
    text += f"‚è∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã:\n"
    for hour in productive_hours:
        text += f"   ‚Ä¢ {hour}\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    total_tasks = len(user["tasks"])
    if total_tasks < 5:
        text += f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∑–∞–¥–∞—á –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
    elif user["streak"] < 3:
        text += f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
    else:
        text += f"\nüéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n"
    
    # –ü—Ä–æ–≥–Ω–æ–∑
    if user["xp"] > 0:
        days_to_next_level = ((get_user_level(user["xp"])[0] + 1) * 100 - user["xp"]) / 20
        text += f"\nüîÆ –ü—Ä–æ–≥–Ω–æ–∑: –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è ~{days_to_next_level:.0f} –¥–Ω–µ–π\n"
    
    await update.message.reply_text(text, parse_mode="Markdown")

# ===================== AI –§–£–ù–ö–¶–ò–ò =====================

async def generate_ai_response(text: str, user_id: int = None, ai_type: str = "general") -> str:
    if not OPENAI_API_KEY:
        fallback_responses = {
            "motivate": "üî• –í—ã –º–æ–∂–µ—Ç–µ –≤—Å—ë! –ö–∞–∂–¥—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ –±–æ–ª—å—à–æ–π —Ü–µ–ª–∏!",
            "coach": "üìã –°–æ–≤–µ—Ç: –†–∞–∑–±–µ–π—Ç–µ –±–æ–ª—å—à—É—é –∑–∞–¥–∞—á—É –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —á–∞—Å—Ç–∏ –∏ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–π.",
            "psy": "üß† –ü–æ–º–Ω–∏—Ç–µ: –Ω–µ—É–¥–∞—á–∏ - —ç—Ç–æ –æ–ø—ã—Ç. –í–∞–∂–Ω–æ –Ω–µ –ø–∞–¥–µ–Ω–∏–µ, –∞ —É–º–µ–Ω–∏–µ –ø–æ–¥–Ω—è—Ç—å—Å—è.",
            "general": f"üí° –Ø –∑–∞–ø–æ–º–Ω–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å: '{text}'. AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!"
        }
        return fallback_responses.get(ai_type, fallback_responses["general"])
    
    try:
        from openai import AsyncOpenAI
        client = AsyncOpenAI(api_key=OPENAI_API_KEY)
        
        system_prompts = {
            "motivate": "–¢—ã –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ—É—á. –í–¥–æ—Ö–Ω–æ–≤–ª—è–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            "coach": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á.",
            "psy": "–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü–æ–º–æ–≥–∞–π —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –±–∞–ª–∞–Ω—Å.",
            "general": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–ª–µ–∑–Ω–æ."
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context = ""
        if user_id and user_id in users_data:
            user = users_data[user_id]
            context = f" –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —É—Ä–æ–≤–µ–Ω—å {get_user_level(user['xp'])[1]}, {len(user['tasks'])} –∑–∞–¥–∞—á, —Å—Ç—Ä–∏–∫ {user['streak']} –¥–Ω–µ–π."
        
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompts.get(ai_type, system_prompts["general"]) + context},
                {"role": "user", "content": text}
            ],
            max_tokens=400,
            temperature=0.7
        )
        
        return f"ü§ñ {response.choices[0].message.content.strip()}"
        
    except Exception as e:
        logger.error(f"AI –æ—à–∏–±–∫–∞: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"

async def ai_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/ai_chat")
    
    user_ai_chat[user_id] = not user_ai_chat[user_id]
    status = "–≤–∫–ª—é—á–µ–Ω" if user_ai_chat[user_id] else "–≤—ã–∫–ª—é—á–µ–Ω"
    
    text = f"ü§ñ AI-—á–∞—Ç —Ä–µ–∂–∏–º {status}!\n\n"
    if user_ai_chat[user_id]:
        text += "–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!"
    else:
        text += "AI-—á–∞—Ç –≤—ã–∫–ª—é—á–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."
    
    await update.message.reply_text(text)

async def motivate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/motivate")
    
    user_text = " ".join(context.args) if context.args else "–º–æ—Ç–∏–≤–∏—Ä—É–π –º–µ–Ω—è"
    response = await generate_ai_response(user_text, user_id, "motivate")
    await update.message.reply_text(response)

async def ai_coach_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/ai_coach")
    
    user_text = " ".join(context.args) if context.args else "–¥–∞–π —Å–æ–≤–µ—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    response = await generate_ai_response(user_text, user_id, "coach")
    await update.message.reply_text(response)

async def psy_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/psy")
    
    user_text = " ".join(context.args) if context.args else "–ø–æ–º–æ–≥–∏ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º"
    response = await generate_ai_response(user_text, user_id, "psy")
    await update.message.reply_text(response)

async def suggest_tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/suggest_tasks")
    
    category = " ".join(context.args) if context.args else "–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    prompt = f"–ü—Ä–µ–¥–ª–æ–∂–∏ 5 –ø–æ–ª–µ–∑–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'"
    response = await generate_ai_response(prompt, user_id, "coach")
    await update.message.reply_text(response)

# ===================== –°–û–¶–ò–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================

async def friends_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/friends")
    
    friends = user_friends[user_id]
    if not friends:
        text = "üë• –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_friend <ID> —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞!"
    else:
        text = "üë• **–í–∞—à–∏ –¥—Ä—É–∑—å—è:**\n\n"
        for friend_id in friends:
            if friend_id in users_data:
                level = get_user_level(users_data[friend_id]["xp"])[1]
                text += f"üë§ ID {friend_id}: {level}\n"
        text += f"\nüìä –°—Ä–∞–≤–Ω–∏—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é /compare <ID>"
    
    await update.message.reply_text(text, parse_mode="Markdown")

async def add_friend_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/add_friend")
    
    if not context.args:
        await update.message.reply_text(
            "üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞\n\n"
            "–§–æ—Ä–º–∞—Ç: `/add_friend <ID_–¥—Ä—É–≥–∞>`\n"
            "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID: /myid"
        )
        return
    
    try:
        friend_id = int(context.args[0])
        if friend_id == user_id:
            await update.message.reply_text("üòÖ –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è!")
            return
        
        if friend_id not in users_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
            return
        
        if friend_id in user_friends[user_id]:
            await update.message.reply_text("üë• –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –≤–∞—à–∏—Ö –¥—Ä—É–∑—å—è—Ö!")
            return
        
        user_friends[user_id].append(friend_id)
        user_friends[friend_id].append(user_id)  # –í–∑–∞–∏–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        
        achievements = check_achievements(user_id)
        response = f"‚úÖ –î—Ä—É–≥ –¥–æ–±–∞–≤–ª–µ–Ω!\nüéâ +20 XP"
        add_xp(user_id, 20)
        
        if achievements:
            response += f"\nüèÜ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {', '.join(achievements)}"
        
        await update.message.reply_text(response)
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞.")

async def myid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    log_command(user_id, "/myid")
    
    await update.message.reply_text(
        f"üÜî –í–∞—à ID: `{user_id}`\n\n"
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º ID —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å!",
        parse_mode="Markdown"
    )

# ===================== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –ò –¢–ê–ô–ú–ï–†–´ =====================

async def remind_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/remind")
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚è∞ **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**\n\n"
            "–§–æ—Ä–º–∞—Ç: `/remind <–≤—Ä–µ–º—è_–≤_–º–∏–Ω—É—Ç–∞—Ö> <—Ç–µ–∫—Å—Ç>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/remind 30 –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤`"
        )
        return
    
    try:
        minutes = int(context.args[0])
        text = " ".join(context.args[1:])
        
        # –ó–¥–µ—Å—å –±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å APScheduler
        await update.message.reply_text(
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
            f"üìù –¢–µ–∫—Å—Ç: {text}\n"
            f"‚è±Ô∏è –ß–µ—Ä–µ–∑: {minutes} –º–∏–Ω—É—Ç"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –º–∏–Ω—É—Ç–∞—Ö.")

async def timer_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/timer")
    
    if not context.args:
        await update.message.reply_text(
            "‚è≤Ô∏è **–¢–∞–π–º–µ—Ä**\n\n"
            "–§–æ—Ä–º–∞—Ç: `/timer <–º–∏–Ω—É—Ç—ã>`\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `/timer 25` - –ø–æ–º–æ–¥–æ—Ä–æ\n"
            "‚Ä¢ `/timer 5` - –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤\n"
            "‚Ä¢ `/timer 15` - –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤"
        )
        return
    
    try:
        minutes = int(context.args[0])
        add_xp(user_id, 5)
        
        await update.message.reply_text(
            f"‚è≤Ô∏è –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç!\n"
            f"‚ö° +5 XP –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –º–∏–Ω—É—Ç–∞—Ö.")

# ===================== –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ï –¶–ï–õ–ò =====================

async def weekly_goals_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/weekly_goals")
    
    goals = users_data[user_id]["weekly_goals"]
    if not goals:
        text = "üéØ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_weekly —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏!"
    else:
        text = "üéØ **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏:**\n\n"
        for i, goal in enumerate(goals, 1):
            status = "‚úÖ" if goal.get("completed", False) else "‚≠ï"
            text += f"{status} {i}. {goal['name']}\n"
    
    await update.message.reply_text(text, parse_mode="Markdown")

async def set_weekly_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/set_weekly")
    
    if not context.args:
        await update.message.reply_text(
            "üéØ **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏**\n\n"
            "–§–æ—Ä–º–∞—Ç: `/set_weekly —Ü–µ–ª—å1; —Ü–µ–ª—å2; —Ü–µ–ª—å3`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "`/set_weekly –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É; –°–¥–µ–ª–∞—Ç—å 5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫; –ò–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É`"
        )
        return
    
    goals_text = " ".join(context.args)
    goal_names = [goal.strip() for goal in goals_text.split(";") if goal.strip()]
    
    users_data[user_id]["weekly_goals"] = []
    for name in goal_names:
        goal = {
            "name": name,
            "completed": False,
            "created_at": datetime.now().isoformat()
        }
        users_data[user_id]["weekly_goals"].append(goal)
    
    xp_msg = add_xp(user_id, len(goal_names) * 10)
    achievements = check_achievements(user_id)
    
    response = f"üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(goal_names)} –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!\n{xp_msg}"
    if achievements:
        response += f"\nüèÜ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {', '.join(achievements)}"
    
    await update.message.reply_text(response)

# ===================== –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø =====================

async def theme_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/theme")
    
    if not context.args:
        current_theme = user_themes[user_id]
        text = f"üé® **–¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è**\n\n"
        text += f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {current_theme}\n\n"
        text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:\n"
        for i, theme in enumerate(THEMES, 1):
            text += f"{i}. {theme}\n"
        text += f"\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/theme <–Ω–æ–º–µ—Ä>`"
        await update.message.reply_text(text, parse_mode="Markdown")
        return
    
    try:
        theme_num = int(context.args[0])
        if 1 <= theme_num <= len(THEMES):
            user_themes[user_id] = THEMES[theme_num - 1]
            await update.message.reply_text(
                f"üé® –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {THEMES[theme_num - 1]}\n"
                f"‚ö° +5 XP –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é"
            )
            add_xp(user_id, 5)
        else:
            await update.message.reply_text(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(THEMES)}")
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–º—ã")

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/settings")
    
    user = users_data[user_id]
    theme = user_themes[user_id]
    ai_chat = user_ai_chat[user_id]
    
    text = f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
    text += f"üé® –¢–µ–º–∞: {theme}\n"
    text += f"ü§ñ AI-—á–∞—Ç: {'–≤–∫–ª—é—á–µ–Ω' if ai_chat else '–≤—ã–∫–ª—é—á–µ–Ω'}\n"
    text += f"üö≠ Dry —Ä–µ–∂–∏–º: {'–≤–∫–ª—é—á–µ–Ω' if user['dry_mode'] else '–≤—ã–∫–ª—é—á–µ–Ω'}\n"
    text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['created_at'][:10]}\n\n"
    text += "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
    text += "‚Ä¢ /theme - —Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É\n"
    text += "‚Ä¢ /ai_chat - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å AI-—á–∞—Ç\n"
    text += "‚Ä¢ /dryon –∏–ª–∏ /dryoff - dry —Ä–µ–∂–∏–º"
    
    await update.message.reply_text(text, parse_mode="Markdown")

# ===================== –≠–ö–°–ü–û–†–¢ –ò –£–¢–ò–õ–ò–¢–´ =====================

async def export_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/export")
    
    user_data = {
        "user_id": user_id,
        "tasks": users_data[user_id]["tasks"],
        "stats": {
            "xp": users_data[user_id]["xp"],
            "level": get_user_level(users_data[user_id]["xp"])[1],
            "streak": users_data[user_id]["streak"],
            "completed_today": users_data[user_id]["completed_today"]
        },
        "achievements": [ACHIEVEMENTS[i]["name"] for i in user_achievements[user_id]],
        "weekly_goals": users_data[user_id]["weekly_goals"],
        "theme": user_themes[user_id],
        "friends_count": len(user_friends[user_id]),
        "export_date": datetime.now().isoformat()
    }
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—ã —Å–æ–∑–¥–∞–≤–∞–ª—Å—è —Ñ–∞–π–ª
    await update.message.reply_text(
        f"üì§ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö**\n\n"
        f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ —ç–∫—Å–ø–æ—Ä—Ç—É:\n\n"
        f"üìã –ó–∞–¥–∞—á: {len(user_data['tasks'])}\n"
        f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(user_data['achievements'])}\n"
        f"‚ö° XP: {user_data['stats']['xp']}\n\n"
        f"–§–æ—Ä–º–∞—Ç—ã: JSON, CSV\n"
        f"(–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω)",
        parse_mode="Markdown"
    )

async def health_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    log_command(user_id, "/health")
    
    await update.message.reply_text(
        f"üè• **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã**\n\n"
        f"‚úÖ –ë–æ—Ç: —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        f"ü§ñ AI: {'–ø–æ–¥–∫–ª—é—á–µ–Ω' if OPENAI_API_KEY else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {global_stats['total_users']}\n"
        f"üìä –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {global_stats['commands_executed']}\n"
        f"üîó HTTP —Å–µ—Ä–≤–µ—Ä: –ø–æ—Ä—Ç {PORT}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
    )

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    log_command(user_id, "/test")
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    test_tasks = [
        {"name": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 1", "completed": True, "category": "üè¢ –†–∞–±–æ—Ç–∞"},
        {"name": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 2", "completed": False, "category": "üí™ –ó–¥–æ—Ä–æ–≤—å–µ"},
        {"name": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 3", "completed": True, "category": "üìö –û–±—É—á–µ–Ω–∏–µ"}
    ]
    
    users_data[user_id]["tasks"].extend(test_tasks)
    add_xp(user_id, 100)
    users_data[user_id]["streak"] = 5
    
    await update.message.reply_text("üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")

# ===================== –†–ï–ñ–ò–ú "DRY" =====================

async def dryon_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/dryon")
    
    users_data[user_id]["dry_mode"] = True
    users_data[user_id]["dry_days"] = 0
    
    await update.message.reply_text(
        "üö≠ **–†–µ–∂–∏–º 'Dry' –≤–∫–ª—é—á–µ–Ω!**\n\n"
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–Ω–µ–π –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è –Ω–∞—á–∞—Ç–æ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dryoff –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞."
    )

async def dryoff_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    init_user(user_id)
    log_command(user_id, "/dryoff")
    
    if not users_data[user_id]["dry_mode"]:
        await update.message.reply_text("üö≠ –†–µ–∂–∏–º 'Dry' –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return
    
    days = users_data[user_id]["dry_days"]
    users_data[user_id]["dry_mode"] = False
    
    xp_reward = days * 10
    add_xp(user_id, xp_reward)
    
    await update.message.reply_text(
        f"üö≠ **–û—Ç—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
        f"–î–Ω–µ–π –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è: {days}\n"
        f"–ù–∞–≥—Ä–∞–¥–∞: {xp_reward} XP\n"
        f"üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
    )

# ===================== ADMIN –§–£–ù–ö–¶–ò–ò =====================

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    log_command(user_id, "/broadcast")
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    if not context.args:
        await update.message.reply_text("üì¢ –§–æ—Ä–º–∞—Ç: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    message = " ".join(context.args)
    sent_count = 0
    
    for target_user_id in users_data.keys():
        try:
            await context.bot.send_message(target_user_id, f"üì¢ {message}")
            sent_count += 1
        except:
            pass
    
    await update.message.reply_text(f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

async def stats_global_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    log_command(user_id, "/stats_global")
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    total_tasks = sum(len(user["tasks"]) for user in users_data.values())
    total_xp = sum(user["xp"] for user in users_data.values())
    active_users = len([u for u in users_data.values() if len(u["tasks"]) > 0])
    
    text = f"üìä **–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
    text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {global_stats['total_users']}\n"
    text += f"üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
    text += f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
    text += f"‚ö° –û–±—â–∏–π XP: {total_xp}\n"
    text += f"üìä –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {global_stats['commands_executed']}\n"
    text += f"ü§ñ AI –¥–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if OPENAI_API_KEY else '–ù–µ—Ç'}"
    
    await update.message.reply_text(text, parse_mode="Markdown")

# ===================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô =====================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_text = update.message.text
    init_user(user_id)
    
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_text[:50]}...")
    
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω AI-—á–∞—Ç —Ä–µ–∂–∏–º
    if user_ai_chat.get(user_id, False):
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        response = await generate_ai_response(user_text, user_id)
        await update.message.reply_text(response)
        return
    
    # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    responses = {
        "–ø—Ä–∏–≤–µ—Ç": "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        "–ø–æ–º–æ—â—å": "üÜò –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
        "–∫–∞–∫ –¥–µ–ª–∞": "üòä –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥–æ–π /stats"
    }
    
    user_text_lower = user_text.lower()
    for key, response in responses.items():
        if key in user_text_lower:
            await update.message.reply_text(response)
            return
    
    await update.message.reply_text(
        "ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ /ai_chat –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è AI —Ä–µ–∂–∏–º–∞!"
    )

# ===================== CALLBACK HANDLERS =====================

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "tasks":
        await tasks_command(update, context)
    elif data == "stats":
        await stats_command(update, context)
    elif data == "achievements":
        achievements_list = [ACHIEVEMENTS[i] for i in user_achievements.get(user_id, [])]
        text = "üèÜ **–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n\n"
        if achievements_list:
            for ach in achievements_list:
                text += f"{ach['emoji']} {ach['name']}\n   {ach['desc']}\n\n"
        else:
            text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!"
        await query.edit_message_text(text, parse_mode="Markdown")
    elif data == "ai_help":
        text = (
            "ü§ñ **AI –ü–æ–º–æ—â—å**\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ AI –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /ai_chat - –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ /motivate - –ø–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é\n"
            "‚Ä¢ /ai_coach - —Å–æ–≤–µ—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ /psy - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
            "‚Ä¢ /suggest_tasks - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–¥–∞—á–∏"
        )
        await query.edit_message_text(text, parse_mode="Markdown")
    elif data.startswith("complete_"):
        task_index = int(data.split("_")[1])
        if task_index < len(users_data[user_id]["tasks"]):
            users_data[user_id]["tasks"][task_index]["completed"] = True
            users_data[user_id]["completed_today"] += 1
            xp_msg = add_xp(user_id, 25)
            achievements = check_achievements(user_id)
            
            response = f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n{xp_msg}"
            if achievements:
                response += f"\nüèÜ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {', '.join(achievements)}"
            
            await query.edit_message_text(response)

# ===================== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====================

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ DailyCheck Bot v4.0 - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø...")
    logger.info(f"Python: {sys.version}")
    logger.info(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {sys.platform}")
    logger.info(f"–ü–æ—Ä—Ç: {PORT}")
    
    try:
        # –®–ê–ì 1: –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        logger.info("üåê –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞...")
        http_thread = start_health_server()
        
        # –®–ê–ì 2: –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(3)
        logger.info("‚è≥ HTTP —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è")
        
        # –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        
        # –®–ê–ì 4: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –í–°–ï–• –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("ping", ping_command))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
        app.add_handler(CommandHandler("tasks", tasks_command))
        app.add_handler(CommandHandler("settasks", settasks_command))
        app.add_handler(CommandHandler("addtask", addtask_command))
        app.add_handler(CommandHandler("edit", tasks_command))  # –£–ø—Ä–æ—â–µ–Ω–æ
        app.add_handler(CommandHandler("reset", tasks_command))  # –£–ø—Ä–æ—â–µ–Ω–æ
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        app.add_handler(CommandHandler("stats", stats_command))
        app.add_handler(CommandHandler("analytics", analytics_command))
        
        # AI —Ñ—É–Ω–∫—Ü–∏–∏
        app.add_handler(CommandHandler("ai_chat", ai_chat_command))
        app.add_handler(CommandHandler("motivate", motivate_command))
        app.add_handler(CommandHandler("ai_coach", ai_coach_command))
        app.add_handler(CommandHandler("psy", psy_command))
        app.add_handler(CommandHandler("suggest_tasks", suggest_tasks_command))
        
        # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        app.add_handler(CommandHandler("friends", friends_command))
        app.add_handler(CommandHandler("add_friend", add_friend_command))
        app.add_handler(CommandHandler("myid", myid_command))
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ç–∞–π–º–µ—Ä—ã
        app.add_handler(CommandHandler("remind", remind_command))
        app.add_handler(CommandHandler("timer", timer_command))
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏
        app.add_handler(CommandHandler("weekly_goals", weekly_goals_command))
        app.add_handler(CommandHandler("set_weekly", set_weekly_command))
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        app.add_handler(CommandHandler("theme", theme_command))
        app.add_handler(CommandHandler("settings", settings_command))
        
        # –≠–∫—Å–ø–æ—Ä—Ç –∏ —É—Ç–∏–ª–∏—Ç—ã
        app.add_handler(CommandHandler("export", export_command))
        app.add_handler(CommandHandler("health", health_command))
        app.add_handler(CommandHandler("test", test_command))
        
        # –†–µ–∂–∏–º "Dry"
        app.add_handler(CommandHandler("dryon", dryon_command))
        app.add_handler(CommandHandler("dryoff", dryoff_command))
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        app.add_handler(CommandHandler("broadcast", broadcast_command))
        app.add_handler(CommandHandler("stats_global", stats_global_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫
        app.add_handler(CallbackQueryHandler(button_callback))
        app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
        
        logger.info("‚úÖ –í–°–ï 30+ –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        logger.info("üì± –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        logger.info("üéØ –ó–∞–ø—É—Å–∫ polling...")
        
        # –®–ê–ì 5: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        app.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        
        # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        logger.info("üîÑ HTTP —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å...")
        try:
            while True:
                time.sleep(60)
                logger.info("üíì –ü—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω (HTTP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç)")
        except KeyboardInterrupt:
            logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ KeyboardInterrupt")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.info("üîÑ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è HTTP —Å–µ—Ä–≤–µ—Ä–∞...")
        try:
            while True:
                time.sleep(300)
                logger.info("üíì –ü—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω")
        except:
            pass
