#!/usr/bin/env python3

import os
import sys
import logging
import asyncio
import threading
import signal
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.getenv("PORT", "8080"))

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    sys.exit(1)

logger.info(f"‚úÖ BOT_TOKEN: {BOT_TOKEN[:10]}...")
if OPENAI_API_KEY:
    logger.info(f"ü§ñ OpenAI: {OPENAI_API_KEY[:10]}...")

# –ò–º–ø–æ—Ä—Ç—ã Telegram
try:
    from telegram.ext import Application, ApplicationBuilder, CommandHandler, MessageHandler, filters
    from telegram import Update
    from telegram.ext import ContextTypes
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ telegram: {e}")
    sys.exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
app = None
http_server = None
running = True

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"üöÄ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        f"–Ø DailyCheck Bot - —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        f"/help - —Å–ø—Ä–∞–≤–∫–∞\n"
        f"/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞\n\n"
        f"üí¨ –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ - —è –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ AI!"
    )
    logger.info(f"–°—Ç–∞—Ä—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìñ <b>DailyCheck Bot - —Å–ø—Ä–∞–≤–∫–∞</b>\n\n"
        "üîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n\n"
        "ü§ñ <b>AI-—Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç —á–µ—Ä–µ–∑ ChatGPT\n"
        "‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ '–ö–∞–∫ –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å?'\n"
        "‚Ä¢ '–ü–æ–º–æ–≥–∏ —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π'\n"
        "‚Ä¢ '–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á'"
    )
    await update.message.reply_html(help_text)

async def health_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!\n"
        f"ü§ñ AI: {'–≤–∫–ª—é—á–µ–Ω' if OPENAI_API_KEY else '–≤—ã–∫–ª—é—á–µ–Ω'}\n"
        f"üîó HTTP: —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {PORT}"
    )

# === AI –û–ë–†–ê–ë–û–¢–ß–ò–ö ===

async def generate_ai_response(user_text: str, user_name: str = "–¥—Ä—É–≥") -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –æ—Ç–≤–µ—Ç–∞"""
    if not OPENAI_API_KEY:
        return (
            f"ü§ñ –ü—Ä–∏–≤–µ—Ç! AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
            f"–ù–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ —Ä–∞–¥ –Ω–∞—à–µ–º—É –æ–±—â–µ–Ω–∏—é!\n\n"
            f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: '{user_text}'"
        )
    
    try:
        from openai import AsyncOpenAI
        client = AsyncOpenAI(api_key=OPENAI_API_KEY)
        
        system_prompt = (
            "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. "
            "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. "
            "–ü–æ–º–æ–≥–∞–π —Å –∑–∞–¥–∞—á–∞–º–∏, –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –≤—Ä–µ–º–µ–Ω–∏. "
            "–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏."
        )
        
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_text}
            ],
            max_tokens=300,
            temperature=0.7
        )
        
        return response.choices[0].message.content.strip()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI: {e}")
        return (
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å AI.\n"
            f"–ù–æ —è –∑–∞–ø–æ–º–Ω–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{user_text}'\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É!"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_text = update.message.text
    user = update.effective_user
    
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} (@{user.username}): {user_text[:50]}...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, 
        action="typing"
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    try:
        response = await generate_ai_response(user_text, user.first_name)
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "üòÖ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ —è —Å—Ç–∞—Ä–∞—é—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )

# === HTTP –°–ï–†–í–ï–† ===

def start_http_server():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health check"""
    import http.server
    import socketserver
    import json
    
    class HealthHandler(http.server.SimpleHTTPRequestHandler):
        def do_GET(self):
            if self.path in ['/', '/health']:
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                
                response_data = {
                    "status": "ok",
                    "service": "dailycheck-bot",
                    "version": "4.0",
                    "ai_enabled": bool(OPENAI_API_KEY),
                    "message": "DailyCheck Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"
                }
                
                self.wfile.write(json.dumps(response_data, ensure_ascii=False).encode('utf-8'))
            else:
                self.send_response(404)
                self.end_headers()
        
        def log_message(self, format, *args):
            # –û—Ç–∫–ª—é—á–∞–µ–º HTTP –ª–æ–≥–∏
            pass
    
    def run_server():
        try:
            with socketserver.TCPServer(("", PORT), HealthHandler) as httpd:
                logger.info(f"‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
                httpd.serve_forever()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    server_thread = threading.Thread(target=run_server, daemon=True)
    server_thread.start()
    return server_thread

# === –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ===

def create_bot_application():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞"""
    global app
    
    try:
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("health", health_command))
        
        # AI —á–∞—Ç
        app.add_handler(
            MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message)
        )
        
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        return app
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        raise

async def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global running
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ DailyCheck Bot v4.0...")
        
        # HTTP —Å–µ—Ä–≤–µ—Ä
        http_thread = start_http_server()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
        application = create_bot_application()
        
        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info("üì± –ù–∞–π–¥–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        
        # –ó–∞–ø—É—Å–∫ polling
        await application.run_polling(
            drop_pending_updates=True,
            stop_signals=[]  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_bot: {e}")
        running = False
        raise

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    global running
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
    running = False

# === –¢–û–ß–ö–ê –í–•–û–î–ê ===

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global running
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    logger.info(f"Python: {sys.version}")
    logger.info(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {sys.platform}")
    logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    print("üöÄ DailyCheck Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+")
        sys.exit(1)
    
    main()
