#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/start_bot.py [--dev] [--webhook] [--port PORT]
"""

import sys
import os
import asyncio
import argparse
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    from telegram import Bot
    from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
    import uvicorn
    from fastapi import FastAPI
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('logs/bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class BotStarter:
    def __init__(self):
        self.app = None
        self.webhook_app = None
        self.bot_token = os.getenv('BOT_TOKEN')
        self.webhook_url = os.getenv('WEBHOOK_URL')
        self.webhook_port = int(os.getenv('WEBHOOK_PORT', 8443))
        self.webhook_path = '/webhook'
        
        if not self.bot_token:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            sys.exit(1)
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ handlers –¥–ª—è –±–æ—Ç–∞"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handlers –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            from handlers.commands import (
                start_command, help_command, profile_command, 
                tasks_command, leaderboard_command, settings_command
            )
            from handlers.tasks import (
                task_list_handler, task_complete_handler, 
                task_rating_handler, task_search_handler
            )
            from handlers.callbacks import (
                button_callback_handler, pagination_callback_handler
            )
            from handlers.admin import (
                admin_stats_handler, admin_users_handler, 
                admin_tasks_handler, admin_broadcast_handler
            )
            
            # –ö–æ–º–∞–Ω–¥—ã
            self.app.add_handler(CommandHandler("start", start_command))
            self.app.add_handler(CommandHandler("help", help_command))
            self.app.add_handler(CommandHandler("profile", profile_command))
            self.app.add_handler(CommandHandler("tasks", tasks_command))
            self.app.add_handler(CommandHandler("leaderboard", leaderboard_command))
            self.app.add_handler(CommandHandler("settings", settings_command))
            
            # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            self.app.add_handler(CommandHandler("admin_stats", admin_stats_handler))
            self.app.add_handler(CommandHandler("admin_users", admin_users_handler))
            self.app.add_handler(CommandHandler("admin_tasks", admin_tasks_handler))
            self.app.add_handler(CommandHandler("broadcast", admin_broadcast_handler))
            
            # Callback handlers
            self.app.add_handler(CallbackQueryHandler(button_callback_handler))
            
            # Message handlers
            self.app.add_handler(MessageHandler(
                filters.TEXT & ~filters.COMMAND, 
                task_search_handler
            ))
            
            logger.info("‚úÖ Handlers –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ handlers –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ handlers...")
            
            # –ë–∞–∑–æ–≤—ã–µ handlers –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            self.setup_basic_handlers()
    
    def setup_basic_handlers(self):
        """–ë–∞–∑–æ–≤—ã–µ handlers –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        async def start(update, context):
            await update.message.reply_text(
                "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø TaskBot –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            )
        
        async def help_command(update, context):
            help_text = """
üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/tasks - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
/leaderboard - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

üöÄ **–°—Ç–∞—Ç—É—Å:** –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!
            """
            await update.message.reply_text(help_text, parse_mode='Markdown')
        
        async def echo(update, context):
            await update.message.reply_text(
                f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ handlers
        self.app.add_handler(CommandHandler("start", start))
        self.app.add_handler(CommandHandler("help", help_command))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
        
        logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–µ handlers –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def setup_bot_application(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram bot application"""
        try:
            # –°–æ–∑–¥–∞–µ–º application
            builder = Application.builder()
            builder.token(self.bot_token)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏/–ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
            if os.getenv('ENVIRONMENT') == 'development':
                builder.read_timeout(30)
                builder.write_timeout(30)
                builder.connect_timeout(30)
                builder.pool_timeout(30)
            
            self.app = builder.build()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º handlers
            self.setup_handlers()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
            await self.app.initialize()
            
            logger.info("‚úÖ Bot application –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ bot application: {e}")
            raise
    
    def setup_webhook_app(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è webhook"""
        from fastapi import FastAPI, Request, HTTPException
        
        webhook_app = FastAPI(title="Telegram Bot Webhook")
        
        @webhook_app.post(self.webhook_path)
        async def webhook_handler(request: Request):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
                data = await request.json()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update
                await self.app.process_update(data)
                
                return {"status": "ok"}
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
                raise HTTPException(status_code=500, detail=str(e))
        
        @webhook_app.get("/health")
        async def health_check():
            return {
                "status": "healthy",
                "bot_username": self.app.bot.username if self.app and self.app.bot else None,
                "webhook_url": self.webhook_url
            }
        
        self.webhook_app = webhook_app
        logger.info("‚úÖ Webhook app –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    async def set_webhook(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
        if not self.webhook_url:
            logger.error("‚ùå WEBHOOK_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        
        try:
            webhook_full_url = f"{self.webhook_url.rstrip('/')}{self.webhook_path}"
            
            await self.app.bot.set_webhook(
                url=webhook_full_url,
                drop_pending_updates=True
            )
            
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_full_url}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            return False
    
    async def remove_webhook(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ webhook"""
        try:
            await self.app.bot.delete_webhook(drop_pending_updates=True)
            logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
            
            await self.setup_bot_application()
            
            # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            await self.remove_webhook()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.app.start()
            await self.app.updater.start_polling(
                poll_interval=1.0,
                timeout=20,
                bootstrap_retries=-1,
                read_timeout=20,
                write_timeout=20,
                connect_timeout=20,
                pool_timeout=20
            )
            
            logger.info("‚úÖ Bot –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
            logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            
            # –ñ–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self.app.updater.idle()
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}")
            raise
        finally:
            await self.app.stop()
            await self.app.shutdown()
            logger.info("‚úÖ Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def start_webhook(self, port: int):
        """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook"""
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
            
            await self.setup_bot_application()
            self.setup_webhook_app()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            if not await self.set_webhook():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä
            config = uvicorn.Config(
                self.webhook_app,
                host="0.0.0.0",
                port=port,
                log_level="info",
                access_log=False
            )
            
            server = uvicorn.Server(config)
            
            logger.info(f"‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            
            await server.serve()
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook: {e}")
            raise
        finally:
            if self.app:
                await self.remove_webhook()
                await self.app.stop()
                await self.app.shutdown()
            logger.info("‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    os.makedirs('logs', exist_ok=True)
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞')
    parser.add_argument('--dev', action='store_true', help='–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--webhook', action='store_true', help='–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook')
    parser.add_argument('--port', type=int, default=8443, help='–ü–æ—Ä—Ç –¥–ª—è webhook (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8443)')
    parser.add_argument('--polling', action='store_true', help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if args.dev:
        os.environ['ENVIRONMENT'] = 'development'
        logging.getLogger().setLevel(logging.DEBUG)
        logger.info("üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
    use_webhook = args.webhook and not args.polling
    
    if 'RENDER' in os.environ or 'HEROKU' in os.environ:
        use_webhook = True
        logger.info("üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å—Ä–µ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook")
    
    # –°–æ–∑–¥–∞–µ–º starter
    starter = BotStarter()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        if use_webhook:
            asyncio.run(starter.start_webhook(args.port))
        else:
            asyncio.run(starter.start_polling())
            
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–∫–∞!")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
