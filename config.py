#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DailyCheck Bot v4.0 - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã

–ê–≤—Ç–æ—Ä: AI Assistant  
–í–µ—Ä—Å–∏—è: 4.0.0
–î–∞—Ç–∞: 2025-06-10
"""

import os
import sys
from pathlib import Path
from enum import Enum
from typing import Dict, Any

class BotConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
    ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', 0))
    
    # –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    PORT = int(os.getenv('PORT', 8080))
    HOST = os.getenv('HOST', '0.0.0.0')
    WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')
    
    # –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
    DATA_DIR = Path(os.getenv('DATA_DIR', 'data'))
    EXPORT_DIR = Path(os.getenv('EXPORT_DIR', 'exports'))
    BACKUP_DIR = Path(os.getenv('BACKUP_DIR', 'backups'))
    LOG_DIR = Path(os.getenv('LOG_DIR', 'logs'))
    
    # AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    OPENAI_MODEL = os.getenv('OPENAI_MODEL', 'gpt-3.5-turbo')
    OPENAI_MAX_TOKENS = int(os.getenv('OPENAI_MAX_TOKENS', 1000))
    AI_CHAT_ENABLED = os.getenv('AI_CHAT_ENABLED', 'true').lower() == 'true'
    
    # Google Sheets
    GOOGLE_SHEET_ID = os.getenv('GOOGLE_SHEET_ID', '')
    GOOGLE_CREDENTIALS_FILE = os.getenv('GOOGLE_CREDENTIALS_FILE', 'service_account.json')
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    MAX_USERS_CACHE = int(os.getenv('MAX_USERS_CACHE', 1000))
    BACKUP_INTERVAL_HOURS = int(os.getenv('BACKUP_INTERVAL_HOURS', 6))
    LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO').upper()
    DEBUG_MODE = os.getenv('DEBUG_MODE', 'false').lower() == 'true'
    
    # Dashboard –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    DASHBOARD_SECRET_KEY = os.getenv('DASHBOARD_SECRET_KEY', 'your-secret-key-here')
    DASHBOARD_PORT = int(os.getenv('DASHBOARD_PORT', 8081))
    DASHBOARD_HOST = os.getenv('DASHBOARD_HOST', '0.0.0.0')
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    @classmethod
    def ensure_directories(cls):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        for directory in [cls.DATA_DIR, cls.EXPORT_DIR, cls.BACKUP_DIR, cls.LOG_DIR]:
            directory.mkdir(exist_ok=True)
    
    @classmethod
    def validate_config(cls) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not cls.BOT_TOKEN:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            return False
        
        if cls.OPENAI_API_KEY == cls.BOT_TOKEN:
            print("‚ö†Ô∏è OPENAI_API_KEY —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å BOT_TOKEN - AI —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
        return True
    
    @classmethod
    def get_config_dict(cls) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è"""
        return {
            'bot_token_set': bool(cls.BOT_TOKEN),
            'openai_key_set': bool(cls.OPENAI_API_KEY),
            'admin_user_id': cls.ADMIN_USER_ID,
            'port': cls.PORT,
            'host': cls.HOST,
            'debug_mode': cls.DEBUG_MODE,
            'ai_chat_enabled': cls.AI_CHAT_ENABLED,
            'data_dir': str(cls.DATA_DIR),
            'log_level': cls.LOG_LEVEL
        }

class TaskStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á"""
    ACTIVE = "active"
    COMPLETED = "completed"
    PAUSED = "paused"
    ARCHIVED = "archived"

class TaskPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"

class TaskCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á"""
    WORK = "work"
    HEALTH = "health"
    LEARNING = "learning"
    PERSONAL = "personal"
    FINANCE = "finance"

class UserTheme(Enum):
    """–¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
    CLASSIC = "classic"
    DARK = "dark"
    NATURE = "nature"
    MINIMAL = "minimal"
    COLORFUL = "colorful"

class AIRequestType(Enum):
    """–¢–∏–ø—ã AI –∑–∞–ø—Ä–æ—Å–æ–≤"""
    MOTIVATION = "motivation"
    COACHING = "coaching" 
    PSYCHOLOGY = "psychology"
    ANALYSIS = "analysis"
    GENERAL = "general"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
class GameConstants:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    # XP –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    XP_TASK_COMPLETE = 20
    XP_STREAK_BONUS = 5  # –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å streak'–∞
    XP_ACHIEVEMENT = 50
    XP_DAILY_LOGIN = 5
    
    # –£—Ä–æ–≤–Ω–∏
    MAX_LEVEL = 16
    XP_PER_LEVEL_BASE = 100
    XP_LEVEL_MULTIPLIER = 1.5
    
    # Streak'–∏
    STREAK_BONUS_THRESHOLD = 3  # —Å –∫–∞–∫–æ–≥–æ streak'–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–æ–Ω—É—Å
    MAX_STREAK_BONUS = 50
    
    @staticmethod
    def xp_for_level(level: int) -> int:
        """–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π XP –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è"""
        if level <= 1:
            return 0
        return int(GameConstants.XP_PER_LEVEL_BASE * (level - 1) * GameConstants.XP_LEVEL_MULTIPLIER)

# –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
class Messages:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    WELCOME = """üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DailyCheck Bot v4.0!**

–ü—Ä–∏–≤–µ—Ç, {user_name}! 

{level_icon} **–£—Ä–æ–≤–µ–Ω—å {level}** - {level_title}
{xp_icon} XP: {total_xp}

üöÄ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏
‚úÖ –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å XP –∏ streak'–∞–º–∏
üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —É—Ä–æ–≤–Ω–µ–π
ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ –∫–æ—É—á–∏–Ω–≥–∞
üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
‚è∞ –¢–∞–π–º–µ—Ä—ã –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
üé® –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è

**–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active_tasks}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –≤—Å–µ–≥–æ: {completed_tasks}
‚Ä¢ –î—Ä—É–∑–µ–π: {friends_count}
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {achievements_count}/{total_achievements}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"""

    HELP = """üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ DailyCheck Bot v4.0

üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/tasks - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á
/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É  
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/achievements - –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
/friends - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–∑—å—è–º–∏
/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö

üîπ AI —Ñ—É–Ω–∫—Ü–∏–∏:
/ai_chat - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å AI-—á–∞—Ç
/motivate - –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é
/ai_coach - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—É—á
/psy - –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
/suggest_tasks - AI –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –∑–∞–¥–∞—á–∏

üîπ –£—Ç–∏–ª–∏—Ç—ã:
/timer - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä (Pomodoro –∏ –¥—Ä.)
/remind - –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/theme - –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
/myid - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID

üîπ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/settasks - –ë—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
/weekly_goals - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏
/analytics - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

üîπ –°–∏—Å—Ç–µ–º–∞ XP –∏ —É—Ä–æ–≤–Ω–µ–π:
‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ XP
‚Ä¢ –ü–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
‚Ä¢ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ

üîπ AI-—á–∞—Ç —Ä–µ–∂–∏–º:
–ü–æ—Å–ª–µ /ai_chat –ø–∏—à–∏—Ç–µ –±–æ—Ç—É –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:
‚Ä¢ "–ú–æ—Ç–∏–≤–∏—Ä—É–π –º–µ–Ω—è" ‚Üí –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ "–ö–∞–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å?" ‚Üí —Å–æ–≤–µ—Ç—ã
‚Ä¢ "–£—Å—Ç–∞–ª –æ—Ç —Ä–∞–±–æ—Ç—ã" ‚Üí –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å

üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!"""

# –¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
class ThemeConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
    
    THEMES = {
        UserTheme.CLASSIC: {
            "name": "üé≠ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è",
            "task_completed": "‚úÖ",
            "task_pending": "‚≠ï",
            "priority_high": "üî¥",
            "priority_medium": "üü°", 
            "priority_low": "üîµ",
            "xp_icon": "‚≠ê",
            "level_icon": "üìä",
            "streak_icon": "üî•"
        },
        UserTheme.DARK: {
            "name": "üåô –¢—ë–º–Ω–∞—è",
            "task_completed": "‚òëÔ∏è",
            "task_pending": "‚ö´",
            "priority_high": "üü•",
            "priority_medium": "üü®",
            "priority_low": "üü¶", 
            "xp_icon": "üí´",
            "level_icon": "üìà",
            "streak_icon": "üî•"
        },
        UserTheme.NATURE: {
            "name": "üåø –ü—Ä–∏—Ä–æ–¥–Ω–∞—è",
            "task_completed": "üåü",
            "task_pending": "üåë",
            "priority_high": "üåπ",
            "priority_medium": "üåª",
            "priority_low": "üåø",
            "xp_icon": "üçÉ",
            "level_icon": "üå±",
            "streak_icon": "üî•"
        },
        UserTheme.MINIMAL: {
            "name": "‚ö™ –ú–∏–Ω–∏–º–∞–ª",
            "task_completed": "‚úì",
            "task_pending": "‚óã",
            "priority_high": "‚óè",
            "priority_medium": "‚óê",
            "priority_low": "‚óã",
            "xp_icon": "‚óÜ",
            "level_icon": "‚ñ≤",
            "streak_icon": "‚ñ∂"
        },
        UserTheme.COLORFUL: {
            "name": "üåà –Ø—Ä–∫–∞—è",
            "task_completed": "üéâ",
            "task_pending": "üí≠",
            "priority_high": "üí•",
            "priority_medium": "‚ö°",
            "priority_low": "üí´",
            "xp_icon": "üéÜ",
            "level_icon": "üöÄ",
            "streak_icon": "üî•"
        }
    }

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    dependencies = {
        'telegram': 'python-telegram-bot',
        'openai': 'openai',
        'pandas': 'pandas',
        'psutil': 'psutil',
        'apscheduler': 'APScheduler'
    }
    
    missing = []
    available = {}
    
    for module, package in dependencies.items():
        try:
            __import__(module)
            available[module] = True
        except ImportError:
            available[module] = False
            missing.append(package)
    
    return available, missing

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
BotConfig.ensure_directories()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ DailyCheck Bot v4.0")
    print(f"Python: {sys.version}")
    print(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {sys.platform}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if BotConfig.validate_config():
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    else:
        print("‚ùå –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    available, missing = check_dependencies()
    
    print("\nüì¶ –°—Ç–∞—Ç—É—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    for module, status in available.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"{status_icon} {module}")
    
    if missing:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install " + " ".join(missing))
    else:
        print("\nüéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"\n‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    config = BotConfig.get_config_dict()
    for key, value in config.items():
        print(f"‚Ä¢ {key}: {value}")
