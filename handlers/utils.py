# ===== handlers/utils.py =====
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
import logging
from datetime import datetime

from database import DatabaseManager
from models.user import User

logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = [
        [KeyboardButton("üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_tasks_inline_keyboard(tasks: dict):
    """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    keyboard = []
    
    for task_id, task in tasks.items():
        status_emoji = "‚úÖ" if task.status.value == "completed" else "‚≠ï"
        keyboard.append([
            InlineKeyboardButton(
                f"{status_emoji} {task.title}",
                callback_data=f"task_view_{task_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="task_add"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="tasks_refresh")
    ])
    
    return InlineKeyboardMarkup(keyboard)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE, db: DatabaseManager):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_telegram = update.effective_user
    user = db.get_or_create_user(
        user_id=user_telegram.id,
        username=user_telegram.username,
        first_name=user_telegram.first_name,
        last_name=user_telegram.last_name
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    user.stats.last_activity = datetime.now()
    db.save_user(user)
    
    welcome_text = f"""üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DailyCheck Bot v4.0!

–ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username or '–¥—Ä—É–≥'}! 

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:
üìù –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚úÖ –û—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º  
üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
üî• –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é streak'–æ–≤

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏:"""
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ DailyCheck Bot v4.0

üîπ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/tasks - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á
/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

üîπ **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á
‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –æ—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

üîπ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ streak'–æ–≤ (—Å–µ—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    await update.message.reply_text(
        "ü§î –Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        reply_markup=get_main_keyboard()
    )

def format_task_info(task) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ"""
    priority_emojis = {
        "low": "üîµ",
        "medium": "üü°", 
        "high": "üî¥"
    }
    
    status_emojis = {
        "active": "‚≠ï",
        "completed": "‚úÖ",
        "paused": "‚è∏Ô∏è",
        "archived": "üì¶"
    }
    
    info = f"{status_emojis.get(task.status.value, '‚≠ï')} **{task.title}**\n"
    
    if task.description:
        info += f"üìù {task.description}\n"
    
    info += f"{priority_emojis.get(task.priority.value, 'üü°')} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority.value}\n"
    info += f"üî• Streak: {task.current_streak} –¥–Ω–µ–π\n"
    info += f"üìà –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é: {task.completion_rate_week:.1f}%\n"
    
    if task.tags:
        info += f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(task.tags)}\n"
    
    info += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {task.created_at.strftime('%d.%m.%Y')}"
    
    return info

# ===== handlers/tasks.py =====
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ConversationHandler
import uuid
from datetime import date, datetime
import logging

from database import DatabaseManager
from models.task import Task, TaskPriority, TaskStatus
from models.user import User
from .utils import get_main_keyboard, get_tasks_inline_keyboard, format_task_info

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TASK_TITLE, TASK_DESCRIPTION, TASK_PRIORITY, TASK_TAGS = range(4)

async def tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE, db: DatabaseManager):
    """–ö–æ–º–∞–Ω–¥–∞ /tasks - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    user = db.get_or_create_user(update.effective_user.id)
    
    if not user.tasks:
        await update.message.reply_text(
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    active_tasks = {k: v for k, v in user.tasks.items() if v.status == TaskStatus.ACTIVE}
    
    if not active_tasks:
        await update.message.reply_text(
            "üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!\n\n–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
            reply_markup=get_main_keyboard()
        )
        return
    
    text = f"üìù **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({len(active_tasks)}):**\n\n"
    
    for i, (task_id, task) in enumerate(active_tasks.items(), 1):
        status_emoji = "‚úÖ" if any(c.date == date.today() and c.completed for c in task.completions) else "‚≠ï"
        text += f"{i}. {status_emoji} {task.title}\n"
        text += f"   üî• Streak: {task.current_streak} | üìà –ù–µ–¥–µ–ª—è: {task.completion_rate_week:.0f}%\n\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
    
    await update.message.reply_text(
        text,
        reply_markup=get_tasks_inline_keyboard(active_tasks),
        parse_mode='Markdown'
    )

async def add_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    await update.message.reply_text(
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='Markdown'
    )
    return TASK_TITLE

async def add_task_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    title = update.message.text.strip()
    
    if len(title) > 100:
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑:"
        )
        return TASK_TITLE
    
    context.user_data['task_title'] = title
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: **{title}**\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        parse_mode='Markdown'
    )
    return TASK_DESCRIPTION

async def add_task_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    description = update.message.text.strip()
    
    if description.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '-']:
        description = None
    elif len(description) > 500:
        await update.message.reply_text(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
        )
        return TASK_DESCRIPTION
    
    context.user_data['task_description'] = description
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    keyboard = [
        [InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="priority_high")],
        [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="priority_medium")],
        [InlineKeyboardButton("üîµ –ù–∏–∑–∫–∏–π", callback_data="priority_low")]
    ]
    
    await update.message.reply_text(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return TASK_PRIORITY

async def add_task_priority(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏"""
    query = update.callback_query
    await query.answer()
    
    priority_map = {
        "priority_high": TaskPriority.HIGH,
        "priority_medium": TaskPriority.MEDIUM,
        "priority_low": TaskPriority.LOW
    }
    
    priority = priority_map.get(query.data, TaskPriority.MEDIUM)
    context.user_data['task_priority'] = priority
    
    await query.edit_message_text(
        f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority.value}\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
    )
    return TASK_TAGS

async def add_task_tags(update: Update, context: ContextTypes.DEFAULT_TYPE, db: DatabaseManager):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    tags_text = update.message.text.strip()
    
    if tags_text.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '-']:
        tags = []
    else:
        tags = [tag.strip() for tag in tags_text.split(',') if tag.strip()]
        tags = tags[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 —Ç–µ–≥–æ–≤
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    user = db.get_or_create_user(update.effective_user.id)
    
    task = Task(
        task_id=str(uuid.uuid4()),
        user_id=user.user_id,
        title=context.user_data['task_title'],
        description=context.user_data.get('task_description'),
        priority=context.user_data['task_priority'],
        tags=tags
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user.tasks[task.task_id] = task
    user.stats.total_tasks += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    db.save_user(user)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context.user_data.clear()
    
    success_text = f"üéâ **–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n{format_task_info(task)}"
    
    await update.message.reply_text(
        success_text,
        reply_markup=get_main_keyboard(),
        parse_mode='Markdown'
    )
    
    return ConversationHandler.END

async def cancel_add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    context.user_data.clear()
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

async def complete_task_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, db: DatabaseManager):
    """–ú–µ–Ω—é –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
    user = db.get_or_create_user(update.effective_user.id)
    
    if not user.tasks:
        await update.message.reply_text(
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
    today = date.today()
    available_tasks = {}
    
    for task_id, task in user.tasks.items():
        if task.status == TaskStatus.ACTIVE:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
            completed_today = any(c.date == today and c.completed for c in task.completions)
            if not completed_today:
                available_tasks[task_id] = task
    
    if not available_tasks:
        await update.message.reply_text(
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á
    keyboard = []
    for task_id, task in available_tasks.items():
        keyboard.append([
            InlineKeyboardButton(
                f"‚úÖ {task.title}",
                callback_data=f"complete_{task_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="complete_cancel")
    ])
    
    await update.message.reply_text(
        f"‚úÖ **–û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ ({len(available_tasks)} –¥–æ—Å—Ç—É–ø–Ω–æ):",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_task_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, db: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∑–∞–¥–∞—á"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user = db.get_or_create_user(update.effective_user.id)
    
    if data.startswith("complete_"):
        task_id = data.replace("complete_", "")
        
        if task_id == "cancel":
            await query.edit_message_text(
                "‚ùå –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=None
            )
            return
        
        if task_id not in user.tasks:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        task = user.tasks[task_id]
        
        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        if task.mark_completed():
            user.stats.completed_tasks += 1
            db.save_user(user)
            
            streak_text = f"üî• Streak: {task.current_streak} –¥–Ω–µ–π!"
            if task.current_streak > user.stats.longest_streak:
                user.stats.longest_streak = task.current_streak
                db.save_user(user)
                streak_text += " üèÜ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!"
            
            await query.edit_message_text(
                f"üéâ **–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!**\n\n"
                f"‚úÖ {task.title}\n"
                f"{streak_text}\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
    
    elif data.startswith("task_view_"):
        task_id = data.replace("task_view_", "")
        
        if task_id not in user.tasks:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        task = user.tasks[task_id]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–µ–π
        keyboard = [
            [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"complete_{task_id}")],
            [InlineKeyboardButton("‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"pause_{task_id}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="tasks_refresh")]
        ]
        
        await query.edit_message_text(
            format_task_info(task),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif data == "tasks_refresh":
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        active_tasks = {k: v for k, v in user.tasks.items() if v.status == TaskStatus.ACTIVE}
        
        if not active_tasks:
            await query.edit_message_text("üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")
            return
        
        text = f"üìù **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({len(active_tasks)}):**\n\n"
        
        for i, (task_id, task) in enumerate(active_tasks.items(), 1):
            status_emoji = "‚úÖ" if any(c.date == date.today() and c.completed for c in task.completions) else "‚≠ï"
            text += f"{i}. {status_emoji} {task.title}\n"
            text += f"   üî• Streak: {task.current_streak} | üìà –ù–µ–¥–µ–ª—è: {task.completion_rate_week:.0f}%\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        
        await query.edit_message_text(
            text,
            reply_markup=get_tasks_inline_keyboard(active_tasks),
            parse_mode='Markdown'
        )

def setup_task_handlers(app, db, config):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∑–∞–¥–∞—á"""
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
    add_task_handler = ConversationHandler(
        entry_points=[
            CommandHandler("add", add_task_start),
            MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task_start)
        ],
        states={
            TASK_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_task_title)],
            TASK_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_task_description)],
            TASK_PRIORITY: [CallbackQueryHandler(add_task_priority, pattern="^priority_")],
            TASK_TAGS: [MessageHandler(filters.TEXT & ~filters.COMMAND, 
                                     lambda u, c: add_task_tags(u, c, db))]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_add_task),
            MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), cancel_add_task)
        ]
    )
    
    app.add_handler(add_task_handler)
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("tasks", lambda u, c: tasks_command(u, c, db)))
    app.add_handler(MessageHandler(filters.Regex("^üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏$"), lambda u, c: tasks_command(u, c, db)))
    app.add_handler(MessageHandler(filters.Regex("^‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ$"), lambda u, c: complete_task_menu(u, c, db)))
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CallbackQueryHandler(lambda u, c: handle_task_callback(u, c, db), pattern="^(complete_|task_view_|tasks_refresh|pause_|delete_)"))

# ===== handlers/stats.py =====
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from datetime import date, datetime, timedelta
import io
import json

from database import DatabaseManager
from .utils import get_main_keyboard

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE, db: DatabaseManager):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user = db.get_or_create_user(update.effective_user.id)
    
    if not user.tasks:
        await update.message.reply_text(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —É –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á!\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    today = date.today()
    week_ago = today - timedelta(days=7)
    month_ago = today - timedelta(days=30)
    
    total_tasks = len(user.tasks)
    active_tasks = len([t for t in user.tasks.values() if t.status.value == "active"])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    completed_today = 0
    completed_week = 0
    completed_month = 0
    
    for task in user.tasks.values():
        for completion in task.completions:
            if completion.completed:
                if completion.date == today:
                    completed_today += 1
                if completion.date >= week_ago:
                    completed_week += 1
                if completion.date >= month_ago:
                    completed_month += 1
    
    # –¢–µ–∫—É—â–∏–µ streak'–∏
    current_streaks = [task.current_streak for task in user.tasks.values() if task.status.value == "active"]
    max_streak = max(current_streaks) if current_streaks else 0
    avg_streak = sum(current_streaks) / len(current_streaks) if current_streaks else 0
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_text = f"""üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üéØ **–û–±—â–µ–µ:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_tasks}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –≤—Å–µ–≥–æ: {user.stats.completed_tasks}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {user.stats.completion_rate:.1f}%

üìÖ **–ó–∞ –ø–µ—Ä–∏–æ–¥—ã:**
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {completed_today} –∑–∞–¥–∞—á
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {completed_week} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {completed_month} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π

üî• **Streak'–∏:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {max_streak} –¥–Ω–µ–π
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π: {avg_streak:.1f} –¥–Ω–µ–π
‚Ä¢ –†–µ–∫–æ—Ä–¥: {user.stats.longest_streak} –¥–Ω–µ–π

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.stats.registration_date.strftime('%d.%m.%Y')}
‚Ä¢ –î–Ω–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {(datetime.now() - user.stats.registration_date).days}"""
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_detailed")],
        [InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="stats_export")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_refresh")]
    ]
    
    await update.message.reply_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, db: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = db.get_or_create_user(update.effective_user.id)
    
    if query.data == "stats_detailed":
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
        if not user.tasks:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
            return
        
        detailed_text = "üìà **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:**\n\n"
        
        for i, (task_id, task) in enumerate(user.tasks.items(), 1):
            if task.status.value == "active":
                detailed_text += f"{i}. **{task.title}**\n"
                detailed_text += f"   üî• Streak: {task.current_streak} –¥–Ω–µ–π\n"
                detailed_text += f"   üìà –ù–µ–¥–µ–ª—è: {task.completion_rate_week:.1f}%\n"
                detailed_text += f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {task.created_at.strftime('%d.%m.%Y')}\n\n"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stats_refresh")]]
        
        await query.edit_message_text(
            detailed_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif query.data == "stats_export":
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        export_data = {
            "user_info": {
                "user_id": user.user_id,
                "username": user.username,
                "registration_date": user.stats.registration_date.isoformat(),
                "export_date": datetime.now().isoformat()
            },
            "statistics": user.stats.__dict__,
            "tasks": [task.to_dict() for task in user.tasks.values()],
            "achievements": user.achievements
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
        export_json = json.dumps(export_data, ensure_ascii=False, indent=2)
        file_buffer = io.BytesIO(export_json.encode('utf-8'))
        file_buffer.name = f"dailycheck_export_{user.user_id}_{datetime.now().strftime('%Y%m%d')}.json"
        
        await query.message.reply_document(
            document=file_buffer,
            caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ DailyCheck Bot",
            filename=file_buffer.name
        )
        
        await query.edit_message_text(
            "‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!\n\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á–∞—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="stats_refresh")
            ]])
        )
    
    elif query.data == "stats_refresh":
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ø–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∏–∑ stats_command)
        await stats_command(query, context, db)

def setup_stats_handlers(app, db, config):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    app.add_handler(CommandHandler("stats", lambda u, c: stats_command(u, c, db)))
    app.add_handler(MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), lambda u, c: stats_command(u, c, db)))
    app.add_handler(CallbackQueryHandler(lambda u, c: handle_stats_callback(u, c, db), pattern="^stats_"))

# ===== handlers/settings.py =====
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters

from database import DatabaseManager
from .utils import get_main_keyboard

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE, db: DatabaseManager):
    """–ö–æ–º–∞–Ω–¥–∞ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.get_or_create_user(update.effective_user.id)
    
    settings_text = f"""‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**

üåç **–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è:**
‚Ä¢ –Ø–∑—ã–∫: {user.settings.language}
‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user.settings.timezone}

üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**
‚Ä¢ –í–∫–ª—é—á–µ–Ω—ã: {'‚úÖ' if user.settings.reminder_enabled else '‚ùå'}
‚Ä¢ –í—Ä–µ–º—è: {user.settings.daily_reminder_time}

üìä **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {'‚úÖ' if user.settings.weekly_stats else '‚ùå'}
‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {'‚úÖ' if user.settings.motivational_messages else '‚ùå'}"""
    
    keyboard = [
        [InlineKeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="settings_reminders")],
        [InlineKeyboardButton("üåç –Ø–∑—ã–∫ –∏ –≤—Ä–µ–º—è", callback_data="settings_locale")],
        [InlineKeyboardButton("üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="settings_refresh")]
    ]
    
    await update.message.reply_text(
        settings_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, db: DatabaseManager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    await query.answer()
    
    user = db.get_or_create_user(update.effective_user.id)
    
    if query.data == "settings_reminders":
        keyboard = [
            [InlineKeyboardButton(
                f"üîî {'–í—ã–∫–ª—é—á–∏—Ç—å' if user.settings.reminder_enabled else '–í–∫–ª—é—á–∏—Ç—å'} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                callback_data="toggle_reminders"
            )],
            [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="change_time")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_refresh")]
        ]
        
        await query.edit_message_text(
            f"üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π**\n\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if user.settings.reminder_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
            f"–í—Ä–µ–º—è: {user.settings.daily_reminder_time}",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif query.data == "toggle_reminders":
        user.settings.reminder_enabled = not user.settings.reminder_enabled
        db.save_user(user)
        
        await query.edit_message_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if user.settings.reminder_enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings_refresh")
            ]])
        )

def setup_settings_handlers(app, db, config):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    app.add_handler(CommandHandler("settings", lambda u, c: settings_command(u, c, db)))
    app.add_handler(MessageHandler(filters.Regex("^‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏$"), lambda u, c: settings_command(u, c, db)))
    app.add_handler(CallbackQueryHandler(lambda u, c: handle_settings_callback(u, c, db), pattern="^settings_|^toggle_|^change_"))

# ===== handlers/admin.py =====
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
import os
import shutil
from datetime import datetime

from database import DatabaseManager

def is_admin(user_id: int, config) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in config.ADMIN_IDS

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE, db: DatabaseManager, config):
    """–ö–æ–º–∞–Ω–¥–∞ /admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(update.effective_user.id, config):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    all_users = db.get_all_users()
    total_tasks = sum(len(user.tasks) for user in all_users)
    active_users = len([user for user in all_users if user.stats.last_activity and 
                       (datetime.now() - user.stats.last_activity).days <= 7])
    
    admin_text = f"""üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_users}
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}
‚Ä¢ –°—Ä–µ–¥–Ω–µ –∑–∞–¥–∞—á –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {total_tasks / len(all_users) if all_users else 0:.1f}

üíæ **–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {get_directory_size(config.DATA_DIR)} MB
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø: {get_last_backup_time(config.BACKUPS_DIR)}"""
    
    keyboard = [
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")],
        [InlineKeyboardButton("üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="admin_backup")],
        [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh")]
    ]
    
    await update.message.reply_text(
        admin_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

def get_directory_size(path) -> float:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ MB"""
    total_size = 0
    try:
        for dirpath, dirnames, filenames in os.walk(path):
            for filename in filenames:
                file_path = os.path.join(dirpath, filename)
                total_size += os.path.getsize(file_path)
        return round(total_size / (1024 * 1024), 2)
    except:
        return 0.0

def get_last_backup_time(backup_dir) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞"""
    try:
        backups = [f for f in os.listdir(backup_dir) if f.startswith('backup_')]
        if not backups:
            return "–ù–µ—Ç –±—ç–∫–∞–ø–æ–≤"
        
        latest_backup = max(backups, key=lambda x: os.path.getctime(os.path.join(backup_dir, x)))
        backup_time = datetime.fromtimestamp(os.path.getctime(os.path.join(backup_dir, latest_backup)))
        return backup_time.strftime('%d.%m.%Y %H:%M')
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, db: DatabaseManager, config):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(update.effective_user.id, config):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    if query.data == "admin_backup":
        try:
            backup_path = db.backup_data()
            await query.edit_message_text(
                f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n–ü—É—Ç—å: {backup_path}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_refresh")
                ]])
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_refresh")
                ]])
            )
    
    elif query.data == "admin_users":
        all_users = db.get_all_users()
        
        if not all_users:
            await query.edit_message_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        users_text = "üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):**\n\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        sorted_users = sorted(all_users, 
                            key=lambda x: x.stats.last_activity or datetime.min, 
                            reverse=True)[:10]
        
        for i, user in enumerate(sorted_users, 1):
            username = user.username or f"ID{user.user_id}"
            last_activity = user.stats.last_activity.strftime('%d.%m.%Y') if user.stats.last_activity else "–ù–∏–∫–æ–≥–¥–∞"
            users_text += f"{i}. @{username}\n"
            users_text += f"   üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n"
            users_text += f"   üìù –ó–∞–¥–∞—á: {len(user.tasks)}\n\n"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_refresh")]]
        
        await query.edit_message_text(
            users_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

def setup_admin_handlers(app, db, config):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    app.add_handler(CommandHandler("admin", lambda u, c: admin_command(u, c, db, config)))
    app.add_handler(CallbackQueryHandler(lambda u, c: handle_admin_callback(u, c, db, config), pattern="^admin_"))

# ===== handlers/social.py =====
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from datetime import date, timedelta

from database import DatabaseManager

async def leaderboard_command(update: Update, context: ContextTypes.DEFAULT_TYPE, db: DatabaseManager):
    """–ö–æ–º–∞–Ω–¥–∞ /leaderboard - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"""
    all_users = db.get_all_users()
    
    if len(all_users) < 2:
        await update.message.reply_text(
            "üèÜ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤!\n\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!"
        )
        return
    
    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    user_stats = []
    
    for user in all_users:
        if not user.tasks:
            continue
            
        # –°—á–∏—Ç–∞–µ–º streak'–∏
        current_streaks = [task.current_streak for task in user.tasks.values() 
                          if task.status.value == "active"]
        max_streak = max(current_streaks) if current_streaks else 0
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é
        week_ago = date.today() - timedelta(days=7)
        week_completions = 0
        
        for task in user.tasks.values():
            for completion in task.completions:
                if completion.date >= week_ago and completion.completed:
                    week_completions += 1
        
        user_stats.append({
            'user': user,
            'max_streak': max_streak,
            'week_completions': week_completions,
            'total_completed': user.stats.completed_tasks,
            'completion_rate': user.stats.completion_rate
        })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É streak'—É
    user_stats.sort(key=lambda x: x['max_streak'], reverse=True)
    
    leaderboard_text = "üèÜ **–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤**\n\n"
    leaderboard_text += "üìà *–ü–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É streak'—É:*\n"
    
    current_user_id = update.effective_user.id
    
    for i, stats in enumerate(user_stats[:10], 1):
        user = stats['user']
        username = user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id}"
        
        emoji = "üëë" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        is_current = "‚Üê –í—ã" if user.user_id == current_user_id else ""
        
        leaderboard_text += f"{emoji} @{username} - {stats['max_streak']} –¥–Ω–µ–π {is_current}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è–º –∑–∞ –Ω–µ–¥–µ–ª—é
    user_stats.sort(key=lambda x: x['week_completions'], reverse=True)
    
    leaderboard_text += "\nüìÖ *–ü–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è–º –∑–∞ –Ω–µ–¥–µ–ª—é:*\n"
    
    for i, stats in enumerate(user_stats[:5], 1):
        user = stats['user']
        username = user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id}"
        
        emoji = "üî•" if i == 1 else f"{i}."
        is_current = "‚Üê –í—ã" if user.user_id == current_user_id else ""
        
        leaderboard_text += f"{emoji} @{username} - {stats['week_completions']} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π {is_current}\n"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="leaderboard_refresh")],
        [InlineKeyboardButton("üìä –ú–æ—è –ø–æ–∑–∏—Ü–∏—è", callback_data="my_position")]
    ]
    
    await update.message.reply_text(
        leaderboard_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

def setup_social_handlers(app, db, config):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    app.add_handler(CommandHandler("leaderboard", lambda u, c: leaderboard_command(u, c, db)))

# ===== handlers/ai_functions.py =====
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
import random

from database import DatabaseManager

# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
MOTIVATIONAL_MESSAGES = [
    "üî• –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
    "üí™ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–µ–ª–∞–µ—Ç –≤–∞—Å —Å–∏–ª—å–Ω–µ–µ!",
    "üåü –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —Å–≤–æ–∏–º —Ü–µ–ª—è–º!",
    "üéØ –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!",
    "‚≠ê –ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º!",
    "üöÄ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç!",
    "üíé –ü—Ä–∏–≤—ã—á–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –≤–∞—à—É –∂–∏–∑–Ω—å!",
    "üèÜ –í—ã —á–µ–º–ø–∏–æ–Ω —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏!",
    "üåà –ö–∞–∂–¥—ã–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –¥–µ–Ω—å - —ç—Ç–æ –ø–æ–±–µ–¥–∞!",
    "‚ö° –≠–Ω–µ—Ä–≥–∏—è —É—Å–ø–µ—Ö–∞ —Å –≤–∞–º–∏!"
]

ACHIEVEMENT_MESSAGES = {
    'first_task': "üéâ –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! –ù–∞—á–∞–ª–æ –ø—É—Ç–∏ –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è!",
    'streak_7': "üî• –ù–µ–¥–µ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è! –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è!",
    'streak_30': "üíé 30 –¥–Ω–µ–π streak! –í—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–∏–≤—ã—á–∫—É!",
    'streak_100': "üëë 100 –¥–Ω–µ–π! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã!",
    'tasks_10': "üìà 10 –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!",
    'tasks_50': "üèÜ 50 –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π! –í—ã —Å–µ—Ä—å–µ–∑–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ —É—Å–ø–µ—Ö!",
    'tasks_100': "üåü 100 –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π! –õ–µ–≥–µ–Ω–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!"
}

async def get_ai_suggestion(update: Update, context: ContextTypes.DEFAULT_TYPE, db: DatabaseManager):
    """AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    user = db.get_or_create_user(update.effective_user.id)
    
    if not user.tasks:
        suggestion = """ü§ñ **AI –°–æ–≤–µ—Ç**

–ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ! –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–æ–∑–¥–∞—Ç—å 2-3 –ø—Ä–æ—Å—Ç—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:

1. üìö –ß–∏—Ç–∞—Ç—å 10 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å
2. üíß –í—ã–ø–∏–≤–∞—Ç—å 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã
3. üö∂ –ü—Ä–æ–≥—É–ª–∫–∞ 15 –º–∏–Ω—É—Ç

–ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ª–µ–≥—á–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏ –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç –æ—Å–Ω–æ–≤—É –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö —Ü–µ–ª–µ–π!"""
    else:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_tasks = [t for t in user.tasks.values() if t.status.value == "active"]
        avg_streak = sum(t.current_streak for t in active_tasks) / len(active_tasks) if active_tasks else 0
        
        if avg_streak < 3:
            suggestion = """ü§ñ **AI –°–æ–≤–µ—Ç**

–ó–∞–º–µ—á–∞—é, —á—Ç–æ streak'–∏ –µ—â–µ –Ω–µ–±–æ–ª—å—à–∏–µ. –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤:

‚Ä¢ üéØ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ 1-2 –∑–∞–¥–∞—á–∞—Ö –º–∞–∫—Å–∏–º—É–º
‚Ä¢ ‚è∞ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏ –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è
‚Ä¢ üîî –í–∫–ª—é—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
‚Ä¢ üìù –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å —Å–∞–º–æ–π –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏ –¥–Ω—è

–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏!"""
        elif avg_streak < 7:
            suggestion = """ü§ñ **AI –°–æ–≤–µ—Ç**

–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ! –ù–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫:

‚Ä¢ üèÜ –ù–∞–≥—Ä–∞–∂–¥–∞–π—Ç–µ —Å–µ–±—è –∑–∞ –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π streak'–∞
‚Ä¢ üìä –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏  
‚Ä¢ üîÑ –î–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
‚Ä¢ üë• –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —Å –¥—Ä—É–∑—å—è–º–∏

–í—ã –Ω–∞ –ø—É—Ç–∏ –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é —É—Å—Ç–æ–π—á–∏–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫!"""
        else:
            suggestion = """ü§ñ **AI –°–æ–≤–µ—Ç**

–í–ø–µ—á–∞—Ç–ª—è—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –í—Ä–µ–º—è –¥–ª—è —Ä–æ—Å—Ç–∞:

‚Ä¢ üìà –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
‚Ä¢ üéØ –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –≤ —Å–º–µ–∂–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
‚Ä¢ üìù –í–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –æ —Å–≤–æ–∏—Ö —É—Å–ø–µ—Ö–∞—Ö
‚Ä¢ üåü –°—Ç–∞–Ω—å—Ç–µ –ø—Ä–∏–º–µ—Ä–æ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–í—ã –º–∞—Å—Ç–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫! üëë"""
    
    await update.message.reply_text(suggestion, parse_mode='Markdown')

async def motivational_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message = random.choice(MOTIVATIONAL_MESSAGES)
    await update.message.reply_text(message)

def check_achievements(user, db: DatabaseManager) -> list:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    new_achievements = []
    
    # –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞
    if len(user.tasks) == 1 and 'first_task' not in user.achievements:
        user.achievements.append('first_task')
        new_achievements.append(ACHIEVEMENT_MESSAGES['first_task'])
    
    # Streak –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    max_streak = max([task.current_streak for task in user.tasks.values() 
                     if task.status.value == "active"], default=0)
    
    if max_streak >= 7 and 'streak_7' not in user.achievements:
        user.achievements.append('streak_7')
        new_achievements.append(ACHIEVEMENT_MESSAGES['streak_7'])
    
    if max_streak >= 30 and 'streak_30' not in user.achievements:
        user.achievements.append('streak_30')
        new_achievements.append(ACHIEVEMENT_MESSAGES['streak_30'])
    
    if max_streak >= 100 and 'streak_100' not in user.achievements:
        user.achievements.append('streak_100')
        new_achievements.append(ACHIEVEMENT_MESSAGES['streak_100'])
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
    total_completed = user.stats.completed_tasks
    
    if total_completed >= 10 and 'tasks_10' not in user.achievements:
        user.achievements.append('tasks_10')
        new_achievements.append(ACHIEVEMENT_MESSAGES['tasks_10'])
    
    if total_completed >= 50 and 'tasks_50' not in user.achievements:
        user.achievements.append('tasks_50')
        new_achievements.append(ACHIEVEMENT_MESSAGES['tasks_50'])
    
    if total_completed >= 100 and 'tasks_100' not in user.achievements:
        user.achievements.append('tasks_100')
        new_achievements.append(ACHIEVEMENT_MESSAGES['tasks_100'])
    
    if new_achievements:
        db.save_user(user)
    
    return new_achievements

def setup_ai_handlers(app, db, config):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è AI —Ñ—É–Ω–∫—Ü–∏–π"""
    app.add_handler(CommandHandler("suggest", lambda u, c: get_ai_suggestion(u, c, db)))
    app.add_handler(CommandHandler("motivate", motivational_message))

# ===== handlers/reminders.py =====
import asyncio
import schedule
import time
from datetime import datetime, time as dt_time
from telegram.ext import ContextTypes
import threading
import logging

from database import DatabaseManager
from .ai_functions import check_achievements, MOTIVATIONAL_MESSAGES
import random

logger = logging.getLogger(__name__)

class ReminderSystem:
    """–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, app, db: DatabaseManager):
        self.app = app
        self.db = db
        self.scheduler_thread = None
        self.running = False
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        if self.running:
            return
        
        self.running = True
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule.every().day.at("09:00").do(self._send_daily_reminders)
        schedule.every().day.at("21:00").do(self._send_evening_summary)
        schedule.every().sunday.at("10:00").do(self._send_weekly_stats)
        schedule.every().hour.do(self._check_achievements)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.scheduler_thread = threading.Thread(target=self._run_scheduler, daemon=True)
        self.scheduler_thread.start()
        
        logger.info("–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        self.running = False
        schedule.clear()
        logger.info("–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def _run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while self.running:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    async def _send_daily_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            all_users = self.db.get_all_users()
            
            for user in all_users:
                if not user.settings.reminder_enabled:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
                active_tasks = [t for t in user.tasks.values() if t.status.value == "active"]
                
                if not active_tasks:
                    continue
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                reminder_text = f"üåÖ **–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!**\n\n"
                reminder_text += f"–£ –≤–∞—Å {len(active_tasks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                
                for i, task in enumerate(active_tasks[:5], 1):
                    reminder_text += f"{i}. {task.title}\n"
                
                if len(active_tasks) > 5:
                    reminder_text += f"... –∏ –µ—â–µ {len(active_tasks) - 5} –∑–∞–¥–∞—á\n"
                
                reminder_text += f"\nüí™ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                await self.app.bot.send_message(
                    chat_id=user.user_id,
                    text=reminder_text,
                    parse_mode='Markdown'
                )
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.1)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    async def _send_evening_summary(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–π —Å–≤–æ–¥–∫–∏"""
        try:
            all_users = self.db.get_all_users()
            today = datetime.now().date()
            
            for user in all_users:
                if not user.settings.reminder_enabled:
                    continue
                
                # –°—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á–∏
                completed_today = 0
                total_active = 0
                
                for task in user.tasks.values():
                    if task.status.value == "active":
                        total_active += 1
                        for completion in task.completions:
                            if completion.date == today and completion.completed:
                                completed_today += 1
                                break
                
                if total_active == 0:
                    continue
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
                completion_rate = (completed_today / total_active) * 100
                
                if completion_rate == 100:
                    emoji = "üèÜ"
                    message = "–ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å!"
                elif completion_rate >= 80:
                    emoji = "üî•"
                    message = "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
                elif completion_rate >= 60:
                    emoji = "üëç"
                    message = "–•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å!"
                elif completion_rate >= 40:
                    emoji = "üìà"
                    message = "–ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å"
                else:
                    emoji = "üí™"
                    message = "–ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å!"
                
                summary_text = f"üåÜ **–ò—Ç–æ–≥–∏ –¥–Ω—è**\n\n"
                summary_text += f"{emoji} {message}\n\n"
                summary_text += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_today}/{total_active} –∑–∞–¥–∞—á ({completion_rate:.0f}%)\n\n"
                
                if completion_rate > 0:
                    summary_text += f"{random.choice(MOTIVATIONAL_MESSAGES)}"
                else:
                    summary_text += "–ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å! üåü"
                
                await self.app.bot.send_message(
                    chat_id=user.user_id,
                    text=summary_text,
                    parse_mode='Markdown'
                )
                
                await asyncio.sleep(0.1)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–π —Å–≤–æ–¥–∫–∏: {e}")
    
    async def _send_weekly_stats(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            all_users = self.db.get_all_users()
            
            for user in all_users:
                if not user.settings.weekly_stats:
                    continue
                
                # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
                week_completions = 0
                today = datetime.now().date()
                week_start = today - datetime.timedelta(days=7)
                
                for task in user.tasks.values():
                    for completion in task.completions:
                        if completion.date >= week_start and completion.completed:
                            week_completions += 1
                
                # –°—á–∏—Ç–∞–µ–º streak'–∏
                current_streaks = [task.current_streak for task in user.tasks.values() 
                                 if task.status.value == "active"]
                max_streak = max(current_streaks) if current_streaks else 0
                avg_streak = sum(current_streaks) / len(current_streaks) if current_streaks else 0
                
                stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é**\n\n"
                stats_text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {week_completions}\n"
                stats_text += f"üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π streak: {max_streak} –¥–Ω–µ–π\n"
                stats_text += f"üìà –°—Ä–µ–¥–Ω–∏–π streak: {avg_streak:.1f} –¥–Ω–µ–π\n\n"
                
                if week_completions > 0:
                    stats_text += "üéØ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!\n"
                    stats_text += "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–º–ø! üí™"
                else:
                    stats_text += "üí° –ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!\n"
                    stats_text += "–ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –Ω–∞—Ä–∞—â–∏–≤–∞–π—Ç–µ —Ç–µ–º–ø! üåü"
                
                await self.app.bot.send_message(
                    chat_id=user.user_id,
                    text=stats_text,
                    parse_mode='Markdown'
                )
                
                await asyncio.sleep(0.1)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def _check_achievements(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        try:
            all_users = self.db.get_all_users()
            
            for user in all_users:
                if not user.settings.motivational_messages:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                new_achievements = check_achievements(user, self.db)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
                for achievement in new_achievements:
                    await self.app.bot.send_message(
                        chat_id=user.user_id,
                        text=f"üèÜ **–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!**\n\n{achievement}",
                        parse_mode='Markdown'
                    )
                    await asyncio.sleep(0.5)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminder_system = None

def setup_reminder_system(app, db):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    global reminder_system
    reminder_system = ReminderSystem(app, db)
    reminder_system.start()
    return reminder_system

def stop_reminder_system():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    global reminder_system
    if reminder_system:
        reminder_system.stop()

# ===== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ main.py –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π =====
# –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å DailyCheckBot:

async def setup_with_reminders(self):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await self.setup()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    from handlers.reminders import setup_reminder_system
    self.reminder_system = setup_reminder_system(self.application, self.db)

async def stop_with_reminders(self):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    from handlers.reminders import stop_reminder_system
    stop_reminder_system()
    await self.stop()

# ===== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements.txt =====
# –î–æ–±–∞–≤–∏—Ç—å –≤ requirements.txt:
# schedule==1.2.0

# ===== –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π =====
# models/achievement.py

from dataclasses import dataclass
from datetime import datetime
from typing import Optional

@dataclass 
class Achievement:
    """–ú–æ–¥–µ–ª—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    achievement_id: str
    title: str
    description: str
    icon: str
    condition: str  # –£—Å–ª–æ–≤–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è
    earned_at: Optional[datetime] = None
    
    @property
    def is_earned(self) -> bool:
        return self.earned_at is not None

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
ACHIEVEMENTS_DATA = {
    'first_task': Achievement(
        achievement_id='first_task',
        title='–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
        description='–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É',
        icon='üéØ',
        condition='–°–æ–∑–¥–∞—Ç—å 1 –∑–∞–¥–∞—á—É'
    ),
    'streak_7': Achievement(
        achievement_id='streak_7', 
        title='–ù–µ–¥–µ–ª—è —Å–∏–ª—ã',
        description='–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ streak 7 –¥–Ω–µ–π',
        icon='üî•',
        condition='–î–æ—Å—Ç–∏—á—å streak 7 –¥–Ω–µ–π'
    ),
    'streak_30': Achievement(
        achievement_id='streak_30',
        title='–ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫',
        description='–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ streak 30 –¥–Ω–µ–π',
        icon='üíé',
        condition='–î–æ—Å—Ç–∏—á—å streak 30 –¥–Ω–µ–π'
    ),
    'streak_100': Achievement(
        achievement_id='streak_100',
        title='–õ–µ–≥–µ–Ω–¥–∞',
        description='–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ streak 100 –¥–Ω–µ–π',
        icon='üëë',
        condition='–î–æ—Å—Ç–∏—á—å streak 100 –¥–Ω–µ–π'
    ),
    'tasks_10': Achievement(
        achievement_id='tasks_10',
        title='–ù–∞—á–∏–Ω–∞—é—â–∏–π',
        description='–í—ã–ø–æ–ª–Ω–∏—Ç–µ 10 –∑–∞–¥–∞—á',
        icon='üìà',
        condition='–í—ã–ø–æ–ª–Ω–∏—Ç—å 10 –∑–∞–¥–∞—á'
    ),
    'tasks_50': Achievement(
        achievement_id='tasks_50',
        title='–≠–Ω—Ç—É–∑–∏–∞—Å—Ç',
        description='–í—ã–ø–æ–ª–Ω–∏—Ç–µ 50 –∑–∞–¥–∞—á',
        icon='üèÜ',
        condition='–í—ã–ø–æ–ª–Ω–∏—Ç—å 50 –∑–∞–¥–∞—á'
    ),
    'tasks_100': Achievement(
        achievement_id='tasks_100',
        title='–ß–µ–º–ø–∏–æ–Ω',
        description='–í—ã–ø–æ–ª–Ω–∏—Ç–µ 100 –∑–∞–¥–∞—á',
        icon='üåü',
        condition='–í—ã–ø–æ–ª–Ω–∏—Ç—å 100 –∑–∞–¥–∞—á'
    )
}
