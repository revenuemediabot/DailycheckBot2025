# handlers/commands/tasks.py

import logging
from datetime import datetime, timedelta
from typing import List, Optional
from telegram.ext import Application, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters, CallbackQueryHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π –∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
try:
    from models.task import Task
    from models.user import User
    from services.task_service import TaskService
    from services.data_service import DataService
    from shared.config import Config
except ImportError as e:
    logging.warning(f"Import error: {e}. Using fallback imports.")
    # Fallback –¥–ª—è —Å–ª—É—á–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–æ–¥—É–ª–µ–π
    Task = None
    User = None
    TaskService = None
    DataService = None
    Config = None

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler
WAITING_TASK_TITLE, WAITING_TASK_PRIORITY, WAITING_TASK_DEADLINE = range(3)
EDIT_TASK_SELECT, EDIT_TASK_FIELD, EDIT_TASK_VALUE = range(3, 6)

class TaskHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    
    def __init__(self):
        self.task_service = TaskService() if TaskService else None
        self.data_service = DataService() if DataService else None
    
    async def tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = update.effective_user.id
            
            if not self.task_service:
                await update.message.reply_text("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tasks = await self.task_service.get_user_tasks(user_id)
            
            if not tasks:
                await update.message.reply_text(
                    "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É: /addtask [–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏]"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            message = "üìã **–í–∞—à–∏ –∑–∞–¥–∞—á–∏:**\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            high_priority = [t for t in tasks if t.priority == "high"]
            medium_priority = [t for t in tasks if t.priority == "medium"]
            low_priority = [t for t in tasks if t.priority == "low"]
            
            for priority_group, emoji, title in [
                (high_priority, "üî¥", "–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"),
                (medium_priority, "üü°", "–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"),
                (low_priority, "üü¢", "–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
            ]:
                if priority_group:
                    message += f"{emoji} **{title}:**\n"
                    for task in priority_group:
                        status = "‚úÖ" if task.completed else "‚≠ï"
                        deadline_str = ""
                        if task.deadline:
                            deadline_str = f" (–¥–æ {task.deadline.strftime('%d.%m')})"
                        message += f"{status} {task.id}. {task.title}{deadline_str}\n"
                    message += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task")],
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_tasks"),
                 InlineKeyboardButton("üóë –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ", callback_data="reset_tasks")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="task_stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in tasks_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.")
    
    async def addtask_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        try:
            user_id = update.effective_user.id
            
            if not self.task_service:
                await update.message.reply_text("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            if context.args:
                task_title = " ".join(context.args)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                task = Task(
                    title=task_title,
                    user_id=user_id,
                    priority="medium",
                    created_at=datetime.now()
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
                task_id = await self.task_service.create_task(task)
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                keyboard = [
                    [InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"set_priority_high_{task_id}"),
                     InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data=f"set_priority_medium_{task_id}"),
                     InlineKeyboardButton("üü¢ –ù–∏–∑–∫–∏–π", callback_data=f"set_priority_low_{task_id}")],
                    [InlineKeyboardButton("üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data=f"set_deadline_{task_id}")],
                    [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="close_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    f"‚úÖ **–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:**\n"
                    f"üìù {task_title}\n"
                    f"üÜî ID: {task_id}\n"
                    f"üü° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å—Ä–µ–¥–Ω–∏–π\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã?",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
            else:
                # –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                await update.message.reply_text(
                    "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
                )
                return WAITING_TASK_TITLE
                
        except Exception as e:
            logger.error(f"Error in addtask_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
    
    async def settasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        try:
            user_id = update.effective_user.id
            
            if not context.args:
                await update.message.reply_text(
                    "üìã **–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á**\n\n"
                    "–§–æ—Ä–º–∞—Ç: `/settasks –∑–∞–¥–∞—á–∞1; –∑–∞–¥–∞—á–∞2; –∑–∞–¥–∞—á–∞3`\n"
                    "–ü—Ä–∏–º–µ—Ä: `/settasks –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ; –°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É; –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ`\n\n"
                    "–í—Å–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–æ —Å—Ä–µ–¥–Ω–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º."
                )
                return
            
            # –ü–∞—Ä—Å–∏–º –∑–∞–¥–∞—á–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            tasks_text = " ".join(context.args)
            task_titles = [title.strip() for title in tasks_text.split(';') if title.strip()]
            
            if not task_titles:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–¥–∞—á–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
                return
            
            if not self.task_service:
                await update.message.reply_text("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
            created_tasks = []
            for title in task_titles:
                task = Task(
                    title=title,
                    user_id=user_id,
                    priority="medium",
                    created_at=datetime.now()
                )
                task_id = await self.task_service.create_task(task)
                created_tasks.append((task_id, title))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            message = f"‚úÖ **–î–æ–±–∞–≤–ª–µ–Ω–æ {len(created_tasks)} –∑–∞–¥–∞—á:**\n\n"
            for task_id, title in created_tasks:
                message += f"üìù {task_id}. {title}\n"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in settasks_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–¥–∞—á.")
    
    async def edit_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á"""
        try:
            user_id = update.effective_user.id
            
            if not self.task_service:
                await update.message.reply_text("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tasks = await self.task_service.get_user_tasks(user_id)
            
            if not tasks:
                await update.message.reply_text("üìù –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
            keyboard = []
            for task in tasks[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–¥–∞—á
                status = "‚úÖ" if task.completed else "‚≠ï"
                keyboard.append([InlineKeyboardButton(
                    f"{status} {task.title}",
                    callback_data=f"edit_task_{task.id}"
                )])
            
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_menu")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚úèÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error in edit_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    
    async def reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        try:
            user_id = update.effective_user.id
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data=f"confirm_reset_{user_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**\n\n"
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–¥–∞—á–∏?\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error in reset_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    async def addsub_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É"""
        try:
            if not context.args:
                await update.message.reply_text(
                    "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏**\n\n"
                    "–§–æ—Ä–º–∞—Ç: `/addsub [ID –∑–∞–¥–∞—á–∏] [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏]`\n"
                    "–ü—Ä–∏–º–µ—Ä: `/addsub 1 –ö—É–ø–∏—Ç—å —Ö–ª–µ–±`"
                )
                return
            
            if len(context.args) < 2:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏.")
                return
            
            task_id = context.args[0]
            subtask_title = " ".join(context.args[1:])
            user_id = update.effective_user.id
            
            if not self.task_service:
                await update.message.reply_text("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
            main_task = await self.task_service.get_task(task_id, user_id)
            if not main_task:
                await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É
            subtask = Task(
                title=subtask_title,
                user_id=user_id,
                parent_id=task_id,
                priority=main_task.priority,
                created_at=datetime.now()
            )
            
            subtask_id = await self.task_service.create_task(subtask)
            
            await update.message.reply_text(
                f"‚úÖ **–ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:**\n"
                f"üìù {subtask_title}\n"
                f"üîó –ö –∑–∞–¥–∞—á–µ: {main_task.title}\n"
                f"üÜî ID –ø–æ–¥–∑–∞–¥–∞—á–∏: {subtask_id}",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error in addsub_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏.")
    
    async def complete_task_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        try:
            if not context.args:
                await update.message.reply_text(
                    "‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏**\n\n"
                    "–§–æ—Ä–º–∞—Ç: `/complete [ID –∑–∞–¥–∞—á–∏]`\n"
                    "–ü—Ä–∏–º–µ—Ä: `/complete 1`"
                )
                return
            
            task_id = context.args[0]
            user_id = update.effective_user.id
            
            if not self.task_service:
                await update.message.reply_text("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            
            success = await self.task_service.complete_task(task_id, user_id)
            
            if success:
                task = await self.task_service.get_task(task_id, user_id)
                await update.message.reply_text(
                    f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n"
                    f"–ó–∞–¥–∞—á–∞ '{task.title}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n"
                    f"‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
                )
            else:
                await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
                
        except Exception as e:
            logger.error(f"Error in complete_task_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è ConversationHandler
    async def handle_task_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            task_title = update.message.text.strip()
            
            if len(task_title) > 100:
                await update.message.reply_text(
                    "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).\n"
                    "–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
                )
                return WAITING_TASK_TITLE
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['new_task_title'] = task_title
            
            # –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            keyboard = [
                [InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="priority_high")],
                [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="priority_medium")],
                [InlineKeyboardButton("üü¢ –ù–∏–∑–∫–∏–π", callback_data="priority_low")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üìù **–ó–∞–¥–∞—á–∞:** {task_title}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return WAITING_TASK_PRIORITY
            
        except Exception as e:
            logger.error(f"Error in handle_task_title: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        try:
            query = update.callback_query
            await query.answer()
            
            data = query.data
            user_id = update.effective_user.id
            
            if data == "close_menu":
                await query.edit_message_text("‚úÖ –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ.")
                
            elif data.startswith("set_priority_"):
                parts = data.split("_")
                priority = parts[2]
                task_id = parts[3]
                
                if self.task_service:
                    await self.task_service.update_task_priority(task_id, user_id, priority)
                    priority_emoji = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}
                    await query.edit_message_text(
                        f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {priority_emoji[priority]} {priority}"
                    )
                
            elif data.startswith("edit_task_"):
                task_id = data.split("_")[2]
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
                await self.show_edit_task_menu(query, task_id, user_id)
                
            elif data.startswith("confirm_reset_"):
                if self.task_service:
                    await self.task_service.reset_user_tasks(user_id)
                    await query.edit_message_text("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.")
                
        except Exception as e:
            logger.error(f"Error in handle_callback_query: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    async def show_edit_task_menu(self, query, task_id: str, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            if not self.task_service:
                await query.edit_message_text("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            
            task = await self.task_service.get_task(task_id, user_id)
            if not task:
                await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if task.completed else "‚≠ï –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
            priority_emoji = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}
            
            keyboard = [
                [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{task_id}")],
                [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"edit_priority_{task_id}")],
                [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data=f"edit_deadline_{task_id}")],
                [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π" if not task.completed else "‚≠ï –û—Ç–º–µ—Ç–∏—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π", 
                                    callback_data=f"toggle_complete_{task_id}")],
                [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"delete_task_{task_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_tasks")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id}:**\n\n"
                f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task.title}\n"
                f"üéØ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {priority_emoji.get(task.priority, 'üü°')} {task.priority}\n"
                f"üìä **–°—Ç–∞—Ç—É—Å:** {status}\n"
                f"üìÖ **–°–æ–∑–¥–∞–Ω–∞:** {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"{'üìÖ **–î–µ–¥–ª–∞–π–Ω:** ' + task.deadline.strftime('%d.%m.%Y') if task.deadline else ''}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error in show_edit_task_menu: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
task_handlers = TaskHandlers()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
async def tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await task_handlers.tasks_command(update, context)

async def addtask_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await task_handlers.addtask_command(update, context)

async def settasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await task_handlers.settasks_command(update, context)

async def edit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await task_handlers.edit_command(update, context)

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await task_handlers.reset_command(update, context)

async def addsub_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await task_handlers.addsub_command(update, context)

async def complete_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await task_handlers.complete_task_command(update, context)

def register_task_handlers(application: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞—á"""
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("tasks", tasks_command))
        application.add_handler(CommandHandler("addtask", addtask_command))
        application.add_handler(CommandHandler("settasks", settasks_command))
        application.add_handler(CommandHandler("edit", edit_command))
        application.add_handler(CommandHandler("reset", reset_command))
        application.add_handler(CommandHandler("addsub", addsub_command))
        application.add_handler(CommandHandler("complete", complete_task_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(task_handlers.handle_callback_query))
        
        # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –¥–∏–∞–ª–æ–≥–µ
        conversation_handler = ConversationHandler(
            entry_points=[CommandHandler("addtask", addtask_command)],
            states={
                WAITING_TASK_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_handlers.handle_task_title)],
                WAITING_TASK_PRIORITY: [CallbackQueryHandler(task_handlers.handle_callback_query)],
            },
            fallbacks=[CommandHandler("cancel", lambda update, context: ConversationHandler.END)]
        )
        
        application.add_handler(conversation_handler)
        
        logger.info("Task handlers registered successfully")
        
    except Exception as e:
        logger.error(f"Error registering task handlers: {e}")
