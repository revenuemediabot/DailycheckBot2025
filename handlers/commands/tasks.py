# handlers/commands/tasks.py

import logging
import uuid
from datetime import datetime, timedelta
from typing import List, Optional
from telegram.ext import Application, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters, CallbackQueryHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from services.task_service import get_task_service, TaskService, Task, AchievementSystem
from services.data_service import get_data_service, DataService

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler
WAITING_TASK_TITLE, WAITING_TASK_PRIORITY, WAITING_TASK_DEADLINE = range(3)
EDIT_TASK_SELECT, EDIT_TASK_FIELD, EDIT_TASK_VALUE = range(3, 6)

class TaskHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        self.task_service = get_task_service()
        self.data_service = get_data_service()
        logger.info("‚úÖ TaskHandlers –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏")
    
    async def tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = update.effective_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            tasks = await self.task_service.get_user_tasks(user_id, status_filter="active")
            
            if not tasks:
                await update.message.reply_text(
                    "üìù **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!**\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É:\n"
                    "‚Ä¢ –ö–Ω–æ–ø–∫–∞ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'\n"
                    "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ `/add`\n"
                    "‚Ä¢ –ë—ã—Å—Ç—Ä–æ: `/addtask –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏`",
                    parse_mode='Markdown'
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            message = f"üìã **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({len(tasks)}):**\n\n"
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
            completed_today = len([t for t in tasks if t.is_completed_today()])
            completion_percentage = (completed_today / len(tasks)) * 100
            
            message += f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–µ–≥–æ–¥–Ω—è:** {completed_today}/{len(tasks)} ({completion_percentage:.0f}%)\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            high_priority = [t for t in tasks if t.priority == "high"]
            medium_priority = [t for t in tasks if t.priority == "medium"]
            low_priority = [t for t in tasks if t.priority == "low"]
            
            for priority_group, emoji, title in [
                (high_priority, "üî¥", "–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"),
                (medium_priority, "üü°", "–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"),
                (low_priority, "üü¢", "–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
            ]:
                if priority_group:
                    message += f"{emoji} **{title}:**\n"
                    for task in priority_group[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
                        status = "‚úÖ" if task.is_completed_today() else "‚≠ï"
                        streak_info = f" üî•{task.current_streak}" if task.current_streak > 0 else ""
                        message += f"{status} `{task.task_id[:8]}` {task.title[:30]}{streak_info}\n"
                    
                    if len(priority_group) > 5:
                        message += f"... –∏ –µ—â–µ {len(priority_group) - 5}\n"
                    message += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task_dialog")],
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_tasks_menu"),
                 InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="task_stats_detailed")],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="tasks_refresh")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ tasks_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.")
    
    async def addtask_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        try:
            user_id = update.effective_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            if context.args:
                task_title = " ".join(context.args)
                
                if len(task_title) > 100:
                    await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).")
                    return
                
                if len(task_title) < 3:
                    await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞).")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                task_id = await self.task_service.create_task(
                    user_id=user_id,
                    title=task_title,
                    category="personal",
                    priority="medium"
                )
                
                if task_id:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    task = await self.task_service.get_task(user_id, task_id)
                    
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    keyboard = [
                        [InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"set_priority_high_{task_id}"),
                         InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data=f"set_priority_medium_{task_id}"),
                         InlineKeyboardButton("üü¢ –ù–∏–∑–∫–∏–π", callback_data=f"set_priority_low_{task_id}")],
                        [InlineKeyboardButton("üíº –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"set_category_{task_id}"),
                         InlineKeyboardButton("‚è±Ô∏è –í—Ä–µ–º—è", callback_data=f"set_time_{task_id}")],
                        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="close_menu")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        f"‚úÖ **–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
                        f"üìù {task_title}\n"
                        f"üÜî ID: `{task_id[:8]}`\n"
                        f"üü° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å—Ä–µ–¥–Ω–∏–π\n"
                        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ª–∏—á–Ω–æ–µ\n\n"
                        f"üí° –•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã?",
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.")
                
            else:
                # –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                await update.message.reply_text(
                    "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
                    "üí° **–ë—ã—Å—Ç—Ä–æ:** `/addtask –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏`\n\n"
                    "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
                )
                return WAITING_TASK_TITLE
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ addtask_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
    
    async def settasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        try:
            user_id = update.effective_user.id
            
            if not context.args:
                await update.message.reply_text(
                    "üìã **–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á**\n\n"
                    "**–§–æ—Ä–º–∞—Ç:** `/settasks –∑–∞–¥–∞—á–∞1; –∑–∞–¥–∞—á–∞2; –∑–∞–¥–∞—á–∞3`\n\n"
                    "**–ü—Ä–∏–º–µ—Ä:** \n"
                    "`/settasks –í—ã–ø–∏—Ç—å –≤–æ–¥—É; –°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É; –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É`\n\n"
                    "–í—Å–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–æ —Å—Ä–µ–¥–Ω–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ª–∏—á–Ω–æ–µ'.",
                    parse_mode='Markdown'
                )
                return
            
            # –ü–∞—Ä—Å–∏–º –∑–∞–¥–∞—á–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            tasks_text = " ".join(context.args)
            task_titles = [title.strip() for title in tasks_text.split(';') if title.strip()]
            
            if not task_titles:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–¥–∞—á–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
                return
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
            if len(task_titles) > 10:
                task_titles = task_titles[:10]
                await update.message.reply_text("‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ 10 –∑–∞–¥–∞—á –∑–∞ —Ä–∞–∑.")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            created_task_ids = await self.task_service.bulk_create_tasks(
                user_id=user_id,
                task_titles=task_titles,
                default_category="personal"
            )
            
            if created_task_ids:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                message = f"‚úÖ **–°–æ–∑–¥–∞–Ω–æ {len(created_task_ids)} –∑–∞–¥–∞—á:**\n\n"
                
                for i, (task_id, title) in enumerate(zip(created_task_ids, task_titles), 1):
                    message += f"{i}. `{task_id[:8]}` {title}\n"
                
                message += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tasks –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
                
                await update.message.reply_text(message, parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏.")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ settasks_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á.")
    
    async def edit_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á"""
        try:
            user_id = update.effective_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tasks = await self.task_service.get_user_tasks(user_id, status_filter="active")
            
            if not tasks:
                await update.message.reply_text(
                    "üìù **–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.**\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é:\n"
                    "‚Ä¢ /add - –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ\n"
                    "‚Ä¢ /addtask - –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
            keyboard = []
            for task in tasks[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–¥–∞—á
                status = "‚úÖ" if task.is_completed_today() else "‚≠ï"
                priority_emoji = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}.get(task.priority, "üü°")
                
                button_text = f"{status} {priority_emoji} {task.title[:25]}"
                keyboard.append([InlineKeyboardButton(
                    button_text,
                    callback_data=f"edit_task_{task.task_id}"
                )])
            
            if len(tasks) > 10:
                keyboard.append([InlineKeyboardButton(f"... –∏ –µ—â–µ {len(tasks) - 10} –∑–∞–¥–∞—á", callback_data="show_more_tasks")])
            
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_menu")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úèÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n"
                f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(tasks)}",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ edit_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    
    async def reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        try:
            user_id = update.effective_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
            tasks = await self.task_service.get_user_tasks(user_id)
            task_count = len(tasks)
            
            if task_count == 0:
                await update.message.reply_text("üìù –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Å–±—Ä–æ—Å–∞.")
                return
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            keyboard = [
                [InlineKeyboardButton("üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ", callback_data=f"confirm_archive_{user_id}")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data=f"confirm_delete_{user_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**\n\n"
                f"–£ –≤–∞—Å {task_count} –∑–∞–¥–∞—á.\n\n"
                f"**–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ** - –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç —Å–∫—Ä—ã—Ç—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n"
                f"**–£–¥–∞–ª–µ–Ω–∏–µ** - –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞\n\n"
                f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ reset_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    async def addsub_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É"""
        try:
            if not context.args:
                await update.message.reply_text(
                    "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏**\n\n"
                    "**–§–æ—Ä–º–∞—Ç:** `/addsub [ID_–∑–∞–¥–∞—á–∏] [–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–æ–¥–∑–∞–¥–∞—á–∏]`\n\n"
                    "**–ü—Ä–∏–º–µ—Ä:** `/addsub abc123 –ö—É–ø–∏—Ç—å —Ö–ª–µ–±`\n\n"
                    "üí° ID –∑–∞–¥–∞—á–∏ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ /tasks"
                )
                return
            
            if len(context.args) < 2:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏.")
                return
            
            user_id = update.effective_user.id
            task_id_input = context.args[0]
            subtask_title = " ".join(context.args[1:])
            
            # –ò—â–µ–º –∑–∞–¥–∞—á—É –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É ID
            all_tasks = await self.task_service.get_user_tasks(user_id)
            matching_task = None
            
            for task in all_tasks:
                if task.task_id.startswith(task_id_input) or task_id_input in task.task_id:
                    matching_task = task
                    break
            
            if not matching_task:
                await update.message.reply_text(
                    f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID `{task_id_input}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tasks –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö ID.",
                    parse_mode='Markdown'
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            subtask_id = await self.task_service.add_subtask(
                user_id=user_id,
                task_id=matching_task.task_id,
                subtitle=subtask_title
            )
            
            if subtask_id:
                await update.message.reply_text(
                    f"‚úÖ **–ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
                    f"üìù {subtask_title}\n"
                    f"üîó –ö –∑–∞–¥–∞—á–µ: {matching_task.title}\n"
                    f"üÜî ID –ø–æ–¥–∑–∞–¥–∞—á–∏: `{subtask_id[:8]}`\n\n"
                    f"üí° –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏ —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏ –≤ /tasks",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏.")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ addsub_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏.")
    
    async def complete_task_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        try:
            if not context.args:
                await update.message.reply_text(
                    "‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏**\n\n"
                    "**–§–æ—Ä–º–∞—Ç:** `/complete [ID_–∑–∞–¥–∞—á–∏]`\n\n"
                    "**–ü—Ä–∏–º–µ—Ä:** `/complete abc123`\n\n"
                    "üí° ID –∑–∞–¥–∞—á–∏ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ /tasks"
                )
                return
            
            user_id = update.effective_user.id
            task_id_input = context.args[0]
            
            # –ò—â–µ–º –∑–∞–¥–∞—á—É –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É ID
            all_tasks = await self.task_service.get_user_tasks(user_id)
            matching_task = None
            
            for task in all_tasks:
                if task.task_id.startswith(task_id_input) or task_id_input in task.task_id:
                    matching_task = task
                    break
            
            if not matching_task:
                await update.message.reply_text(
                    f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID `{task_id_input}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    parse_mode='Markdown'
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ
            if matching_task.is_completed_today():
                await update.message.reply_text(
                    f"‚úÖ –ó–∞–¥–∞—á–∞ '{matching_task.title}' —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n\n"
                    f"üî• –¢–µ–∫—É—â–∏–π streak: {matching_task.current_streak} –¥–Ω–µ–π"
                )
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            success = await self.task_service.complete_task(
                user_id=user_id,
                task_id=matching_task.task_id
            )
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                updated_task = await self.task_service.get_task(user_id, matching_task.task_id)
                
                await update.message.reply_text(
                    f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n"
                    f"‚úÖ {updated_task.title}\n"
                    f"üî• Streak: {updated_task.current_streak} –¥–Ω–µ–π\n"
                    f"‚≠ê +{updated_task.xp_value} XP\n\n"
                    f"üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ complete_task_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
    
    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø CONVERSATIONHANDLER =====
    
    async def handle_task_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            task_title = update.message.text.strip()
            
            if len(task_title) > 100:
                await update.message.reply_text(
                    "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).\n"
                    "–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
                )
                return WAITING_TASK_TITLE
            
            if len(task_title) < 3:
                await update.message.reply_text(
                    "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞).\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return WAITING_TASK_TITLE
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['new_task_title'] = task_title
            
            # –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            keyboard = [
                [InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="priority_high")],
                [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="priority_medium")],
                [InlineKeyboardButton("üü¢ –ù–∏–∑–∫–∏–π", callback_data="priority_low")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üìù **–ó–∞–¥–∞—á–∞:** {task_title}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return WAITING_TASK_PRIORITY
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_task_title: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return ConversationHandler.END
    
    # ===== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö =====
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        try:
            query = update.callback_query
            await query.answer()
            
            data = query.data
            user_id = update.effective_user.id
            
            if data == "close_menu":
                await query.edit_message_text("‚úÖ –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ.")
                
            elif data.startswith("set_priority_"):
                await self._handle_priority_change(query, data, user_id)
                
            elif data.startswith("edit_task_"):
                await self._handle_task_edit(query, data, user_id)
                
            elif data.startswith("confirm_archive_"):
                await self._handle_archive_confirm(query, user_id)
                
            elif data.startswith("confirm_delete_"):
                await self._handle_delete_confirm(query, user_id)
                
            elif data == "tasks_refresh":
                await self._handle_tasks_refresh(query, user_id)
                
            elif data == "task_stats_detailed":
                await self._handle_task_stats(query, user_id)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_callback_query: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    async def _handle_priority_change(self, query, data: str, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        try:
            parts = data.split("_")
            priority = parts[2]  # high, medium, low
            task_id = parts[3]
            
            success = await self.task_service.update_task(
                user_id=user_id,
                task_id=task_id,
                priority=priority
            )
            
            if success:
                priority_emoji = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}
                priority_names = {"high": "–≤—ã—Å–æ–∫–∏–π", "medium": "—Å—Ä–µ–¥–Ω–∏–π", "low": "–Ω–∏–∑–∫–∏–π"}
                
                await query.edit_message_text(
                    f"‚úÖ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑–º–µ–Ω–µ–Ω!**\n\n"
                    f"üéØ –ù–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_emoji[priority]} {priority_names[priority]}",
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    async def _handle_task_edit(self, query, data: str, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        try:
            task_id = data.replace("edit_task_", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
            task = await self.task_service.get_task(user_id, task_id)
            if not task:
                await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await self._show_edit_task_menu(query, task, user_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    async def _show_edit_task_menu(self, query, task: Task, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è" if task.is_completed_today() else "‚≠ï –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            priority_emoji = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}
            category_emoji = {
                "work": "üíº", "health": "üèÉ", "learning": "üìö",
                "personal": "üë§", "finance": "üí∞"
            }
            
            keyboard = [
                [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"edit_priority_{task.task_id}")],
                [InlineKeyboardButton("üìÇ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"edit_category_{task.task_id}")],
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É", callback_data=f"add_subtask_{task.task_id}")],
                [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å" if not task.is_completed_today() else "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", 
                                    callback_data=f"toggle_complete_{task.task_id}")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"task_stats_{task.task_id}")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_task_{task.task_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_tasks")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message = f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:**\n\n"
            message += f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task.title}\n"
            message += f"üéØ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {priority_emoji.get(task.priority, 'üü°')} {task.priority}\n"
            message += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category_emoji.get(task.category, 'üìã')} {task.category}\n"
            message += f"üìä **–°—Ç–∞—Ç—É—Å:** {status}\n"
            message += f"üî• **Streak:** {task.current_streak} –¥–Ω–µ–π\n"
            message += f"üìÖ **–°–æ–∑–¥–∞–Ω–∞:** {datetime.fromisoformat(task.created_at).strftime('%d.%m.%Y')}\n"
            
            if task.subtasks:
                message += f"üìã **–ü–æ–¥–∑–∞–¥–∞—á–∏:** {task.subtasks_completed_count}/{task.subtasks_total_count}\n"
            
            if task.tags:
                message += f"üè∑Ô∏è **–¢–µ–≥–∏:** {', '.join(task.tags)}\n"
            
            message += f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    async def _handle_archive_confirm(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            success = await self.task_service.reset_user_tasks(user_id, archive=True)
            
            if success:
                await query.edit_message_text(
                    "üì¶ **–í—Å–µ –∑–∞–¥–∞—á–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!**\n\n"
                    "–ó–∞–¥–∞—á–∏ —Å–∫—Ä—ã—Ç—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n"
                    "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!"
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á.")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    async def _handle_delete_confirm(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            success = await self.task_service.reset_user_tasks(user_id, archive=False)
            
            if success:
                await query.edit_message_text(
                    "üóëÔ∏è **–í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã!**\n\n"
                    "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –∏–ª–∏ /addtask –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è."
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á.")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    async def _handle_tasks_refresh(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /tasks
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
            fake_update = type('Update', (), {
                'effective_user': type('User', (), {'id': user_id})(),
                'message': type('Message', (), {
                    'reply_text': lambda text, **kwargs: query.edit_message_text(text, **kwargs)
                })()
            })()
            
            await self.tasks_command(fake_update, None)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.")
    
    async def _handle_task_stats(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á"""
        try:
            stats = await self.task_service.get_user_task_stats(user_id)
            
            if not stats:
                await query.edit_message_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
                return
            
            message = f"üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:**\n\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            message += f"üìà **–û–±—â–µ–µ:**\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total_tasks']}\n"
            message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_tasks']}\n"
            message += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats['completed_today']}\n"
            message += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats['completion_rate_today']:.1f}%\n\n"
            
            # Streak —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if 'streaks' in stats:
                streaks = stats['streaks']
                message += f"üî• **Streak'–∏:**\n"
                message += f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {streaks['max']} –¥–Ω–µ–π\n"
                message += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π: {streaks['average']:.1f} –¥–Ω–µ–π\n"
                message += f"‚Ä¢ –ó–∞–¥–∞—á —Å–æ streak: {streaks['total_with_streak']}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if 'by_category' in stats:
                message += f"üìÇ **–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**\n"
                category_emoji = {
                    "work": "üíº", "health": "üèÉ", "learning": "üìö",
                    "personal": "üë§", "finance": "üí∞"
                }
                
                for category, cat_stats in stats['by_category'].items():
                    emoji = category_emoji.get(category, "üìã")
                    rate = (cat_stats['completed_today'] / cat_stats['active'] * 100) if cat_stats['active'] > 0 else 0
                    message += f"‚Ä¢ {emoji} {category}: {cat_stats['completed_today']}/{cat_stats['active']} ({rate:.0f}%)\n"
            
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º", callback_data="tasks_refresh")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


# ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† =====

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
task_handlers = TaskHandlers()

# ===== –§–£–ù–ö–¶–ò–ò –î–õÔøΩ–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò (–û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨) =====

async def tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await task_handlers.tasks_command(update, context)

async def addtask_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await task_handlers.addtask_command(update, context)

async def settasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await task_handlers.settasks_command(update, context)

async def edit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await task_handlers.edit_command(update, context)

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await task_handlers.reset_command(update, context)

async def addsub_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await task_handlers.addsub_command(update, context)

async def complete_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await task_handlers.complete_task_command(update, context)

def register_task_handlers(application: Application):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ü–û–õ–ù–´–• –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞—á —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤
    
    ‚úÖ –ü–û–õ–ù–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ:
    - –°–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
    - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å XP –∏ streak'–∞–º–∏  
    - –ü–æ–¥–∑–∞–¥–∞—á–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ–Ω—é
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    - –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    try:
        logger.info("üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ü–û–õ–ù–´–• task handlers —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("tasks", tasks_command))
        application.add_handler(CommandHandler("addtask", addtask_command))
        application.add_handler(CommandHandler("settasks", settasks_command))
        application.add_handler(CommandHandler("edit", edit_command))
        application.add_handler(CommandHandler("reset", reset_command))
        application.add_handler(CommandHandler("addsub", addsub_command))
        application.add_handler(CommandHandler("complete", complete_task_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(task_handlers.handle_callback_query))
        
        # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –¥–∏–∞–ª–æ–≥–µ
        conversation_handler = ConversationHandler(
            entry_points=[CommandHandler("addtask", addtask_command)],
            states={
                WAITING_TASK_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_handlers.handle_task_title)],
                WAITING_TASK_PRIORITY: [CallbackQueryHandler(task_handlers.handle_callback_query)],
            },
            fallbacks=[CommandHandler("cancel", lambda update, context: ConversationHandler.END)]
        )
        
        application.add_handler(conversation_handler)
        
        logger.info("‚úÖ –ü–û–õ–ù–´–ï task handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /tasks, /addtask, /settasks, /edit, /reset, /addsub, /complete")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ task handlers: {e}")
