"""
Dry mode commands (sobriety tracking)
–ö–æ–º–∞–Ω–¥—ã —Ä–µ–∂–∏–º–∞ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏
"""

from aiogram import types
from aiogram.types import Message
from datetime import datetime

from ..utils import log_action, update_user_activity, get_user_data, save_user_data
from ui.keyboards import get_main_menu_keyboard
from ui.themes import get_user_theme
from ui.messages import format_success_message

async def dryon_command(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /dryon - –Ω–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –¥–Ω–µ–π –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è"""
    user_id = message.from_user.id
    
    await update_user_activity(user_id)
    await log_action(user_id, "dryon_command")
    
    theme = await get_user_theme(user_id)
    user_data = await get_user_data(user_id)
    
    dry_mode = user_data.get('dry_mode', {})
    
    if dry_mode.get('active', False):
        # –£–∂–µ –∞–∫—Ç–∏–≤–µ–Ω
        days_count = dry_mode.get('days_count', 0)
        start_date = dry_mode.get('start_date', '')
        
        await message.answer(
            f"üö´üç∫ <b>Dry —Ä–µ–∂–∏–º —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω</b>\n\n"
            f"–î–Ω–µ–π –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è: <b>{days_count}</b>\n"
            f"–ù–∞—á–∞–ª–æ: {start_date}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™",
            reply_markup=get_main_menu_keyboard(theme),
            parse_mode="HTML"
        )
    else:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º
        dry_data = {
            'active': True,
            'start_date': datetime.now().strftime('%d.%m.%Y'),
            'days_count': 1
        }
        
        await save_user_data(user_id, {'dry_mode': dry_data})
        
        await message.answer(
            format_success_message(
                f"üö´üç∫ <b>Dry —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                f"–û—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! –Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –¥–Ω–∏ –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è.\n\n"
                f"<b>–î–µ–Ω—å 1</b> –Ω–∞—á–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è!\n\n"
                f"üí™ –í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!"
            ),
            reply_markup=get_main_menu_keyboard(theme),
            parse_mode="HTML"
        )

async def dryoff_command(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /dryoff - –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç –¥–Ω–µ–π –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è"""
    user_id = message.from_user.id
    
    await update_user_activity(user_id)
    await log_action(user_id, "dryoff_command")
    
    theme = await get_user_theme(user_id)
    user_data = await get_user_data(user_id)
    
    dry_mode = user_data.get('dry_mode', {})
    
    if not dry_mode.get('active', False):
        await message.answer(
            f"‚ÑπÔ∏è Dry —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dryon –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
            reply_markup=get_main_menu_keyboard(theme),
            parse_mode="HTML"
        )
    else:
        days_count = dry_mode.get('days_count', 0)
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º
        dry_data = {
            'active': False,
            'start_date': None,
            'days_count': 0,
            'last_session_days': days_count,
            'last_session_date': datetime.now().strftime('%d.%m.%Y')
        }
        
        await save_user_data(user_id, {'dry_mode': dry_data})
        
        await message.answer(
            f"üö´üç∫ <b>Dry —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{days_count} –¥–Ω–µ–π</b>\n\n"
            f"{'–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ' if days_count >= 7 else '–•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ! üëç'}\n\n"
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
            reply_markup=get_main_menu_keyboard(theme),
            parse_mode="HTML"
        )
