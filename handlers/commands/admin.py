"""
Admin commands
–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
"""

from aiogram import types
from aiogram.types import Message

from ..states import state_manager, UserState
from ..utils import log_action, update_user_activity, check_admin_permissions, get_all_users
from services.broadcast_service import BroadcastService
from services.analytics_service import AnalyticsService
from ui.keyboards import get_main_menu_keyboard
from ui.themes import get_user_theme
from ui.messages import format_error_message

async def broadcast_command(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    user_id = message.from_user.id
    
    await update_user_activity(user_id)
    await log_action(user_id, "broadcast_command")
    
    theme = await get_user_theme(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if not await check_admin_permissions(user_id):
        await message.answer(
            format_error_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."),
            reply_markup=get_main_menu_keyboard(theme),
            parse_mode="HTML"
        )
        return
    
    command_args = message.text.split(' ', 1)
    
    if len(command_args) > 1:
        broadcast_text = command_args[1].strip()
        
        broadcast_service = BroadcastService()
        sent_count = await broadcast_service.send_broadcast(broadcast_text)
        
        await message.answer(
            f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            reply_markup=get_main_menu_keyboard(theme),
            parse_mode="HTML"
        )
        return
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
    state_manager.set_state(user_id, UserState.BROADCAST_ADMIN)
    
    await message.answer(
        f"üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n"
        f"<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel</i>",
        reply_markup=None,
        parse_mode="HTML"
    )

async def stats_global_command(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /stats_global - –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    user_id = message.from_user.id
    
    await update_user_activity(user_id)
    await log_action(user_id, "stats_global_command")
    
    theme = await get_user_theme(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if not await check_admin_permissions(user_id):
        await message.answer(
            format_error_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."),
            reply_markup=get_main_menu_keyboard(theme),
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    analytics_service = AnalyticsService()
    global_stats = await analytics_service.get_global_statistics()
    
    stats_text = f"üåç <b>–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    
    if global_stats:
        stats_text += f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ: {global_stats.get('total_users', 0)}\n"
        stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ (—Å–µ–≥–æ–¥–Ω—è): {global_stats.get('active_today', 0)}\n"
        stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ–¥–µ–ª—è): {global_stats.get('active_week', 0)}\n\n"
        
        stats_text += f"üìù <b>–ó–∞–¥–∞—á–∏:</b>\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {global_stats.get('total_tasks', 0)}\n"
        stats_text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {global_stats.get('completed_tasks', 0)}\n"
        stats_text += f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {global_stats.get('tasks_today', 0)}\n\n"
        
        stats_text += f"üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ: {global_stats.get('total_achievements', 0)}\n\n"
        
        stats_text += f"üìä <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
        stats_text += f"‚Ä¢ –ö–æ–º–∞–Ω–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {global_stats.get('commands_processed', 0)}\n"
        stats_text += f"‚Ä¢ –û—à–∏–±–æ–∫: {global_stats.get('errors_count', 0)}\n"
    else:
        stats_text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    await message.answer(
        stats_text,
        reply_markup=get_main_menu_keyboard(theme),
        parse_mode="HTML"
    )
