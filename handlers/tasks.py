# handlers/tasks.py
"""
üéØ –ü–æ–ª–Ω—ã–π –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è DailycheckBot2025
–í–∫–ª—é—á–∞–µ—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é
"""

import logging
import uuid
import asyncio
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any
from telegram.ext import (
    Application, CommandHandler, ContextTypes, ConversationHandler, 
    MessageHandler, filters, CallbackQueryHandler
)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
try:
    from services.task_service import TaskService
    from services.data_service import DataService  
    from services.gamification_service import GamificationService
    from services.ai_service import AIService
    from models.task import Task
    from models.user import User
    from ui.messages import MessageFormatter
    from ui.keyboards import KeyboardBuilder
    from utils.validators import TaskValidator
    from utils.helpers import format_datetime, parse_duration
except ImportError as e:
    logging.warning(f"‚ö†Ô∏è Import warning in tasks.py: {e}")
    # Fallback –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Ç–∏–ø–æ–≤
    Task = dict
    User = dict

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler
(WAITING_TASK_TITLE, WAITING_TASK_PRIORITY, WAITING_TASK_CATEGORY, 
 WAITING_TASK_DEADLINE, WAITING_TASK_TAGS, WAITING_SUBTASK_TITLE,
 EDIT_TASK_SELECT, EDIT_TASK_FIELD, EDIT_TASK_VALUE) = range(9)

class TaskManager:
    """
    üéØ –ü–æ–ª–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
    ‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–∞–º–∏
    ‚úÖ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è (XP, streak, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)
    ‚úÖ –ü–æ–¥–∑–∞–¥–∞—á–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    ‚úÖ AI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    ‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ–Ω—é
    ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    ‚úÖ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.task_service = None
        self.data_service = None
        self.gamification_service = None
        self.ai_service = None
        self.message_formatter = None
        self.keyboard_builder = None
        self.validator = None
        
        try:
            self.task_service = TaskService()
            self.data_service = DataService()
            self.gamification_service = GamificationService()
            self.ai_service = AIService()
            self.message_formatter = MessageFormatter()
            self.keyboard_builder = KeyboardBuilder()
            self.validator = TaskValidator()
            logger.info("‚úÖ TaskManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å–æ –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TaskManager: {e}")
            # –°–æ–∑–¥–∞–µ–º fallback –æ–±—ä–µ–∫—Ç—ã
            self._init_fallback_services()
    
    def _init_fallback_services(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞"""
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è fallback —Å–µ—Ä–≤–∏—Å—ã")
        
        class FallbackService:
            async def get_user_tasks(self, user_id, **kwargs):
                return []
            async def create_task(self, **kwargs):
                return str(uuid.uuid4())
            async def update_task(self, **kwargs):
                return True
            async def delete_task(self, **kwargs):
                return True
            async def complete_task(self, **kwargs):
                return True
            async def get_task_stats(self, user_id):
                return {"total": 0, "completed": 0, "active": 0}
        
        self.task_service = self.task_service or FallbackService()
        self.data_service = self.data_service or FallbackService()
        self.gamification_service = self.gamification_service or FallbackService()
        self.ai_service = self.ai_service or FallbackService()

    # ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
    
    async def tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        üìã –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
        """
        try:
            user_id = update.effective_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user = await self._get_or_create_user(user_id)
            theme = user.get('theme', 'default')
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            filter_active = context.args and 'all' not in context.args
            tasks = await self.task_service.get_user_tasks(
                user_id, 
                status_filter="active" if filter_active else "all"
            )
            
            if not tasks:
                return await self._show_no_tasks_message(update, theme)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self._calculate_task_stats(tasks, user_id)
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏
            message = await self._format_tasks_message(tasks, stats, theme)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = await self._build_tasks_keyboard(tasks, user_id)
            
            await update.message.reply_text(
                message, 
                reply_markup=keyboard, 
                parse_mode='Markdown'
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            await self._log_user_action(user_id, "view_tasks", {"tasks_count": len(tasks)})
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ tasks_command: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self._get_error_keyboard()
            )
    
    async def addtask_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–±—ã—Å—Ç—Ä–æ –∏–ª–∏ –¥–µ—Ç–∞–ª—å–Ω–æ)
        """
        try:
            user_id = update.effective_user.id
            
            # –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            if context.args:
                return await self._quick_add_task(update, context, user_id)
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥
            return await self._start_detailed_task_creation(update, user_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ addtask_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.")
    
    async def _quick_add_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            task_title = " ".join(context.args).strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not self.validator or not await self.validator.validate_task_title(task_title):
                await update.message.reply_text(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.\n\n"
                    "üìù –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                    "‚Ä¢ –û—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤\n"
                    "‚Ä¢ –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"
                )
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å –ø–æ–º–æ—â—å—é AI
            ai_suggestions = await self._get_ai_task_suggestions(task_title, user_id)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            task_data = {
                'title': task_title,
                'category': ai_suggestions.get('category', 'personal'),
                'priority': ai_suggestions.get('priority', 'medium'),
                'tags': ai_suggestions.get('tags', []),
                'estimated_duration': ai_suggestions.get('duration'),
                'ai_suggested': True
            }
            
            task_id = await self.task_service.create_task(user_id, **task_data)
            
            if task_id:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                task = await self.task_service.get_task(user_id, task_id)
                
                # –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ
                await self.gamification_service.award_xp(
                    user_id, 'task_created', 
                    metadata={'task_id': task_id}
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
                message = await self._format_task_created_message(task, ai_suggestions)
                keyboard = await self._build_new_task_keyboard(task_id)
                
                await update.message.reply_text(
                    message, 
                    reply_markup=keyboard, 
                    parse_mode='Markdown'
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                await self._check_task_achievements(user_id, 'created')
                
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.")
    
    async def settasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        üìã –ú–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        """
        try:
            user_id = update.effective_user.id
            
            if not context.args:
                await update.message.reply_text(
                    "üìã **–ú–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á**\n\n"
                    "**–§–æ—Ä–º–∞—Ç:** `/settasks –∑–∞–¥–∞—á–∞1; –∑–∞–¥–∞—á–∞2; –∑–∞–¥–∞—á–∞3`\n\n"
                    "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                    "‚Ä¢ `/settasks –í—ã–ø–∏—Ç—å –≤–æ–¥—É; –°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É; –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É`\n"
                    "‚Ä¢ `/settasks –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É; –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π; –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç`\n\n"
                    "**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
                    "‚Ä¢ –î–æ 15 –∑–∞–¥–∞—á –∑–∞ —Ä–∞–∑\n"
                    "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
                    "‚Ä¢ AI-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤\n"
                    "‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è",
                    parse_mode='Markdown'
                )
                return
            
            # –ü–∞—Ä—Å–∏–º –∑–∞–¥–∞—á–∏
            tasks_text = " ".join(context.args)
            task_titles = [title.strip() for title in tasks_text.split(';') if title.strip()]
            
            if not task_titles:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–¥–∞—á–∏.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `;` –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á."
                )
                return
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if len(task_titles) > 15:
                task_titles = task_titles[:15]
                await update.message.reply_text(
                    "‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ 15 –∑–∞–¥–∞—á –∑–∞ —Ä–∞–∑.\n"
                    "–û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã."
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_msg = await update.message.reply_text(
                f"‚è≥ –°–æ–∑–¥–∞—é {len(task_titles)} –∑–∞–¥–∞—á...\n"
                f"ü§ñ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç..."
            )
            
            # –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º
            created_tasks = await self._bulk_create_tasks_with_ai(user_id, task_titles)
            
            if created_tasks:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                result_message = await self._format_bulk_creation_result(created_tasks)
                keyboard = self._build_bulk_result_keyboard(len(created_tasks))
                
                await progress_msg.edit_text(
                    result_message,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
                # –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –º–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
                await self.gamification_service.award_xp(
                    user_id, 'bulk_task_creation',
                    metadata={'tasks_count': len(created_tasks)}
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                await self._check_task_achievements(user_id, 'bulk_created', len(created_tasks))
                
            else:
                await progress_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏.")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ settasks_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á.")
    
    async def edit_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
        """
        try:
            user_id = update.effective_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            tasks = await self.task_service.get_user_tasks(user_id, status_filter="active")
            
            if not tasks:
                await update.message.reply_text(
                    "üìù **–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é:\n"
                    "‚Ä¢ `/add` - –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ\n"
                    "‚Ä¢ `/addtask –Ω–∞–∑–≤–∞–Ω–∏–µ` - –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ\n"
                    "‚Ä¢ `/settasks –∑–∞–¥–∞—á–∞1; –∑–∞–¥–∞—á–∞2` - –º–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ",
                    parse_mode='Markdown'
                )
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            grouped_tasks = await self._group_tasks_for_editing(tasks)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            keyboard = await self._build_edit_selection_keyboard(grouped_tasks)
            
            message = await self._format_edit_selection_message(grouped_tasks)
            
            await update.message.reply_text(
                message,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ edit_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    
    async def reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        üîÑ –°–±—Ä–æ—Å –∑–∞–¥–∞—á —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è
        """
        try:
            user_id = update.effective_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
            stats = await self.task_service.get_task_stats(user_id)
            
            if stats.get('total', 0) == 0:
                await update.message.reply_text(
                    "üìù –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Å–±—Ä–æ—Å–∞.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/add` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á."
                )
                return
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–±—Ä–æ—Å–∞
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ", callback_data=f"reset_archive_{user_id}")],
                [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ", callback_data=f"reset_complete_{user_id}")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data=f"reset_delete_{user_id}")],
                [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"reset_progress_{user_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="close_menu")]
            ])
            
            completed_today = stats.get('completed_today', 0)
            active_count = stats.get('active', 0)
            
            await update.message.reply_text(
                f"üîÑ **–°–±—Ä–æ—Å –∑–∞–¥–∞—á**\n\n"
                f"üìä **–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats.get('total', 0)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n"
                f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {completed_today}\n\n"
                f"**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**\n"
                f"üì¶ **–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å** - —Å–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á–∏, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                f"‚úÖ **–ó–∞–≤–µ—Ä—à–∏—Ç—å** - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ\n"
                f"üóëÔ∏è **–£–¥–∞–ª–∏—Ç—å** - —É–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞ (–Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å)\n"
                f"üîÑ **–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å** - –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏, —Å–±—Ä–æ—Å–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ reset_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–±—Ä–æ—Å–∞.")
    
    async def addsub_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ
        """
        try:
            user_id = update.effective_user.id
            
            if not context.args:
                await self._show_addsub_help(update)
                return
            
            if len(context.args) < 2:
                await update.message.reply_text(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/addsub [ID_–∑–∞–¥–∞—á–∏] [–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–æ–¥–∑–∞–¥–∞—á–∏]`"
                )
                return
            
            task_id_input = context.args[0]
            subtask_title = " ".join(context.args[1:])
            
            # –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ ID (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞)
            parent_task = await self._find_task_by_partial_id(user_id, task_id_input)
            
            if not parent_task:
                await update.message.reply_text(
                    f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID `{task_id_input}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                    f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/tasks` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö ID –∑–∞–¥–∞—á.",
                    parse_mode='Markdown'
                )
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏
            if not await self.validator.validate_subtask_title(subtask_title):
                await update.message.reply_text(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏.\n"
                    "–î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2 –¥–æ 80 —Å–∏–º–≤–æ–ª–æ–≤."
                )
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏
            subtask_id = await self.task_service.add_subtask(
                user_id, parent_task['id'], subtask_title
            )
            
            if subtask_id:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É
                updated_task = await self.task_service.get_task(user_id, parent_task['id'])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                message = await self._format_subtask_created_message(
                    updated_task, subtask_title, subtask_id
                )
                
                keyboard = self._build_subtask_management_keyboard(
                    parent_task['id'], subtask_id
                )
                
                await update.message.reply_text(
                    message,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
                # –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏
                await self.gamification_service.award_xp(
                    user_id, 'subtask_created'
                )
                
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏.")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ addsub_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏.")
    
    async def complete_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        ‚úÖ –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
        """
        try:
            user_id = update.effective_user.id
            
            if not context.args:
                await self._show_complete_help(update)
                return
            
            task_id_input = context.args[0]
            
            # –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏
            task = await self._find_task_by_partial_id(user_id, task_id_input)
            
            if not task:
                await update.message.reply_text(
                    f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID `{task_id_input}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/tasks` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á.",
                    parse_mode='Markdown'
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            if task.get('completed_today', False):
                await self._handle_already_completed_task(update, task)
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            result = await self.task_service.complete_task(user_id, task['id'])
            
            if result:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                updated_task = await self.task_service.get_task(user_id, task['id'])
                
                # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
                rewards = await self.gamification_service.award_task_completion(
                    user_id, updated_task
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —É—Ä–æ–≤–Ω–∏
                achievements = await self._check_completion_achievements(user_id, updated_task)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = await self._format_completion_celebration(
                    updated_task, rewards, achievements
                )
                
                keyboard = self._build_completion_keyboard(updated_task['id'])
                
                await update.message.reply_text(
                    message,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–∏–º—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                await self._send_achievement_notifications(update, achievements)
                
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ complete_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.")

    # ===== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
    
    async def handle_task_callbacks(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        üéõÔ∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞–¥–∞—á
        """
        try:
            query = update.callback_query
            await query.answer()
            
            data = query.data
            user_id = update.effective_user.id
            
            # –†–æ—É—Ç–∏–Ω–≥ callback'–æ–≤
            if data.startswith('task_'):
                await self._route_task_callback(query, data, user_id)
            elif data.startswith('edit_'):
                await self._route_edit_callback(query, data, user_id)
            elif data.startswith('reset_'):
                await self._route_reset_callback(query, data, user_id)
            elif data.startswith('stats_'):
                await self._route_stats_callback(query, data, user_id)
            elif data == 'close_menu':
                await query.edit_message_text("‚úÖ –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ.")
            else:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_task_callbacks: {e}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            except:
                pass

    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    async def _get_or_create_user(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = await self.data_service.get_user(user_id)
            if not user:
                user = await self.data_service.create_user(user_id)
            return user or {}
        except:
            return {}
    
    async def _calculate_task_stats(self, tasks: List[Dict], user_id: int) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á"""
        try:
            today = datetime.now().date()
            
            stats = {
                'total': len(tasks),
                'active': len([t for t in tasks if not t.get('archived', False)]),
                'completed_today': len([t for t in tasks if t.get('completed_today', False)]),
                'with_streak': len([t for t in tasks if t.get('current_streak', 0) > 0]),
                'max_streak': max([t.get('current_streak', 0) for t in tasks], default=0),
                'by_priority': {},
                'by_category': {}
            }
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for task in tasks:
                priority = task.get('priority', 'medium')
                category = task.get('category', 'personal')
                
                stats['by_priority'][priority] = stats['by_priority'].get(priority, 0) + 1
                stats['by_category'][category] = stats['by_category'].get(category, 0) + 1
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if stats['active'] > 0:
                stats['completion_rate'] = (stats['completed_today'] / stats['active']) * 100
            else:
                stats['completion_rate'] = 0
            
            return stats
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total': 0, 'active': 0, 'completed_today': 0, 'completion_rate': 0}
    
    async def _format_tasks_message(self, tasks: List[Dict], stats: Dict, theme: str = 'default') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
            theme_emoji = {
                'default': {'complete': '‚úÖ', 'incomplete': '‚≠ï', 'fire': 'üî•'},
                'dark': {'complete': '‚úÖ', 'incomplete': 'üîò', 'fire': 'üî•'},
                'minimal': {'complete': '‚úì', 'incomplete': '‚óã', 'fire': '~'},
                'corporate': {'complete': '‚òëÔ∏è', 'incomplete': '‚òê', 'fire': 'üìà'},
                'fun': {'complete': 'üéâ', 'incomplete': 'üéØ', 'fire': 'üöÄ'}
            }.get(theme, {'complete': '‚úÖ', 'incomplete': '‚≠ï', 'fire': 'üî•'})
            
            message = f"üìã **–í–∞—à–∏ –∑–∞–¥–∞—á–∏ ({stats['active']} –∞–∫—Ç–∏–≤–Ω—ã—Ö)**\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            message += f"üìä **–°–µ–≥–æ–¥–Ω—è:** {stats['completed_today']}/{stats['active']} "
            message += f"({stats['completion_rate']:.0f}%)\n"
            
            if stats['with_streak'] > 0:
                message += f"{theme_emoji['fire']} **Streak:** –¥–æ {stats['max_streak']} –¥–Ω–µ–π\n"
            
            message += "\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            priority_groups = {
                'high': [t for t in tasks if t.get('priority') == 'high' and not t.get('archived')],
                'medium': [t for t in tasks if t.get('priority') == 'medium' and not t.get('archived')],
                'low': [t for t in tasks if t.get('priority') == 'low' and not t.get('archived')]
            }
            
            priority_config = {
                'high': {'emoji': 'üî¥', 'name': '–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç'},
                'medium': {'emoji': 'üü°', 'name': '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç'},
                'low': {'emoji': 'üü¢', 'name': '–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç'}
            }
            
            for priority, config in priority_config.items():
                group_tasks = priority_groups[priority]
                if group_tasks:
                    message += f"{config['emoji']} **{config['name']}:**\n"
                    
                    for task in group_tasks[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        status_emoji = theme_emoji['complete'] if task.get('completed_today') else theme_emoji['incomplete']
                        task_id_short = task['id'][:8] if 'id' in task else 'unknown'
                        title = task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:30]
                        
                        streak_info = ""
                        if task.get('current_streak', 0) > 0:
                            streak_info = f" {theme_emoji['fire']}{task['current_streak']}"
                        
                        subtask_info = ""
                        if task.get('subtasks'):
                            completed_subs = len([s for s in task['subtasks'] if s.get('completed')])
                            total_subs = len(task['subtasks'])
                            if total_subs > 0:
                                subtask_info = f" ({completed_subs}/{total_subs})"
                        
                        message += f"{status_emoji} `{task_id_short}` {title}{streak_info}{subtask_info}\n"
                    
                    if len(group_tasks) > 5:
                        message += f"... –∏ –µ—â–µ {len(group_tasks) - 5}\n"
                    message += "\n"
            
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á."
    
    async def _build_tasks_keyboard(self, tasks: List[Dict], user_id: int) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
        try:
            keyboard = []
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            keyboard.append([
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="task_add_new"),
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="task_edit_select")
            ])
            
            keyboard.append([
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_detailed"),
                InlineKeyboardButton("üéØ AI-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="task_ai_suggest")
            ])
            
            # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            active_tasks = [t for t in tasks if not t.get('archived') and not t.get('completed_today')]
            if active_tasks:
                keyboard.append([
                    InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="task_quick_complete"),
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="task_refresh")
                ])
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            keyboard.append([
                InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="task_export"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="task_settings")
            ])
            
            return InlineKeyboardMarkup(keyboard)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—à–∏–±–∫–∞", callback_data="error")]])
    
    async def _get_ai_task_suggestions(self, task_title: str, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ AI-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏"""
        try:
            if not self.ai_service:
                return {'category': 'personal', 'priority': 'medium', 'tags': []}
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_context = await self._get_user_context_for_ai(user_id)
            
            # –ó–∞–ø—Ä–æ—Å –∫ AI
            suggestions = await self.ai_service.analyze_task(
                task_title=task_title,
                user_context=user_context
            )
            
            return suggestions or {
                'category': 'personal',
                'priority': 'medium', 
                'tags': [],
                'estimated_duration': None
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
            return {'category': 'personal', 'priority': 'medium', 'tags': []}
    
    async def _log_user_action(self, user_id: int, action: str, metadata: Dict = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            log_data = {
                'user_id': user_id,
                'action': action,
                'timestamp': datetime.now().isoformat(),
                'metadata': metadata or {}
            }
            
            if self.data_service:
                await self.data_service.log_user_action(log_data)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    # ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï HELPER –ú–ï–¢–û–î–´ =====
    
    async def _show_no_tasks_message(self, update: Update, theme: str):
        """–ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ –Ω–µ—Ç –∑–∞–¥–∞—á"""
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É", callback_data="task_add_new")],
            [InlineKeyboardButton("üéØ AI-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="task_ai_suggest")],
            [InlineKeyboardButton("üìã –ò–º–ø–æ—Ä—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞", callback_data="task_import_template")]
        ])
        
        await update.message.reply_text(
            "üìù **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á!**\n\n"
            "üöÄ **–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å:**\n"
            "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ AI-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã\n\n"
            "üí° **–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ `/addtask –ù–∞–∑–≤–∞–Ω–∏–µ` - –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ\n"
            "‚Ä¢ `/settasks –∑–∞–¥–∞—á–∞1; –∑–∞–¥–∞—á–∞2` - –º–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    def _get_error_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="task_refresh")],
            [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support_contact")]
        ])


# ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† =====

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á
task_manager = TaskManager()

# ===== –§–£–ù–ö–¶–ò–ò-–û–ë–ï–†–¢–ö–ò –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò =====

async def tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /tasks"""
    await task_manager.tasks_command(update, context)

async def addtask_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /addtask"""
    await task_manager.addtask_command(update, context)

async def settasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /settasks"""
    await task_manager.settasks_command(update, context)

async def edit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /edit"""
    await task_manager.edit_command(update, context)

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /reset"""
    await task_manager.reset_command(update, context)

async def addsub_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /addsub"""
    await task_manager.addsub_command(update, context)

async def complete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /complete"""
    await task_manager.complete_command(update, context)

async def handle_task_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∫–Ω–æ–ø–æ–∫"""
    await task_manager.handle_task_callbacks(update, context)

# ===== –§–£–ù–ö–¶–ò–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò HANDLERS =====

def register_task_handlers(application: Application):
    """
    üéØ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞—á
    
    ‚úÖ –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
    - –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
    - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ–Ω—é –∏ –∫–Ω–æ–ø–∫–∏
    - –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    - AI-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    - –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        logger.info("üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∑–∞–¥–∞—á...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–¥–∞—á
        application.add_handler(CommandHandler("tasks", tasks_command))
        application.add_handler(CommandHandler("addtask", addtask_command))
        application.add_handler(CommandHandler("add", addtask_command))  # –ê–ª–∏–∞—Å
        application.add_handler(CommandHandler("settasks", settasks_command))
        application.add_handler(CommandHandler("edit", edit_command))
        application.add_handler(CommandHandler("reset", reset_command))
        application.add_handler(CommandHandler("addsub", addsub_command))
        application.add_handler(CommandHandler("complete", complete_command))
        application.add_handler(CommandHandler("done", complete_command))  # –ê–ª–∏–∞—Å
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞–¥–∞—á
        application.add_handler(CallbackQueryHandler(
            handle_task_callbacks,
            pattern=r"^(task_|edit_|reset_|stats_|complete_|subtask_)"
        ))
        
        # ConversationHandler –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
        conversation_handler = ConversationHandler(
            entry_points=[CommandHandler("adddetailed", task_manager.addtask_command)],
            states={
                WAITING_TASK_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_manager._handle_task_title_input)],
                WAITING_TASK_PRIORITY: [CallbackQueryHandler(task_manager._handle_priority_selection)],
                WAITING_TASK_CATEGORY: [CallbackQueryHandler(task_manager._handle_category_selection)],
                WAITING_TASK_DEADLINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_manager._handle_deadline_input)],
                WAITING_TASK_TAGS: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_manager._handle_tags_input)],
            },
            fallbacks=[
                CommandHandler("cancel", lambda update, context: ConversationHandler.END),
                CallbackQueryHandler(lambda update, context: ConversationHandler.END, pattern="^cancel")
            ]
        )
        
        application.add_handler(conversation_handler)
        
        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞—á –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /tasks, /addtask, /add, /settasks, /edit, /reset, /addsub, /complete, /done")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞—á: {e}")
        raise

# ===== –≠–ö–°–ü–û–†–¢ =====

__all__ = [
    'TaskManager',
    'task_manager', 
    'register_task_handlers',
    'tasks_command',
    'addtask_command', 
    'settasks_command',
    'edit_command',
    'reset_command',
    'addsub_command',
    'complete_command',
    'handle_task_callbacks'
]
