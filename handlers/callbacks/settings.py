# ==========================================
# handlers/callbacks/settings_callbacks.py
# ==========================================

"""
Settings-related callback handlers
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–ª–±–µ–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

from aiogram import types
from aiogram.types import CallbackQuery

from ..utils import log_action, update_user_activity, get_user_data, save_user_data
from ui.keyboards import get_main_menu_keyboard, get_settings_keyboard, get_theme_keyboard
from ui.messages import format_success_message
from ui.themes import get_user_theme, THEMES

async def handle_theme_select(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    –§–æ—Ä–º–∞—Ç callback: theme_{theme_name}
    """
    user_id = callback.from_user.id
    theme_name = callback.data.split('_', 1)[1]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await update_user_activity(user_id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await log_action(user_id, "theme_select", {"theme": theme_name})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if theme_name not in THEMES:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
    await save_user_data(user_id, {'theme': theme_name})
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
    new_theme = await get_user_theme(user_id)
    
    success_text = format_success_message(
        f"üé® –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <b>{theme_name}</b>\n\n"
        f"–ù–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫–æ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º!"
    )
    
    try:
        await callback.message.edit_text(
            success_text,
            reply_markup=get_main_menu_keyboard(new_theme),
            parse_mode="HTML"
        )
    except Exception:
        await callback.message.answer(
            success_text,
            reply_markup=get_main_menu_keyboard(new_theme),
            parse_mode="HTML"
        )
    
    await callback.answer(f"‚úÖ –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: {theme_name}")

async def handle_notification_toggle(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    user_id = callback.from_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await update_user_activity(user_id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await log_action(user_id, "notification_toggle")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    user_data = await get_user_data(user_id)
    current_notifications = user_data.get('notifications', True)
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    new_notifications = not current_notifications
    await save_user_data(user_id, {'notifications': new_notifications})
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    theme = await get_user_theme(user_id)
    
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_notifications else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    emoji = "üîî" if new_notifications else "üîï"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    user_data = await get_user_data(user_id)
    settings_text = f"{theme.get('settings_emoji', '‚öôÔ∏è')} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n"
    settings_text += f"{emoji} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{status_text}</b>\n\n"
    
    if new_notifications:
        settings_text += f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n"
        settings_text += f"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö\n"
        settings_text += f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö\n"
        settings_text += f"‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
    else:
        settings_text += f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n"
        settings_text += f"–í–∫–ª—é—á–∏—Ç–µ –∏—Ö —Å–Ω–æ–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
    
    try:
        await callback.message.edit_text(
            settings_text,
            reply_markup=get_settings_keyboard(theme),
            parse_mode="HTML"
        )
    except Exception:
        pass
    
    await callback.answer(f"{emoji} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}")

async def handle_language_select(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    –§–æ—Ä–º–∞—Ç callback: lang_{language_code}
    """
    user_id = callback.from_user.id
    language = callback.data.split('_', 1)[1]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await update_user_activity(user_id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await log_action(user_id, "language_select", {"language": language})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫
    await save_user_data(user_id, {'language': language})
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    theme = await get_user_theme(user_id)
    
    language_names = {
        'ru': '–†—É—Å—Å–∫–∏–π',
        'en': 'English',
        'es': 'Espa√±ol',
        'fr': 'Fran√ßais',
        'de': 'Deutsch'
    }
    
    language_name = language_names.get(language, language)
    
    await callback.answer(f"üåê –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω: {language_name}")
    
    # –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ø–æ–ª–Ω–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–∑–∂–µ)
    info_text = f"üåê <b>–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</b>\n\n"
    info_text += f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: <b>{language_name}</b>\n\n"
    info_text += f"<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü–æ–ª–Ω–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö. "
    info_text += f"–ü–æ–∫–∞ —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.</i>"
    
    try:
        await callback.message.edit_text(
            info_text,
            reply_markup=get_main_menu_keyboard(theme),
            parse_mode="HTML"
        )
    except Exception:
        pass

async def handle_privacy_toggle(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    –§–æ—Ä–º–∞—Ç callback: privacy_{setting}
    """
    user_id = callback.from_user.id
    privacy_setting = callback.data.split('_', 1)[1]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await update_user_activity(user_id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await log_action(user_id, "privacy_toggle", {"setting": privacy_setting})
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    user_data = await get_user_data(user_id)
    
    if privacy_setting == "profile":
        current_value = user_data.get('public_profile', True)
        new_value = not current_value
        await save_user_data(user_id, {'public_profile': new_value})
        
        status = "–æ—Ç–∫—Ä—ã—Ç—ã–π" if new_value else "–ø—Ä–∏–≤–∞—Ç–Ω—ã–π"
        await callback.answer(f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {status}")
        
    elif privacy_setting == "stats":
        current_value = user_data.get('share_stats', True)
        new_value = not current_value
        await save_user_data(user_id, {'share_stats': new_value})
        
        status = "–æ—Ç–∫—Ä—ã—Ç–∞—è" if new_value else "–ø—Ä–∏–≤–∞—Ç–Ω–∞—è"
        await callback.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {status}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    theme = await get_user_theme(user_id)
    user_data = await get_user_data(user_id)
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await callback.message.edit_reply_markup(
        reply_markup=get_settings_keyboard(theme)
    )
