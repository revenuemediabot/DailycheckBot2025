#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ DailycheckBot2025
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""

import os
import re
import ast
import json
from pathlib import Path
from typing import Dict, List, Set, Tuple, Optional
from collections import defaultdict, Counter
from datetime import datetime

class Colors:
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

class ProjectAnalyzer:
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.results = {
            'folders': {},
            'functions': {},
            'classes': {},
            'imports': {},
            'conflicts': [],
            'recommendations': [],
            'file_stats': {}
        }
        
    def print_header(self, text: str, color: str = Colors.CYAN, char: str = "="):
        """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print(f"\n{color}{Colors.BOLD}{char * 60}{Colors.END}")
        print(f"{color}{Colors.BOLD}{text.center(60)}{Colors.END}")
        print(f"{color}{Colors.BOLD}{char * 60}{Colors.END}")
        
    def print_section(self, text: str, color: str = Colors.BLUE):
        """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
        print(f"\n{color}{Colors.BOLD}üîç {text}{Colors.END}")
        print(f"{color}{'-' * (len(text) + 4)}{Colors.END}")

    def analyze_folder_structure(self):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫"""
        self.print_section("–ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–ê–ü–û–ö", Colors.BLUE)
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è DailycheckBot2025
        expected_folders = {
            'handlers': '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–ª–±–µ–∫–æ–≤',
            'services': '–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ (TaskService, AIService)',
            'ui': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Ç–µ–º—ã)',
            'models': '–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö',
            'database': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö',
            'data': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
            'dashboard': '–í–µ–±-–¥–∞—à–±–æ—Ä–¥',
            'bot': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞',
            'localization': '–ü–µ—Ä–µ–≤–æ–¥—ã –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è',
            'scripts': '–°–∫—Ä–∏–ø—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏'
        }
        
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø–∞–ø–∫–∏
        conflicting_folders = {
            'utils': '–ú–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å handlers/utils.py',
            'shared': '–ú–æ–∂–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å handlers/states.py',
            'helpers': '–°–ª–∏—à–∫–æ–º –æ–±—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
            'lib': '–ù–µ—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'
        }
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ/–Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏
        temp_folders = {
            'temp', 'tmp', 'old', 'backup', 'deprecated', 
            '__pycache__', '.pytest_cache', 'test_temp'
        }
        
        existing_folders = []
        for item in self.project_root.iterdir():
            if item.is_dir() and not item.name.startswith('.'):
                existing_folders.append(item.name)
        
        print(f"{Colors.GREEN}‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏:{Colors.END}")
        for folder in sorted(existing_folders):
            folder_path = self.project_root / folder
            py_files = list(folder_path.rglob("*.py"))
            size_mb = sum(f.stat().st_size for f in folder_path.rglob("*") if f.is_file()) / 1024 / 1024
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–∞–ø–∫–∏
            status = ""
            if folder in expected_folders:
                status = f"{Colors.GREEN}(–Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è){Colors.END}"
                description = expected_folders[folder]
            elif folder in conflicting_folders:
                status = f"{Colors.YELLOW}(–ø—Ä–æ–≤–µ—Ä–∏—Ç—å){Colors.END}"
                description = conflicting_folders[folder]
            elif folder in temp_folders:
                status = f"{Colors.RED}(—É–¥–∞–ª–∏—Ç—å){Colors.END}"
                description = "–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞"
            else:
                status = f"{Colors.CYAN}(–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è){Colors.END}"
                description = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ"
            
            print(f"  üìÅ {folder:<15} {status:<20} | {len(py_files):>3} —Ñ–∞–π–ª–æ–≤ | {size_mb:>5.1f} MB")
            print(f"     {Colors.WHITE}{description}{Colors.END}")
            
            self.results['folders'][folder] = {
                'path': str(folder_path),
                'py_files_count': len(py_files),
                'size_mb': size_mb,
                'status': status,
                'description': description
            }
        
        # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞–∂–Ω—ã–µ –ø–∞–ø–∫–∏
        missing = [f for f in expected_folders if f not in existing_folders]
        if missing:
            print(f"\n{Colors.YELLOW}‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞–∂–Ω—ã–µ –ø–∞–ø–∫–∏:{Colors.END}")
            for folder in missing:
                print(f"  üìÅ {folder} - {expected_folders[folder]}")

    def extract_python_elements(self, file_path: Path) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π, –∫–ª–∞—Å—Å–æ–≤ –∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ Python —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
            
            functions = []
            classes = []
            imports = []
            
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    functions.append({
                        'name': node.name,
                        'line': node.lineno,
                        'args': [arg.arg for arg in node.args.args],
                        'is_async': isinstance(node, ast.AsyncFunctionDef)
                    })
                
                elif isinstance(node, ast.ClassDef):
                    classes.append({
                        'name': node.name,
                        'line': node.lineno,
                        'bases': [ast.unparse(base) if hasattr(ast, 'unparse') else str(base) for base in node.bases]
                    })
                
                elif isinstance(node, ast.Import):
                    for alias in node.names:
                        imports.append({
                            'type': 'import',
                            'module': alias.name,
                            'alias': alias.asname,
                            'line': node.lineno
                        })
                
                elif isinstance(node, ast.ImportFrom):
                    for alias in node.names:
                        imports.append({
                            'type': 'from_import',
                            'module': node.module,
                            'name': alias.name,
                            'alias': alias.asname,
                            'line': node.lineno
                        })
            
            return {
                'functions': functions,
                'classes': classes,
                'imports': imports,
                'lines': len(content.splitlines()),
                'size': file_path.stat().st_size
            }
            
        except Exception as e:
            return {
                'functions': [],
                'classes': [],
                'imports': [],
                'lines': 0,
                'size': 0,
                'error': str(e)
            }

    def analyze_code_elements(self):
        """–ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π, –∫–ª–∞—Å—Å–æ–≤ –∏ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        self.print_section("–ê–ù–ê–õ–ò–ó –ö–û–î–ê", Colors.MAGENTA)
        
        all_functions = defaultdict(list)
        all_classes = defaultdict(list)
        all_imports = defaultdict(list)
        
        total_files = 0
        total_lines = 0
        
        for py_file in self.project_root.rglob("*.py"):
            if any(part.startswith('.') or part == '__pycache__' for part in py_file.parts):
                continue
                
            total_files += 1
            relative_path = py_file.relative_to(self.project_root)
            folder = relative_path.parts[0] if len(relative_path.parts) > 1 else 'root'
            
            elements = self.extract_python_elements(py_file)
            total_lines += elements['lines']
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
            for func in elements['functions']:
                all_functions[func['name']].append({
                    'file': str(relative_path),
                    'folder': folder,
                    'line': func['line'],
                    'args': func['args'],
                    'is_async': func['is_async']
                })
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã
            for cls in elements['classes']:
                all_classes[cls['name']].append({
                    'file': str(relative_path),
                    'folder': folder,
                    'line': cls['line'],
                    'bases': cls['bases']
                })
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã
            for imp in elements['imports']:
                all_imports[folder].append(imp)
        
        print(f"{Colors.GREEN}üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:{Colors.END}")
        print(f"  ‚Ä¢ –§–∞–π–ª–æ–≤ Python: {total_files}")
        print(f"  ‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {total_lines:,}")
        print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {len(all_functions)}")
        print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {len(all_classes)}")
        
        self.results['functions'] = dict(all_functions)
        self.results['classes'] = dict(all_classes)
        self.results['imports'] = dict(all_imports)
        
        return all_functions, all_classes

    def find_conflicts(self, all_functions: Dict, all_classes: Dict):
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        self.print_section("–ü–û–ò–°–ö –ö–û–ù–§–õ–ò–ö–¢–û–í", Colors.RED)
        
        conflicts = []
        
        # –î—É–±–ª–∏–∫–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π
        function_duplicates = {name: locations for name, locations in all_functions.items() 
                             if len(locations) > 1}
        
        if function_duplicates:
            print(f"{Colors.RED}‚ö†Ô∏è  –î–£–ë–õ–ò–ö–ê–¢–´ –§–£–ù–ö–¶–ò–ô:{Colors.END}")
            for func_name, locations in function_duplicates.items():
                print(f"\n  üìù {Colors.YELLOW}{func_name}{Colors.END}:")
                for loc in locations:
                    args_str = f"({', '.join(loc['args'])})" if loc['args'] else "()"
                    async_mark = "async " if loc['is_async'] else ""
                    print(f"    ‚Ä¢ {loc['folder']}/{loc['file']}:{loc['line']} - {async_mark}{func_name}{args_str}")
                
                conflicts.append({
                    'type': 'function_duplicate',
                    'name': func_name,
                    'locations': locations
                })
        else:
            print(f"{Colors.GREEN}‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ{Colors.END}")
        
        # –î—É–±–ª–∏–∫–∞—Ç—ã –∫–ª–∞—Å—Å–æ–≤
        class_duplicates = {name: locations for name, locations in all_classes.items() 
                           if len(locations) > 1}
        
        if class_duplicates:
            print(f"\n{Colors.RED}‚ö†Ô∏è  –î–£–ë–õ–ò–ö–ê–¢–´ –ö–õ–ê–°–°–û–í:{Colors.END}")
            for class_name, locations in class_duplicates.items():
                print(f"\n  üèóÔ∏è  {Colors.YELLOW}{class_name}{Colors.END}:")
                for loc in locations:
                    bases_str = f"({', '.join(loc['bases'])})" if loc['bases'] else ""
                    print(f"    ‚Ä¢ {loc['folder']}/{loc['file']}:{loc['line']} - class {class_name}{bases_str}")
                
                conflicts.append({
                    'type': 'class_duplicate',
                    'name': class_name,
                    'locations': locations
                })
        else:
            print(f"{Colors.GREEN}‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ{Colors.END}")
        
        self.results['conflicts'] = conflicts
        return conflicts

    def check_critical_elements(self, all_functions: Dict, all_classes: Dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DailycheckBot"""
        self.print_section("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –≠–õ–ï–ú–ï–ù–¢–´ DAILYCHECKBOT", Colors.CYAN)
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ handlers/utils.py
        critical_functions = {
            'get_user_data': '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'save_user_data': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'log_action': '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π',
            'add_xp': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞',
            'check_achievements': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π',
            'update_user_activity': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            'initialize_user': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'format_user_profile': '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è'
        }
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª–∞—Å—Å—ã –∏–∑ handlers/states.py
        critical_classes = {
            'UserState': '–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'StateData': '–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
            'UserStateManager': '–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π',
            'TaskService': '–°–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á',
            'AIService': 'AI —Å–µ—Ä–≤–∏—Å'
        }
        
        print(f"{Colors.YELLOW}üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:{Colors.END}")
        for func_name, description in critical_functions.items():
            if func_name in all_functions:
                locations = all_functions[func_name]
                if len(locations) == 1:
                    loc = locations[0]
                    print(f"  ‚úÖ {func_name:<20} | {loc['folder']}/{loc['file']}")
                else:
                    print(f"  ‚ö†Ô∏è  {func_name:<20} | –î–£–ë–õ–ò–ö–ê–¢ –≤ {len(locations)} –º–µ—Å—Ç–∞—Ö!")
                    for loc in locations:
                        print(f"     ‚Üí {loc['folder']}/{loc['file']}")
            else:
                print(f"  ‚ùå {func_name:<20} | –ù–ï –ù–ê–ô–î–ï–ù–ê")
        
        print(f"\n{Colors.YELLOW}üèóÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤:{Colors.END}")
        for class_name, description in critical_classes.items():
            if class_name in all_classes:
                locations = all_classes[class_name]
                if len(locations) == 1:
                    loc = locations[0]
                    print(f"  ‚úÖ {class_name:<20} | {loc['folder']}/{loc['file']}")
                else:
                    print(f"  ‚ö†Ô∏è  {class_name:<20} | –î–£–ë–õ–ò–ö–ê–¢ –≤ {len(locations)} –º–µ—Å—Ç–∞—Ö!")
                    for loc in locations:
                        print(f"     ‚Üí {loc['folder']}/{loc['file']}")
            else:
                print(f"  ‚ùå {class_name:<20} | –ù–ï –ù–ê–ô–î–ï–ù")

    def analyze_dependencies(self):
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏"""
        self.print_section("–ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô", Colors.GREEN)
        
        internal_imports = defaultdict(set)
        external_imports = defaultdict(Counter)
        
        for folder, imports in self.results['imports'].items():
            for imp in imports:
                module = imp.get('module', '')
                
                if module and ('handlers' in module or 'services' in module or 
                              'ui' in module or 'models' in module):
                    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∏–º–ø–æ—Ä—Ç
                    internal_imports[folder].add(module)
                elif module and not module.startswith('.'):
                    # –í–Ω–µ—à–Ω–∏–π –∏–º–ø–æ—Ä—Ç
                    external_imports[folder][module.split('.')[0]] += 1
        
        print(f"{Colors.CYAN}üîó –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:{Colors.END}")
        for folder, modules in internal_imports.items():
            if modules:
                print(f"  üìÅ {folder}:")
                for module in sorted(modules):
                    print(f"    ‚Üí {module}")
        
        print(f"\n{Colors.CYAN}üì¶ –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (—Ç–æ–ø-5 –Ω–∞ –ø–∞–ø–∫—É):{Colors.END}")
        for folder, modules in external_imports.items():
            if modules:
                print(f"  üìÅ {folder}:")
                for module, count in modules.most_common(5):
                    print(f"    ‚Üí {module} ({count} —Ä–∞–∑)")

    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        self.print_section("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò", Colors.YELLOW)
        
        recommendations = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        if self.results['conflicts']:
            recommendations.append({
                'priority': 'HIGH',
                'action': '–£—Å—Ç—Ä–∞–Ω–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π/–∫–ª–∞—Å—Å–æ–≤',
                'details': f"–ù–∞–π–¥–µ–Ω–æ {len(self.results['conflicts'])} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫
        folders = self.results['folders']
        
        # utils/ vs handlers/utils.py
        if 'utils' in folders and 'handlers' in folders:
            recommendations.append({
                'priority': 'MEDIUM',
                'action': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç utils/ —Å handlers/utils.py',
                'details': '–í–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞'
            })
        
        # shared/ vs handlers/states.py
        if 'shared' in folders and 'handlers' in folders:
            recommendations.append({
                'priority': 'MEDIUM', 
                'action': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç shared/ —Å handlers/states.py',
                'details': '–í–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π'
            })
        
        # –ü—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏
        empty_folders = [name for name, info in folders.items() 
                        if info['py_files_count'] <= 1]
        if empty_folders:
            recommendations.append({
                'priority': 'LOW',
                'action': f'–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫: {", ".join(empty_folders)}',
                'details': '–ü–∞–ø–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ __init__.py –∏–ª–∏ –ø—É—Å—Ç—ã'
            })
        
        # –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
        large_folders = [name for name, info in folders.items() 
                        if info['size_mb'] > 10]
        if large_folders:
            recommendations.append({
                'priority': 'INFO',
                'action': f'–ë–æ–ª—å—à–∏–µ –ø–∞–ø–∫–∏: {", ".join(large_folders)}',
                'details': '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥–º–æ–¥—É–ª–∏'
            })
        
        # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∞–∂–Ω—ã—Ö –ø–∞–ø–æ–∫
        important_missing = [f for f in ['services', 'models', 'ui'] 
                           if f not in folders]
        if important_missing:
            recommendations.append({
                'priority': 'HIGH',
                'action': f'–°–æ–∑–¥–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏: {", ".join(important_missing)}',
                'details': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã'
            })
        
        self.results['recommendations'] = recommendations
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        priority_colors = {
            'HIGH': Colors.RED,
            'MEDIUM': Colors.YELLOW,
            'LOW': Colors.CYAN,
            'INFO': Colors.WHITE
        }
        
        for rec in recommendations:
            color = priority_colors.get(rec['priority'], Colors.WHITE)
            print(f"  {color}[{rec['priority']}]{Colors.END} {rec['action']}")
            print(f"       {Colors.WHITE}{rec['details']}{Colors.END}")
        
        if not recommendations:
            print(f"  {Colors.GREEN}‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞!{Colors.END}")

    def create_cleanup_script(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        self.print_section("–°–ö–†–ò–ü–¢ –û–ß–ò–°–¢–ö–ò", Colors.MAGENTA)
        
        cleanup_commands = []
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è backup
        cleanup_commands.append("# –°–æ–∑–¥–∞–Ω–∏–µ backup –≤–∞–∂–Ω—ã—Ö –ø–∞–ø–æ–∫")
        cleanup_commands.append("mkdir -p backups/")
        
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø–∞–ø–∫–∏
        if 'utils' in self.results['folders']:
            cleanup_commands.append("mv utils/ backups/utils_backup_$(date +%Y%m%d_%H%M%S)/ 2>/dev/null || echo 'utils/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'")
        
        if 'shared' in self.results['folders']:
            cleanup_commands.append("mv shared/ backups/shared_backup_$(date +%Y%m%d_%H%M%S)/ 2>/dev/null || echo 'shared/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'")
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
        temp_folders = ['temp', 'tmp', 'old', 'backup', 'deprecated']
        existing_temp = [f for f in temp_folders if f in self.results['folders']]
        
        if existing_temp:
            cleanup_commands.append("\n# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫")
            for folder in existing_temp:
                cleanup_commands.append(f"rm -rf {folder}/ 2>/dev/null || echo '{folder}/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'")
        
        # –û—á–∏—Å—Ç–∫–∞ __pycache__
        cleanup_commands.append("\n# –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Python")
        cleanup_commands.append("find . -name '__pycache__' -type d -exec rm -rf {} + 2>/dev/null")
        cleanup_commands.append("find . -name '*.pyc' -delete 2>/dev/null")
        
        if len(cleanup_commands) > 3:  # –ë–æ–ª—å—à–µ —á–µ–º –ø—Ä–æ—Å—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            cleanup_script = "#!/bin/bash\n" + "\n".join(cleanup_commands)
            
            with open(self.project_root / "cleanup_project.sh", 'w') as f:
                f.write(cleanup_script)
            
            os.chmod(self.project_root / "cleanup_project.sh", 0o755)
            
            print(f"{Colors.GREEN}‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç cleanup_project.sh{Colors.END}")
            print(f"  –í—ã–ø–æ–ª–Ω–∏—Ç–µ: {Colors.CYAN}./cleanup_project.sh{Colors.END}")
        else:
            print(f"{Colors.GREEN}‚úÖ –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è{Colors.END}")

    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ JSON"""
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'project_root': str(self.project_root),
            'results': self.results
        }
        
        report_file = self.project_root / "project_analysis_report.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\n{Colors.GREEN}üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}{Colors.END}")

    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        self.print_header("–ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–†–û–ï–ö–¢–ê DAILYCHECKBOT2025", Colors.CYAN)
        
        print(f"{Colors.WHITE}–ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {self.project_root.absolute()}{Colors.END}")
        print(f"{Colors.WHITE}–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}{Colors.END}")
        
        # 1. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
        self.analyze_folder_structure()
        
        # 2. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
        all_functions, all_classes = self.analyze_code_elements()
        
        # 3. –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        self.find_conflicts(all_functions, all_classes)
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.check_critical_elements(all_functions, all_classes)
        
        # 5. –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.analyze_dependencies()
        
        # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.generate_recommendations()
        
        # 7. –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏
        self.create_cleanup_script()
        
        # 8. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        self.save_report()
        
        self.print_header("–ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù", Colors.GREEN)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        analyzer = ProjectAnalyzer()
        analyzer.run_analysis()
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.END}")
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}{Colors.END}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()check_project_conflicts.py
