"""
–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏
"""

import asyncio
import logging
from typing import Dict, Optional
from datetime import datetime, timedelta

logger = logging.getLogger('dailycheck')

class TimerService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ç–∞–π–º–µ—Ä–∞–º–∏"""
    
    def __init__(self, bot_application):
        self.bot_application = bot_application
        self.active_timers: Dict[int, asyncio.Task] = {}
    
    async def start_timer(self, user_id: int, duration: int, timer_name: str, 
                         is_pomodoro: bool = False) -> bool:
        """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            await self.stop_timer(user_id)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
            timer_task = asyncio.create_task(
                self._timer_worker(user_id, duration, timer_name, is_pomodoro)
            )
            
            self.active_timers[user_id] = timer_task
            
            logger.info(f"‚è∞ –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {timer_name} ({duration} –º–∏–Ω)")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞: {e}")
            return False
    
    async def stop_timer(self, user_id: int) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.active_timers:
            try:
                self.active_timers[user_id].cancel()
                del self.active_timers[user_id]
                
                logger.info(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞: {e}")
        
        return False
    
    def is_timer_active(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–∞–π–º–µ—Ä–∞"""
        return user_id in self.active_timers and not self.active_timers[user_id].done()
    
    def get_timer_info(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π–º–µ—Ä–µ"""
        if self.is_timer_active(user_id):
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            return {
                "active": True,
                "user_id": user_id
            }
        return None
    
    async def _timer_worker(self, user_id: int, duration: int, timer_name: str, is_pomodoro: bool):
        """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Ç–∞–π–º–µ—Ä–∞"""
        try:
            # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            await asyncio.sleep(duration * 60)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–µ–∫—É–Ω–¥—ã
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            message = f"‚è∞ **–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n{timer_name} ({duration} –º–∏–Ω) –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.\n\n–í—Ä–µ–º—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ! üí™"
            
            try:
                await self.bot_application.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–º–æ–¥–æ—Ä–æ
            if is_pomodoro:
                from database import DatabaseManager
                # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä DB
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –∏–Ω–∂–µ–∫—Ç–∏—Ç—å—Å—è
                pass
            
        except asyncio.CancelledError:
            logger.debug(f"‚èπÔ∏è –¢–∞–π–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–º–µ–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
            if user_id in self.active_timers:
                del self.active_timers[user_id]
    
    async def cleanup_all_timers(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        for user_id in list(self.active_timers.keys()):
            await self.stop_timer(user_id)
        
        logger.info("üßπ –í—Å–µ —Ç–∞–π–º–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
