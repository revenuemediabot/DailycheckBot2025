"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API
"""

import random
import logging
from typing import List, Optional

try:
    from openai import AsyncOpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

from config import BotConfig, AIRequestType
from models import User

logger = logging.getLogger('dailycheck')

class AIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API"""
    
    def __init__(self):
        self.client = None
        self.enabled = OPENAI_AVAILABLE and BotConfig.OPENAI_API_KEY
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á –Ω–µ —Ä–∞–≤–µ–Ω BOT_TOKEN
        if self.enabled and BotConfig.OPENAI_API_KEY == BotConfig.BOT_TOKEN:
            logger.warning("‚ö†Ô∏è OPENAI_API_KEY —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å BOT_TOKEN - AI —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            self.enabled = False
        
        if self.enabled:
            try:
                self.client = AsyncOpenAI(api_key=BotConfig.OPENAI_API_KEY)
                logger.info("ü§ñ AI —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI: {e}")
                self.enabled = False
        else:
            if not BotConfig.OPENAI_API_KEY:
                logger.warning("‚ö†Ô∏è AI —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω (–Ω–µ—Ç OPENAI_API_KEY)")
            elif BotConfig.OPENAI_API_KEY == BotConfig.BOT_TOKEN:
                logger.warning("‚ö†Ô∏è AI —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω (OPENAI_API_KEY = BOT_TOKEN)")
            else:
                logger.warning("‚ö†Ô∏è AI —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω (OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
    
    def classify_request(self, message: str, user: User) -> AIRequestType:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message_lower = message.lower()
        
        # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        motivation_keywords = [
            '–º–æ—Ç–∏–≤–∞', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–≤–¥–æ—Ö–Ω–æ–≤–∏', '—É—Å—Ç–∞–ª', '–ª–µ–Ω—å', '–Ω–µ —Ö–æ—á—É',
            '—Å–∏–ª –Ω–µ—Ç', '–ø–æ–º–æ–≥–∏', 'motivation', 'inspire', 'support'
        ]
        
        # –ö–æ—É—á–∏–Ω–≥ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        coaching_keywords = [
            '–ø–ª–∞–Ω', '—Ü–µ–ª', '–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω', '–∑–∞–¥–∞—á', '–æ—Ä–≥–∞–Ω–∏–∑', '–≤—Ä–µ–º—è',
            '–ø–ª–∞–Ω–∏—Ä–æ–≤', 'productivity', 'goal', 'planning', 'time'
        ]
        
        # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        psychology_keywords = [
            '—Å—Ç—Ä–µ—Å—Å', '—Ç—Ä–µ–≤–æ–≥', '–¥–µ–ø—Ä–µ—Å—Å', '–≥—Ä—É—Å—Ç–Ω–æ', '–æ–¥–∏–Ω–æ–∫', '—Å—Ç—Ä–∞—Ö',
            '–ø—Å–∏—Ö–æ–ª–æ–≥', 'emotion', 'stress', 'anxiety', 'sad'
        ]
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        analysis_keywords = [
            '–ø—Ä–æ–≥—Ä–µ—Å—Å', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–∞–Ω–∞–ª–∏–∑', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–¥–æ—Å—Ç–∏–∂–µ–Ω',
            'analysis', 'progress', 'stats', 'achievement'
        ]
        
        for keyword in motivation_keywords:
            if keyword in message_lower:
                return AIRequestType.MOTIVATION
        
        for keyword in coaching_keywords:
            if keyword in message_lower:
                return AIRequestType.COACHING
        
        for keyword in psychology_keywords:
            if keyword in message_lower:
                return AIRequestType.PSYCHOLOGY
        
        for keyword in analysis_keywords:
            if keyword in message_lower:
                return AIRequestType.ANALYSIS
        
        return AIRequestType.GENERAL
    
    async def generate_response(self, message: str, user: User, 
                              request_type: Optional[AIRequestType] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.enabled:
            return self._get_fallback_response(message, user, request_type)
        
        try:
            if not request_type:
                request_type = self.classify_request(message, user)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_context = self._build_user_context(user)
            
            # –í—ã–±–∏—Ä–∞–µ–º system prompt –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
            system_prompt = self._get_system_prompt(request_type, user_context)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = [{"role": "system", "content": system_prompt}]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            for msg in user.ai_chat_history[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                messages.append(msg)
            
            messages.append({"role": "user", "content": message})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = await self.client.chat.completions.create(
                model=BotConfig.OPENAI_MODEL,
                messages=messages,
                max_tokens=BotConfig.OPENAI_MAX_TOKENS,
                temperature=0.7,
                timeout=30
            )
            
            ai_response = response.choices[0].message.content.strip()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            user.ai_chat_history.append({"role": "user", "content": message})
            user.ai_chat_history.append({"role": "assistant", "content": ai_response})
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(user.ai_chat_history) > 20:
                user.ai_chat_history = user.ai_chat_history[-20:]
            
            return ai_response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return self._get_fallback_response(message, user, request_type)
    
    def _build_user_context(self, user: User) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        completed_today = len(user.completed_tasks_today)
        active_tasks = len(user.active_tasks)
        
        max_streak = max([task.current_streak for task in user.active_tasks.values()] + [0])
        
        week_progress = user.get_week_progress()
        
        context = f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
- –ò–º—è: {user.display_name}
- –£—Ä–æ–≤–µ–Ω—å: {user.stats.level} ({user.stats.get_level_title()})
- –û–±—â–∏–π XP: {user.stats.total_xp}
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á –≤—Å–µ–≥–æ: {user.stats.completed_tasks}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active_tasks}
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {completed_today}
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π streak: {max_streak} –¥–Ω–µ–π
- –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–¥–µ–ª–∏: {week_progress['completed']}/{week_progress['goal']} –∑–∞–¥–∞—á
- –î–Ω–µ–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.stats.days_since_registration}"""
        
        if user.tasks:
            context += "\n\n–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á:"
            for i, task in enumerate(list(user.active_tasks.values())[:3]):
                status = "‚úÖ" if task.is_completed_today() else "‚≠ï"
                context += f"\n- {status} {task.title} (streak: {task.current_streak})"
        
        return context
    
    def _get_system_prompt(self, request_type: AIRequestType, user_context: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ system prompt –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        base_prompt = f"""–¢—ã - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç DailyCheck Bot, –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏.

{user_context}

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è."""
        
        if request_type == AIRequestType.MOTIVATION:
            return base_prompt + """

–¢–≤–æ—è —Ä–æ–ª—å - –ú–û–¢–ò–í–ê–¢–û–†:
- –í–¥–æ—Ö–Ω–æ–≤–ª—è–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
- –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —É—Å–ø–µ—Ö–∏
- –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—é –ª–µ–Ω–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π
- –ù–∞–ø–æ–º–∏–Ω–∞–π –æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —Ü–µ–ª—è—Ö"""
        
        elif request_type == AIRequestType.COACHING:
            return base_prompt + """

–¢–≤–æ—è —Ä–æ–ª—å - –ö–û–£–ß –ü–û –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–ò:
- –ü–æ–º–æ–≥–∞–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—é
- –î–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (Pomodoro, GTD, etc.)
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
- –ü–æ–º–æ–≥–∞–π —Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–ª–∏"""
        
        elif request_type == AIRequestType.PSYCHOLOGY:
            return base_prompt + """

–¢–≤–æ—è —Ä–æ–ª—å - –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–û–î–î–ï–†–ñ–ò–í–ê–Æ–©–ò–ô –ü–û–ú–û–©–ù–ò–ö:
- –ü—Ä–æ—è–≤–ª—è–π —ç–º–ø–∞—Ç–∏—é –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
- –ü–æ–º–æ–≥–∞–π —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –∏ —Ç—Ä–µ–≤–æ–≥–æ–π
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –∏ mindfulness
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
- –ù–ï –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤, –Ω–∞–ø—Ä–∞–≤–ª—è–π –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –ø—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö"""
        
        elif request_type == AIRequestType.ANALYSIS:
            return base_prompt + """

–¢–≤–æ—è —Ä–æ–ª—å - –ê–ù–ê–õ–ò–¢–ò–ö –ü–†–û–ì–†–ï–°–°–ê:
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –í—ã—è–≤–ª—è–π –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Å–ø–æ—Å–æ–±—ã —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –£–∫–∞–∑—ã–≤–∞–π –Ω–∞ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –∑–æ–Ω—ã —Ä–æ—Å—Ç–∞
- –î–∞–≤–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
        
        else:  # GENERAL
            return base_prompt + """

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫:
- –ü–æ–º–æ–≥–∞–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è—Ö
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–∞—Ö –∏ –ø—Ä–∏–≤—ã—á–∫–∞—Ö
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º"""
    
    def _get_fallback_response(self, message: str, user: User, 
                             request_type: Optional[AIRequestType] = None) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∫–æ–≥–¥–∞ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        if not request_type:
            request_type = self.classify_request(message, user)
        
        completed_today = len(user.completed_tasks_today)
        active_tasks = len(user.active_tasks)
        max_streak = max([task.current_streak for task in user.active_tasks.values()] + [0])
        
        if request_type == AIRequestType.MOTIVATION:
            responses = [
                f"üí™ {user.display_name}, —Ç—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª {completed_today} –∑–∞–¥–∞—á —Å–µ–≥–æ–¥–Ω—è! –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
                f"üî• –¢–≤–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π streak {max_streak} –¥–Ω–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –º–Ω–æ–≥–æ–µ!",
                f"‚≠ê –£—Ä–æ–≤–µ–Ω—å {user.stats.level} ({user.stats.get_level_title()}) - —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–≤–æ–µ–π —É–ø–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã!",
                f"üéØ –£ —Ç–µ–±—è –µ—Å—Ç—å {active_tasks} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –ö–∞–∂–¥–∞—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è - —à–∞–≥ –∫ —Ü–µ–ª–∏!"
            ]
        elif request_type == AIRequestType.COACHING:
            responses = [
                "üìã –ü–æ–ø—Ä–æ–±—É–π —Ç–µ—Ö–Ω–∏–∫—É Pomodoro: 25 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã, 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è!",
                "üéØ –ù–∞—á–Ω–∏ —Å —Å–∞–º–æ–π –≤–∞–∂–Ω–æ–π –∑–∞–¥–∞—á–∏ —É—Ç—Ä–æ–º, –∫–æ–≥–¥–∞ —ç–Ω–µ—Ä–≥–∏–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ.",
                "üìù –ü–ª–∞–Ω–∏—Ä—É–π –¥–µ–Ω—å —Å –≤–µ—á–µ—Ä–∞ - —ç—Ç–æ —ç–∫–æ–Ω–æ–º–∏—Ç –≤—Ä–µ–º—è –∏ —Å–Ω–∏–∂–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å —É—Ç—Ä–æ–º.",
                "‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏."
            ]
        elif request_type == AIRequestType.PSYCHOLOGY:
            responses = [
                "ü§ó –ü–æ–º–Ω–∏: –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–∞–∂–Ω–µ–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞. –ö–∞–∂–¥—ã–π —à–∞–≥ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ.",
                "üå± –°—Ç—Ä–µ—Å—Å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –í–∞–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–¥–æ—Ä–æ–≤—ã–µ —Å–ø–æ—Å–æ–±—ã —Å –Ω–∏–º —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.",
                "üíô –¢—ã –¥–µ–ª–∞–µ—à—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, –∏ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ë—É–¥—å –¥–æ–±—Ä–µ–µ –∫ —Å–µ–±–µ.",
                "üßò –ü–æ–ø—Ä–æ–±—É–π —Ç–µ—Ö–Ω–∏–∫—É –≥–ª—É–±–æ–∫–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è: –≤–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 4, –≤—ã–¥–æ—Ö –Ω–∞ 6."
            ]
        elif request_type == AIRequestType.ANALYSIS:
            week_progress = user.get_week_progress()
            responses = [
                f"üìä –ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª {week_progress['completed']} –∏–∑ {week_progress['goal']} –∑–∞–¥–∞—á.",
                f"üìà –¢–≤–æ–π completion rate: {user.stats.completion_rate:.1f}% - –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                f"üèÜ –£ —Ç–µ–±—è {len(user.achievements)} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö.",
                f"‚è±Ô∏è –í —Å—Ä–µ–¥–Ω–µ–º —Ç—ã –∞–∫—Ç–∏–≤–µ–Ω {user.stats.days_since_registration} –¥–Ω–µ–π - –æ—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞!"
            ]
        else:
            responses = [
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.display_name}! –ö–∞–∫ –¥–µ–ª–∞ —Å –∑–∞–¥–∞—á–∞–º–∏?",
                "ü§ñ –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –¥–Ω—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π!",
                "‚ú® –ò—Å–ø–æ–ª—å–∑—É–π /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
                "üéØ –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞—á!"
            ]
        
        return random.choice(responses)
    
    async def suggest_tasks(self, user: User, category: Optional[str] = None) -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ AI"""
        if not self.enabled:
            return self._get_fallback_task_suggestions(category)
        
        try:
            user_context = self._build_user_context(user)
            category_filter = f" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'" if category else ""
            
            prompt = f"""–ù–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–µ–¥–ª–æ–∂–∏ 5 –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á{category_filter}.

{user_context}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ó–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏–º—ã–º–∏
- –£—á–∏—Ç—ã–≤–∞–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏
- –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
- –ë–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
            
            response = await self.client.chat.completions.create(
                model=BotConfig.OPENAI_MODEL,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=500,
                temperature=0.8
            )
            
            suggestions = response.choices[0].message.content.strip().split('\n')
            return [s.strip() for s in suggestions if s.strip()][:5]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∑–∞–¥–∞—á: {e}")
            return self._get_fallback_task_suggestions(category)
    
    def _get_fallback_task_suggestions(self, category: Optional[str] = None) -> List[str]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        suggestions = {
            "health": [
                "–í—ã–ø–∏—Ç—å 8 —Å—Ç–∞–∫–∞–Ω–æ–≤ –≤–æ–¥—ã",
                "–°–¥–µ–ª–∞—Ç—å 10-–º–∏–Ω—É—Ç–Ω—É—é –∑–∞—Ä—è–¥–∫—É",
                "–ü—Ä–æ–π—Ç–∏ 10,000 —à–∞–≥–æ–≤",
                "–°—ä–µ—Å—Ç—å –ø–æ—Ä—Ü–∏—é –æ–≤–æ—â–µ–π",
                "–°–ø–∞—Ç—å 8 —á–∞—Å–æ–≤"
            ],
            "work": [
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞–∂–Ω—ã–µ –ø–∏—Å—å–º–∞",
                "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é —Ä–∞–±–æ—á—É—é –∑–∞–¥–∞—á—É",
                "–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å",
                "–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª",
                "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ"
            ],
            "learning": [
                "–ü—Ä–æ—á–∏—Ç–∞—Ç—å 20 —Å—Ç—Ä–∞–Ω–∏—Ü –∫–Ω–∏–≥–∏",
                "–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞",
                "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ",
                "–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ",
                "–ù–∞–ø–∏—Å–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç"
            ],
            "personal": [
                "–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å —Å–µ–º—å–µ–π/–¥—Ä—É–∑—å—è–º–∏",
                "–ú–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å 10 –º–∏–Ω—É—Ç",
                "–ó–∞–ø–∏—Å–∞—Ç—å 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω",
                "–£–±—Ä–∞—Ç—å –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ",
                "–ü–æ—Å–ª—É—à–∞—Ç—å –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É"
            ],
            "finance": [
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞",
                "–ó–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –¥–µ–Ω—å",
                "–û—Ç–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –∫–æ–ø–∏–ª–∫—É",
                "–ò–∑—É—á–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç"
            ]
        }
        
        if category and category in suggestions:
            return suggestions[category]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        all_tasks = []
        for tasks in suggestions.values():
            all_tasks.extend(tasks)
        
        return random.sample(all_tasks, min(5, len(all_tasks)))
