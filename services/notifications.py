"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import logging
from datetime import datetime, time
from typing import Dict, List, Optional

try:
    from apscheduler.schedulers.asyncio import AsyncIOScheduler
    from apscheduler.triggers.cron import CronTrigger
    SCHEDULER_AVAILABLE = True
except ImportError:
    SCHEDULER_AVAILABLE = False

from models import User, Reminder

logger = logging.getLogger('dailycheck')

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    
    def __init__(self, bot_application, db_manager):
        self.bot_application = bot_application
        self.db_manager = db_manager
        self.scheduler = None
        
        if SCHEDULER_AVAILABLE:
            self.scheduler = AsyncIOScheduler()
            self.setup_default_notifications()
            self.scheduler.start()
            logger.info("üìÖ –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è APScheduler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    
    def setup_default_notifications(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.scheduler:
            return
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 9 —É—Ç—Ä–∞
        self.scheduler.add_job(
            self.send_daily_reminders,
            CronTrigger(hour=9, minute=0),
            id='daily_reminders',
            replace_existing=True
        )
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º –≤ 20:00
        self.scheduler.add_job(
            self.send_weekly_stats,
            CronTrigger(day_of_week=6, hour=20, minute=0),  # Sunday
            id='weekly_stats',
            replace_existing=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.scheduler.add_job(
            self.check_user_reminders,
            'interval',
            minutes=5,
            id='user_reminders',
            replace_existing=True
        )
    
    async def send_daily_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            users = self.db_manager.get_all_users()
            
            for user in users:
                if not user.settings.reminder_enabled:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
                reminder_time = user.settings.daily_reminder_time
                current_time = datetime.now().strftime('%H:%M')
                
                if reminder_time == current_time:
                    await self._send_daily_reminder_to_user(user)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    async def _send_daily_reminder_to_user(self, user: User):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            incomplete_tasks = [
                task for task in user.active_tasks.values() 
                if not task.is_completed_today()
            ]
            
            if not incomplete_tasks:
                message = f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {user.display_name}!\n\n‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –≤—á–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n\n–ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤–æ–º—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –¥–Ω—é? üí™"
            else:
                message = f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {user.display_name}!\n\nüìã –£ –≤–∞—Å {len(incomplete_tasks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                
                for i, task in enumerate(incomplete_tasks[:3], 1):
                    message += f"{i}. {task.title}\n"
                
                if len(incomplete_tasks) > 3:
                    message += f"... –∏ –µ—â–µ {len(incomplete_tasks) - 3}\n"
                
                message += "\n–£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è! üöÄ"
            
            await self.bot_application.bot.send_message(
                chat_id=user.user_id,
                text=message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
    
    async def send_weekly_stats(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            users = self.db_manager.get_all_users()
            
            for user in users:
                if not user.settings.weekly_stats:
                    continue
                
                await self._send_weekly_stats_to_user(user)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def _send_weekly_stats_to_user(self, user: User):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            week_progress = user.get_week_progress()
            
            message = f"""üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

–ü—Ä–∏–≤–µ—Ç, {user.display_name}! –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏:

üéØ **–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á:**
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {week_progress['completed']} –∏–∑ {week_progress['goal']}
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {week_progress['progress_percentage']:.1f}%

‚≠ê **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {user.stats.level} ({user.stats.get_level_title()})
‚Ä¢ –û–±—â–∏–π XP: {user.stats.total_xp}
‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {user.stats.completed_tasks} –∑–∞–¥–∞—á

üî• **Streak'–∏:**"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ streak'–∞—Ö
            active_streaks = [task.current_streak for task in user.active_tasks.values()]
            if active_streaks:
                max_streak = max(active_streaks)
                avg_streak = sum(active_streaks) / len(active_streaks)
                message += f"\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {max_streak} –¥–Ω–µ–π\n‚Ä¢ –°—Ä–µ–¥–Ω–∏–π: {avg_streak:.1f} –¥–Ω–µ–π"
            
            # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if week_progress['progress_percentage'] >= 100:
                message += "\n\nüéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–µ–¥–µ–ª—å–Ω—É—é —Ü–µ–ª—å!"
            elif week_progress['progress_percentage'] >= 70:
                message += "\n\nüí™ **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!** –í—ã –±–ª–∏–∑–∫–∏ –∫ —Ü–µ–ª–∏!"
            else:
                message += "\n\nüöÄ **–ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!** –í–ø–µ—Ä–µ–¥ –∫ —Ü–µ–ª—è–º!"
            
            await self.bot_application.bot.send_message(
                chat_id=user.user_id,
                text=message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
    
    async def check_user_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            users = self.db_manager.get_all_users()
            current_time = datetime.now().strftime('%H:%M')
            
            for user in users:
                for reminder in user.reminders:
                    if not reminder.is_active:
                        continue
                    
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                    if reminder.trigger_time == current_time:
                        await self._send_user_reminder(user, reminder)
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    async def _send_user_reminder(self, user: User, reminder: Reminder):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            message = f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ**\n\nüìù {reminder.title}\n\n{reminder.message}"
            
            await self.bot_application.bot.send_message(
                chat_id=user.user_id,
                text=message,
                parse_mode='Markdown'
            )
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {reminder.title}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    async def add_user_reminder(self, user: User, title: str, message: str, 
                              trigger_time: str, is_recurring: bool = False) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            reminder_id = user.add_reminder(title, message, trigger_time, is_recurring)
            self.db_manager.save_user(user)
            
            logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {title}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return False
    
    async def send_achievement_notification(self, user: User, achievement_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏"""
        try:
            from models import AchievementSystem
            message = AchievementSystem.get_achievement_message(achievement_id, user)
            
            await self.bot_application.bot.send_message(
                chat_id=user.user_id,
                text=message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏: {e}")
    
    async def send_motivational_message(self, user: User):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not user.settings.motivational_messages:
            return
        
        try:
            messages = [
                f"üí™ {user.display_name}, –ø–æ–º–Ω–∏: –∫–∞–∂–¥—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ –±–æ–ª—å—à–æ–π —Ü–µ–ª–∏!",
                f"üåü –¢—ã —É–∂–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ {user.stats.level}! –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥!",
                f"üî• –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≥–æ–≤–æ—Ä—è—Ç —Å–∞–º–∏ –∑–∞ —Å–µ–±—è - —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –º–Ω–æ–≥–æ–µ!",
                f"üéØ –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π!",
                f"‚≠ê –ö–∞–∂–¥–∞—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ!"
            ]
            
            import random
            message = random.choice(messages)
            
            await self.bot_application.bot.send_message(
                chat_id=user.user_id,
                text=message
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.scheduler and self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("üìÖ –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    # –¢–µ—Å—Ç AI —Å–µ—Ä–≤–∏—Å–∞
    ai_service = AIService()
    print(f"ü§ñ AI —Å–µ—Ä–≤–∏—Å: {'‚úÖ –≤–∫–ª—é—á–µ–Ω' if ai_service.enabled else '‚ùå –æ—Ç–∫–ª—é—á–µ–Ω'}")
    
    # –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    from models import User, UserSettings, UserStats
    test_user = User(user_id=123, first_name="–¢–µ—Å—Ç")
    
    request_type = ai_service.classify_request("–ú–æ—Ç–∏–≤–∏—Ä—É–π –º–µ–Ω—è", test_user)
    print(f"üéØ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞: {request_type}")
    
    # –¢–µ—Å—Ç fallback –æ—Ç–≤–µ—Ç–æ–≤
    response = ai_service._get_fallback_response("–ü–æ–º–æ–≥–∏ —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π", test_user)
    print(f"üí¨ Fallback –æ—Ç–≤–µ—Ç: {response[:50]}...")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
