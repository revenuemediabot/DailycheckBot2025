# services/__init__.py

"""
–ú–æ–¥—É–ª—å —Å–µ—Ä–≤–∏—Å–æ–≤ DailyCheck Bot v4.0

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π –±–æ—Ç–∞.
"""

import logging
from typing import Optional

from .data_service import DataService, get_data_service, initialize_data_service, close_data_service
from .task_service import TaskService, get_task_service, initialize_task_service

logger = logging.getLogger(__name__)

class ServiceManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –±–æ—Ç–∞
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ü—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
    - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    """
    
    def __init__(self):
        self.data_service: Optional[DataService] = None
        self.task_service: Optional[TaskService] = None
        self.initialized = False
    
    def initialize_services(self, data_file: str = None) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ DailyCheck Bot...")
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–∞–Ω–Ω—ã—Ö (–±–∞–∑–æ–≤—ã–π)
            logger.info("üìÇ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataService...")
            self.data_service = initialize_data_service(data_file)
            
            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∑–∞–¥–∞—á (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç DataService)
            logger.info("üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TaskService...")
            self.task_service = initialize_task_service(self.data_service)
            
            self.initialized = True
            logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            self.close_services()
            return False
    
    def get_services_info(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        info = {
            "initialized": self.initialized,
            "services": {}
        }
        
        if self.data_service:
            info["services"]["data_service"] = {
                "status": "active",
                "users_count": self.data_service.get_users_count(),
                "metrics": self.data_service.get_service_metrics()
            }
        
        if self.task_service:
            info["services"]["task_service"] = {
                "status": "active"
            }
        
        return info
    
    def health_check(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        health = {
            "status": "healthy",
            "services": {}
        }
        
        if self.data_service:
            health["services"]["data_service"] = self.data_service.health_check()
        
        if self.task_service:
            health["services"]["task_service"] = {"status": "healthy"}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        service_statuses = [s.get("status", "unknown") for s in health["services"].values()]
        if "error" in service_statuses:
            health["status"] = "error"
        elif "warning" in service_statuses:
            health["status"] = "warning"
        
        return health
    
    def close_services(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            logger.info("üõë –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if self.task_service:
                logger.info("üìù –ó–∞–∫—Ä—ã—Ç–∏–µ TaskService...")
                # TaskService –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                self.task_service = None
            
            if self.data_service:
                logger.info("üìÇ –ó–∞–∫—Ä—ã—Ç–∏–µ DataService...")
                close_data_service()
                self.data_service = None
            
            self.initialized = False
            logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–∫—Ä—ã—Ç—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
    
    def __enter__(self):
        """Context manager –≤—Ö–æ–¥"""
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager –≤—ã—Ö–æ–¥"""
        self.close_services()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
_service_manager = None

def get_service_manager() -> ServiceManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤"""
    global _service_manager
    if _service_manager is None:
        _service_manager = ServiceManager()
    return _service_manager

def initialize_all_services(data_file: str = None) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    manager = get_service_manager()
    return manager.initialize_services(data_file)

def close_all_services():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    global _service_manager
    if _service_manager:
        _service_manager.close_services()
        _service_manager = None

def get_services_health() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    manager = get_service_manager()
    return manager.health_check()

# –≠–∫—Å–ø–æ—Ä—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
__all__ = [
    'DataService',
    'TaskService', 
    'ServiceManager',
    'get_data_service',
    'get_task_service',
    'get_service_manager',
    'initialize_all_services',
    'close_all_services',
    'get_services_health'
]
