# services/task_service.py

import asyncio
import logging
import uuid
from datetime import datetime, date, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field, asdict
from enum import Enum

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–∞–Ω–Ω—ã—Ö
from services.data_service import get_data_service, DataService

logger = logging.getLogger(__name__)

# ===== –ï–ù–£–ú–´ –ò –ö–û–ù–°–¢–ê–ù–¢–´ =====

class TaskStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á"""
    ACTIVE = "active"
    COMPLETED = "completed"
    PAUSED = "paused"
    ARCHIVED = "archived"

class TaskPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"

class TaskCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á"""
    WORK = "work"
    HEALTH = "health"
    LEARNING = "learning"
    PERSONAL = "personal"
    FINANCE = "finance"

# ===== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• =====

@dataclass
class TaskCompletion:
    """–ó–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
    date: str  # ISO —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (YYYY-MM-DD)
    completed: bool
    note: Optional[str] = None
    timestamp: str = field(default_factory=lambda: datetime.now().isoformat())
    time_spent: Optional[int] = None  # –≤ –º–∏–Ω—É—Ç–∞—Ö
    
    def to_dict(self) -> dict:
        return asdict(self)
    
    @classmethod
    def from_dict(cls, data: dict) -> "TaskCompletion":
        return cls(**data)

@dataclass 
class Subtask:
    """–ü–æ–¥–∑–∞–¥–∞—á–∞"""
    subtask_id: str
    title: str
    completed: bool = False
    created_at: str = field(default_factory=lambda: datetime.now().isoformat())
    
    def to_dict(self) -> dict:
        return asdict(self)
    
    @classmethod
    def from_dict(cls, data: dict) -> "Subtask":
        return cls(**data)

@dataclass
class Task:
    """–ú–æ–¥–µ–ª—å –∑–∞–¥–∞—á–∏ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    task_id: str
    user_id: int
    title: str
    description: Optional[str] = None
    category: str = "personal"
    priority: str = "medium"
    status: str = "active"
    created_at: str = field(default_factory=lambda: datetime.now().isoformat())
    completions: List[TaskCompletion] = field(default_factory=list)
    subtasks: List[Subtask] = field(default_factory=list)
    tags: List[str] = field(default_factory=list)
    is_daily: bool = True
    reminder_time: Optional[str] = None
    estimated_time: Optional[int] = None  # –≤ –º–∏–Ω—É—Ç–∞—Ö
    difficulty: int = 1  # 1-5
    
    @property
    def current_streak(self) -> int:
        """–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if not self.completions:
            return 0
        
        completed_dates = [
            date.fromisoformat(c.date) for c in self.completions 
            if c.completed
        ]
        completed_dates.sort(reverse=True)
        
        if not completed_dates:
            return 0
        
        streak = 0
        current_date = date.today()
        
        for comp_date in completed_dates:
            if comp_date == current_date:
                streak += 1
                current_date = date.fromordinal(current_date.toordinal() - 1)
            else:
                break
        
        return streak
    
    @property
    def completion_rate_week(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"""
        week_ago = date.today() - timedelta(days=7)
        week_completions = [
            c for c in self.completions 
            if date.fromisoformat(c.date) >= week_ago and c.completed
        ]
        return len(week_completions) / 7 * 100
    
    @property
    def completion_rate_month(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"""
        month_ago = date.today() - timedelta(days=30)
        month_completions = [
            c for c in self.completions 
            if date.fromisoformat(c.date) >= month_ago and c.completed
        ]
        return len(month_completions) / 30 * 100
    
    @property
    def subtasks_completed_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥–∑–∞–¥–∞—á"""
        return sum(1 for subtask in self.subtasks if subtask.completed)
    
    @property
    def subtasks_total_count(self) -> int:
        """–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∑–∞–¥–∞—á"""
        return len(self.subtasks)
    
    @property
    def xp_value(self) -> int:
        """XP –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        base_xp = {"low": 10, "medium": 20, "high": 30}.get(self.priority, 20)
        difficulty_multiplier = self.difficulty * 0.2 + 0.8
        streak_bonus = min(self.current_streak * 2, 50)
        return int(base_xp * difficulty_multiplier + streak_bonus)
    
    def is_completed_today(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è"""
        today = date.today().isoformat()
        return any(c.date == today and c.completed for c in self.completions)
    
    def mark_completed(self, note: Optional[str] = None, time_spent: Optional[int] = None) -> bool:
        """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        today = date.today().isoformat()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
        for completion in self.completions:
            if completion.date == today:
                completion.completed = True
                completion.note = note
                completion.time_spent = time_spent
                completion.timestamp = datetime.now().isoformat()
                return True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        self.completions.append(TaskCompletion(
            date=today,
            completed=True,
            note=note,
            time_spent=time_spent
        ))
        return True
    
    def mark_uncompleted(self) -> bool:
        """–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        today = date.today().isoformat()
        
        for completion in self.completions:
            if completion.date == today:
                completion.completed = False
                completion.timestamp = datetime.now().isoformat()
                return True
        
        return False
    
    def add_subtask(self, title: str) -> str:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É"""
        subtask = Subtask(
            subtask_id=str(uuid.uuid4()),
            title=title
        )
        self.subtasks.append(subtask)
        return subtask.subtask_id
    
    def toggle_subtask(self, subtask_id: str) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∑–∞–¥–∞—á–∏"""
        for subtask in self.subtasks:
            if subtask.subtask_id == subtask_id:
                subtask.completed = not subtask.completed
                return True
        return False
    
    def update_field(self, field: str, value: Any) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ –∑–∞–¥–∞—á–∏"""
        if hasattr(self, field):
            setattr(self, field, value)
            return True
        return False
    
    def to_dict(self) -> dict:
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "task_id": self.task_id,
            "user_id": self.user_id,
            "title": self.title,
            "description": self.description,
            "category": self.category,
            "priority": self.priority,
            "status": self.status,
            "created_at": self.created_at,
            "completions": [c.to_dict() for c in self.completions],
            "subtasks": [s.to_dict() for s in self.subtasks],
            "tags": self.tags,
            "is_daily": self.is_daily,
            "reminder_time": self.reminder_time,
            "estimated_time": self.estimated_time,
            "difficulty": self.difficulty
        }
    
    @classmethod
    def from_dict(cls, data: dict) -> "Task":
        """–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        task = cls(
            task_id=data["task_id"],
            user_id=data["user_id"],
            title=data["title"],
            description=data.get("description"),
            category=data.get("category", "personal"),
            priority=data.get("priority", "medium"),
            status=data.get("status", "active"),
            created_at=data.get("created_at", datetime.now().isoformat()),
            tags=data.get("tags", []),
            is_daily=data.get("is_daily", True),
            reminder_time=data.get("reminder_time"),
            estimated_time=data.get("estimated_time"),
            difficulty=data.get("difficulty", 1)
        )
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        if "completions" in data:
            task.completions = [
                TaskCompletion.from_dict(c) if isinstance(c, dict) else c
                for c in data["completions"]
            ]
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏
        if "subtasks" in data:
            task.subtasks = [
                Subtask.from_dict(s) if isinstance(s, dict) else s
                for s in data["subtasks"]
            ]
        
        return task

# ===== –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô =====

class AchievementSystem:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á"""
    
    ACHIEVEMENTS = {
        'first_task': {
            'title': '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
            'description': '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É',
            'icon': 'üéØ',
            'xp_reward': 50,
            'condition': lambda user_data: len(user_data.get("tasks", {})) >= 1
        },
        'streak_3': {
            'title': '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
            'description': '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ streak 3 –¥–Ω—è',
            'icon': 'üî•',
            'xp_reward': 100,
            'condition': lambda user_data: TaskService.get_max_streak_from_user_data(user_data) >= 3
        },
        'streak_7': {
            'title': '–ù–µ–¥–µ–ª—è —Å–∏–ª—ã',
            'description': '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ streak 7 –¥–Ω–µ–π',
            'icon': 'üí™',
            'xp_reward': 200,
            'condition': lambda user_data: TaskService.get_max_streak_from_user_data(user_data) >= 7
        },
        'streak_30': {
            'title': '–ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫',
            'description': '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ streak 30 –¥–Ω–µ–π',
            'icon': 'üíé',
            'xp_reward': 500,
            'condition': lambda user_data: TaskService.get_max_streak_from_user_data(user_data) >= 30
        },
        'streak_100': {
            'title': '–õ–µ–≥–µ–Ω–¥–∞',
            'description': '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ streak 100 –¥–Ω–µ–π',
            'icon': 'üëë',
            'xp_reward': 1000,
            'condition': lambda user_data: TaskService.get_max_streak_from_user_data(user_data) >= 100
        },
        'tasks_10': {
            'title': '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π',
            'description': '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 10 –∑–∞–¥–∞—á',
            'icon': 'üìà',
            'xp_reward': 100,
            'condition': lambda user_data: user_data.get("stats", {}).get("completed_tasks", 0) >= 10
        },
        'tasks_50': {
            'title': '–≠–Ω—Ç—É–∑–∏–∞—Å—Ç',
            'description': '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 50 –∑–∞–¥–∞—á',
            'icon': 'üèÜ',
            'xp_reward': 250,
            'condition': lambda user_data: user_data.get("stats", {}).get("completed_tasks", 0) >= 50
        },
        'tasks_100': {
            'title': '–ß–µ–º–ø–∏–æ–Ω',
            'description': '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 100 –∑–∞–¥–∞—á',
            'icon': 'üåü',
            'xp_reward': 500,
            'condition': lambda user_data: user_data.get("stats", {}).get("completed_tasks", 0) >= 100
        },
        'tasks_500': {
            'title': '–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            'description': '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 500 –∑–∞–¥–∞—á',
            'icon': '‚≠ê',
            'xp_reward': 1000,
            'condition': lambda user_data: user_data.get("stats", {}).get("completed_tasks", 0) >= 500
        },
        'all_categories': {
            'title': '–£–Ω–∏–≤–µ—Ä—Å–∞–ª',
            'description': '–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö',
            'icon': 'üåà',
            'xp_reward': 200,
            'condition': lambda user_data: TaskService.check_all_categories_used(user_data)
        },
        'perfect_week': {
            'title': '–ò–¥–µ–∞–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—è',
            'description': '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –∑–∞–¥–∞—á–∏ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
            'icon': '‚ú®',
            'xp_reward': 300,
            'condition': lambda user_data: TaskService.check_perfect_week(user_data)
        },
        'subtask_master': {
            'title': '–ú–∞—Å—Ç–µ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
            'description': '–°–æ–∑–¥–∞–π—Ç–µ 10 –ø–æ–¥–∑–∞–¥–∞—á',
            'icon': 'üìã',
            'xp_reward': 150,
            'condition': lambda user_data: TaskService.count_total_subtasks(user_data) >= 10
        },
        'tag_organizer': {
            'title': '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä',
            'description': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 5 —Ä–∞–∑–Ω—ã—Ö —Ç–µ–≥–æ–≤',
            'icon': 'üè∑Ô∏è',
            'xp_reward': 100,
            'condition': lambda user_data: TaskService.count_unique_tags(user_data) >= 5
        }
    }
    
    @classmethod
    def check_achievements(cls, user_data: Dict) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        new_achievements = []
        user_achievements = user_data.get("achievements", [])
        
        for achievement_id, achievement_data in cls.ACHIEVEMENTS.items():
            if achievement_id not in user_achievements:
                try:
                    if achievement_data['condition'](user_data):
                        user_achievements.append(achievement_id)
                        new_achievements.append(achievement_id)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º XP –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                        xp_reward = achievement_data.get('xp_reward', 50)
                        stats = user_data.setdefault("stats", {})
                        stats["total_xp"] = stats.get("total_xp", 0) + xp_reward
                        stats["daily_xp_earned"] = stats.get("daily_xp_earned", 0) + xp_reward
                        
                        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
                        TaskService._update_user_level(stats)
                        
                        logger.info(f"üèÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data.get('user_id')} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement_id} (+{xp_reward} XP)")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è {achievement_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data["achievements"] = user_achievements
        
        return new_achievements
    
    @classmethod
    def get_achievement_info(cls, achievement_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏"""
        return cls.ACHIEVEMENTS.get(achievement_id)
    
    @classmethod
    def get_achievements_progress(cls, user_data: Dict) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º"""
        progress = {}
        user_achievements = user_data.get("achievements", [])
        
        for achievement_id, achievement_data in cls.ACHIEVEMENTS.items():
            is_earned = achievement_id in user_achievements
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            current_progress = 0
            target = 1
            
            if "tasks_" in achievement_id:
                target = int(achievement_id.split("_")[1])
                current_progress = user_data.get("stats", {}).get("completed_tasks", 0)
            elif "streak_" in achievement_id:
                target = int(achievement_id.split("_")[1])
                current_progress = TaskService.get_max_streak_from_user_data(user_data)
            
            progress[achievement_id] = {
                "title": achievement_data["title"],
                "description": achievement_data["description"],
                "icon": achievement_data["icon"],
                "xp_reward": achievement_data["xp_reward"],
                "is_earned": is_earned,
                "progress": min(current_progress, target),
                "target": target,
                "progress_percentage": min((current_progress / target) * 100, 100) if target > 0 else 100
            }
        
        return progress

# ===== –û–°–ù–û–í–ù–û–ô –°–ï–†–í–ò–° –ó–ê–î–ê–ß =====

class TaskService:
    """
    –ü–æ–ª–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –°–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏ streak'–∞–º–∏
    - –†–∞–±–æ—Ç–∞ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏ –∏ —Ç–µ–≥–∞–º–∏
    - –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ XP
    - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ –∑–∞–¥–∞—á
    """
    
    def __init__(self, data_service: DataService = None):
        self.data_service = data_service or get_data_service()
        logger.info("‚úÖ TaskService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # ===== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ CRUD =====
    
    async def create_task(self, user_id: int, title: str, **kwargs) -> str:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.data_service.get_user_data(user_id)
            if not user_data:
                user_data = self._create_empty_user_data(user_id)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            task = Task(
                task_id=str(uuid.uuid4()),
                user_id=user_id,
                title=title,
                description=kwargs.get("description"),
                category=kwargs.get("category", "personal"),
                priority=kwargs.get("priority", "medium"),
                difficulty=kwargs.get("difficulty", 1),
                estimated_time=kwargs.get("estimated_time"),
                tags=kwargs.get("tags", []),
                is_daily=kwargs.get("is_daily", True)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tasks = user_data.setdefault("tasks", {})
            tasks[task.task_id] = task.to_dict()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = user_data.setdefault("stats", {})
            stats["total_tasks"] = stats.get("total_tasks", 0) + 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            new_achievements = AchievementSystem.check_achievements(user_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            self.data_service.save_user_data(user_id, user_data)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {task.task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {title}")
            
            return task.task_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            raise
    
    async def get_task(self, user_id: int, task_id: str) -> Optional[Task]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID"""
        try:
            user_data = self.data_service.get_user_data(user_id)
            if not user_data:
                return None
            
            tasks = user_data.get("tasks", {})
            task_data = tasks.get(task_id)
            
            if task_data:
                return Task.from_dict(task_data)
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    async def get_user_tasks(self, user_id: int, status_filter: str = None) -> List[Task]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            user_data = self.data_service.get_user_data(user_id)
            if not user_data:
                return []
            
            tasks = user_data.get("tasks", {})
            task_objects = []
            
            for task_data in tasks.values():
                task = Task.from_dict(task_data)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞
                if status_filter and task.status != status_filter:
                    continue
                
                task_objects.append(task)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            priority_order = {"high": 3, "medium": 2, "low": 1}
            task_objects.sort(
                key=lambda t: (
                    priority_order.get(t.priority, 2),
                    datetime.fromisoformat(t.created_at)
                ),
                reverse=True
            )
            
            return task_objects
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []
    
    async def update_task(self, user_id: int, task_id: str, **updates) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É"""
        try:
            user_data = self.data_service.get_user_data(user_id)
            if not user_data:
                return False
            
            tasks = user_data.get("tasks", {})
            if task_id not in tasks:
                return False
            
            task_data = tasks[task_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            for field, value in updates.items():
                if field in task_data:
                    task_data[field] = value
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.data_service.save_user_data(user_id, user_data)
            
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def delete_task(self, user_id: int, task_id: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"""
        try:
            user_data = self.data_service.get_user_data(user_id)
            if not user_data:
                return False
            
            tasks = user_data.get("tasks", {})
            if task_id not in tasks:
                return False
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
            del tasks[task_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = user_data.setdefault("stats", {})
            stats["total_tasks"] = max(0, stats.get("total_tasks", 0) - 1)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.data_service.save_user_data(user_id, user_data)
            
            logger.info(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    # ===== –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–î–ê–ß =====
    
    async def complete_task(self, user_id: int, task_id: str, note: str = None, time_spent: int = None) -> bool:
        """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        try:
            user_data = self.data_service.get_user_data(user_id)
            if not user_data:
                return False
            
            tasks = user_data.get("tasks", {})
            if task_id not in tasks:
                return False
            
            task_data = tasks[task_id]
            task = Task.from_dict(task_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
            if task.is_completed_today():
                return False
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            if task.mark_completed(note, time_spent):
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                tasks[task_id] = task.to_dict()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                stats = user_data.setdefault("stats", {})
                stats["completed_tasks"] = stats.get("completed_tasks", 0) + 1
                stats["tasks_completed_today"] = stats.get("tasks_completed_today", 0) + 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º XP
                xp_earned = task.xp_value
                stats["total_xp"] = stats.get("total_xp", 0) + xp_earned
                stats["daily_xp_earned"] = stats.get("daily_xp_earned", 0) + xp_earned
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
                self._update_user_level(stats)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π streak
                current_streak = task.current_streak
                if current_streak > stats.get("longest_streak", 0):
                    stats["longest_streak"] = current_streak
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                new_achievements = AchievementSystem.check_achievements(user_data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                self.data_service.save_user_data(user_id, user_data)
                
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} (+{xp_earned} XP, streak: {current_streak})")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def uncomplete_task(self, user_id: int, task_id: str) -> bool:
        """–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            user_data = self.data_service.get_user_data(user_id)
            if not user_data:
                return False
            
            tasks = user_data.get("tasks", {})
            if task_id not in tasks:
                return False
            
            task_data = tasks[task_id]
            task = Task.from_dict(task_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —Å–µ–≥–æ–¥–Ω—è
            if not task.is_completed_today():
                return False
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            if task.mark_uncompleted():
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                tasks[task_id] = task.to_dict()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                stats = user_data.setdefault("stats", {})
                stats["completed_tasks"] = max(0, stats.get("completed_tasks", 0) - 1)
                stats["tasks_completed_today"] = max(0, stats.get("tasks_completed_today", 0) - 1)
                
                # –û—Ç–Ω–∏–º–∞–µ–º XP
                xp_lost = task.xp_value
                stats["total_xp"] = max(0, stats.get("total_xp", 0) - xp_lost)
                stats["daily_xp_earned"] = max(0, stats.get("daily_xp_earned", 0) - xp_lost)
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
                self._update_user_level(stats)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                self.data_service.save_user_data(user_id, user_data)
                
                logger.info(f"‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id} –æ—Ç–º–µ–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (-{xp_lost} XP)")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    # ===== –ü–û–î–ó–ê–î–ê–ß–ò =====
    
    async def add_subtask(self, user_id: int, task_id: str, subtitle: str) -> Optional[str]:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É"""
        try:
            user_data = self.data_service.get_user_data(user_id)
            if not user_data:
                return None
            
            tasks = user_data.get("tasks", {})
            if task_id not in tasks:
                return None
            
            task_data = tasks[task_id]
            task = Task.from_dict(task_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É
            subtask_id = task.add_subtask(subtitle)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            tasks[task_id] = task.to_dict()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.data_service.save_user_data(user_id, user_data)
            
            logger.info(f"‚úÖ –ü–æ–¥–∑–∞–¥–∞—á–∞ {subtask_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –∑–∞–¥–∞—á–µ {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return subtask_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    async def toggle_subtask(self, user_id: int, task_id: str, subtask_id: str) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∑–∞–¥–∞—á–∏"""
        try:
            user_data = self.data_service.get_user_data(user_id)
            if not user_data:
                return False
            
            tasks = user_data.get("tasks", {})
            if task_id not in tasks:
                return False
            
            task_data = tasks[task_id]
            task = Task.from_dict(task_data)
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É
            if task.toggle_subtask(subtask_id):
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                tasks[task_id] = task.to_dict()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                self.data_service.save_user_data(user_id, user_data)
                
                logger.info(f"‚úÖ –ü–æ–¥–∑–∞–¥–∞—á–∞ {subtask_id} –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏ {subtask_id} –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    # ===== –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø =====
    
    async def search_tasks(self, user_id: int, query: str, filters: Dict = None) -> List[Task]:
        """–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
        try:
            all_tasks = await self.get_user_tasks(user_id)
            
            if not query and not filters:
                return all_tasks
            
            results = []
            query_lower = query.lower() if query else ""
            
            for task in all_tasks:
                match = True
                
                # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
                if query:
                    text_match = (
                        query_lower in task.title.lower() or
                        (task.description and query_lower in task.description.lower()) or
                        any(query_lower in tag.lower() for tag in task.tags)
                    )
                    if not text_match:
                        match = False
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                if filters and match:
                    if "category" in filters and task.category != filters["category"]:
                        match = False
                    
                    if "priority" in filters and task.priority != filters["priority"]:
                        match = False
                    
                    if "status" in filters and task.status != filters["status"]:
                        match = False
                    
                    if "completed_today" in filters:
                        is_completed = task.is_completed_today()
                        if filters["completed_today"] != is_completed:
                            match = False
                    
                    if "min_streak" in filters and task.current_streak < filters["min_streak"]:
                        match = False
                    
                    if "has_subtasks" in filters:
                        has_subtasks = len(task.subtasks) > 0
                        if filters["has_subtasks"] != has_subtasks:
                            match = False
                
                if match:
                    results.append(task)
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []
    
    async def get_tasks_by_category(self, user_id: int) -> Dict[str, List[Task]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        try:
            all_tasks = await self.get_user_tasks(user_id)
            
            categories = {}
            for task in all_tasks:
                category = task.category
                if category not in categories:
                    categories[category] = []
                categories[category].append(task)
            
            return categories
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {}
    
    async def get_tasks_by_priority(self, user_id: int) -> Dict[str, List[Task]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        try:
            all_tasks = await self.get_user_tasks(user_id)
            
            priorities = {"high": [], "medium": [], "low": []}
            for task in all_tasks:
                priority = task.priority
                if priority in priorities:
                    priorities[priority].append(task)
            
            return priorities
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {}
    
    # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê =====
    
    async def get_user_task_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_data = self.data_service.get_user_data(user_id)
            if not user_data:
                return {}
            
            all_tasks = await self.get_user_tasks(user_id)
            active_tasks = [t for t in all_tasks if t.status == "active"]
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = {
                "total_tasks": len(all_tasks),
                "active_tasks": len(active_tasks),
                "completed_today": len([t for t in active_tasks if t.is_completed_today()]),
                "paused_tasks": len([t for t in all_tasks if t.status == "paused"]),
                "archived_tasks": len([t for t in all_tasks if t.status == "archived"])
            }
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            stats["by_category"] = {}
            for task in all_tasks:
                category = task.category
                if category not in stats["by_category"]:
                    stats["by_category"][category] = {"total": 0, "active": 0, "completed_today": 0}
                
                stats["by_category"][category]["total"] += 1
                if task.status == "active":
                    stats["by_category"][category]["active"] += 1
                    if task.is_completed_today():
                        stats["by_category"][category]["completed_today"] += 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
            stats["by_priority"] = {}
            for priority in ["high", "medium", "low"]:
                priority_tasks = [t for t in active_tasks if t.priority == priority]
                stats["by_priority"][priority] = {
                    "total": len(priority_tasks),
                    "completed_today": len([t for t in priority_tasks if t.is_completed_today()])
                }
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ streak'–æ–≤
            streaks = [task.current_streak for task in active_tasks]
            if streaks:
                stats["streaks"] = {
                    "max": max(streaks),
                    "average": sum(streaks) / len(streaks),
                    "total_with_streak": len([s for s in streaks if s > 0])
                }
            else:
                stats["streaks"] = {"max": 0, "average": 0, "total_with_streak": 0}
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if active_tasks:
                stats["completion_rate_today"] = (stats["completed_today"] / len(active_tasks)) * 100
            else:
                stats["completion_rate_today"] = 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∑–∞–¥–∞—á
            total_subtasks = sum(len(task.subtasks) for task in all_tasks)
            completed_subtasks = sum(task.subtasks_completed_count for task in all_tasks)
            
            stats["subtasks"] = {
                "total": total_subtasks,
                "completed": completed_subtasks,
                "completion_rate": (completed_subtasks / total_subtasks * 100) if total_subtasks > 0 else 0
            }
            
            # –¢—Ä–µ–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
            stats["weekly_trend"] = self._calculate_weekly_trend(all_tasks)
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {}
    
    def _calculate_weekly_trend(self, tasks: List[Task]) -> List[Dict]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç—Ä–µ–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é"""
        try:
            trend = []
            today = date.today()
            
            for i in range(7):
                check_date = today - timedelta(days=i)
                check_date_str = check_date.isoformat()
                
                completed_count = 0
                total_active = 0
                
                for task in tasks:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
                    created_date = datetime.fromisoformat(task.created_at).date()
                    if created_date <= check_date:
                        total_active += 1
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                        for completion in task.completions:
                            if completion.date == check_date_str and completion.completed:
                                completed_count += 1
                                break
                
                completion_rate = (completed_count / total_active * 100) if total_active > 0 else 0
                
                trend.append({
                    "date": check_date_str,
                    "completed": completed_count,
                    "total_active": total_active,
                    "completion_rate": completion_rate
                })
            
            return list(reversed(trend))  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞: {e}")
            return []
    
    # ===== –ú–ê–°–°–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò =====
    
    async def bulk_create_tasks(self, user_id: int, task_titles: List[str], default_category: str = "personal") -> List[str]:
        """–ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á"""
        try:
            created_task_ids = []
            
            for title in task_titles:
                if title.strip():
                    task_id = await self.create_task(
                        user_id=user_id,
                        title=title.strip(),
                        category=default_category
                    )
                    if task_id:
                        created_task_ids.append(task_id)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_task_ids)} –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return created_task_ids
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []
    
    async def bulk_update_tasks(self, user_id: int, updates: Dict[str, Dict]) -> Dict[str, bool]:
        """–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á"""
        try:
            results = {}
            
            for task_id, update_data in updates.items():
                success = await self.update_task(user_id, task_id, **update_data)
                results[task_id] = success
            
            successful_updates = sum(1 for success in results.values() if success)
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {successful_updates}/{len(updates)} –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {}
    
    async def reset_user_tasks(self, user_id: int, archive: bool = True) -> bool:
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_data = self.data_service.get_user_data(user_id)
            if not user_data:
                return False
            
            if archive:
                # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
                tasks = user_data.get("tasks", {})
                for task_data in tasks.values():
                    task_data["status"] = "archived"
            else:
                # –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                user_data["tasks"] = {}
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = user_data.setdefault("stats", {})
                stats["total_tasks"] = 0
                stats["tasks_completed_today"] = 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.data_service.save_user_data(user_id, user_data)
            
            action = "–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã" if archive else "—É–¥–∞–ª–µ–Ω—ã"
            logger.info(f"üîÑ –í—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {action}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    def _create_empty_user_data(self, user_id: int) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return {
            "user_id": user_id,
            "tasks": {},
            "stats": {
                "total_tasks": 0,
                "completed_tasks": 0,
                "current_streak": 0,
                "longest_streak": 0,
                "total_xp": 0,
                "level": 1,
                "tasks_completed_today": 0,
                "daily_xp_earned": 0,
                "registration_date": datetime.now().isoformat()
            },
            "achievements": [],
            "settings": {}
        }
    
    @staticmethod
    def _update_user_level(stats: Dict):
        """–û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ XP"""
        total_xp = stats.get("total_xp", 0)
        current_level = stats.get("level", 1)
        
        # –§–æ—Ä–º—É–ª–∞: level = floor(sqrt(total_xp / 100)) + 1
        import math
        new_level = math.floor(math.sqrt(total_xp / 100)) + 1
        new_level = max(1, new_level)  # –ú–∏–Ω–∏–º—É–º 1 —É—Ä–æ–≤–µ–Ω—å
        
        if new_level != current_level:
            stats["level"] = new_level
            logger.info(f"üÜô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å: {current_level} ‚Üí {new_level}")
    
    @staticmethod
    def get_max_streak_from_user_data(user_data: Dict) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π streak –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        max_streak = 0
        tasks = user_data.get("tasks", {})
        
        for task_data in tasks.values():
            if task_data.get("status") == "active":
                task = Task.from_dict(task_data)
                if task.current_streak > max_streak:
                    max_streak = task.current_streak
        
        return max_streak
    
    @staticmethod
    def check_all_categories_used(user_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        tasks = user_data.get("tasks", {})
        categories_used = set()
        
        for task_data in tasks.values():
            categories_used.add(task_data.get("category", "personal"))
        
        all_categories = {"work", "health", "learning", "personal", "finance"}
        return all_categories.issubset(categories_used)
    
    @staticmethod
    def check_perfect_week(user_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é –Ω–µ–¥–µ–ª—é"""
        tasks = user_data.get("tasks", {})
        if not tasks:
            return False
        
        today = date.today()
        
        for i in range(7):
            check_date = today - timedelta(days=i)
            check_date_str = check_date.isoformat()
            
            daily_tasks = []
            daily_completed = []
            
            for task_data in tasks.values():
                if task_data.get("status") == "active":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
                    created_date = datetime.fromisoformat(task_data.get("created_at", "")).date()
                    if created_date <= check_date:
                        daily_tasks.append(task_data)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                        completions = task_data.get("completions", [])
                        for completion in completions:
                            if completion.get("date") == check_date_str and completion.get("completed"):
                                daily_completed.append(task_data)
                                break
            
            # –ï—Å–ª–∏ –≤ –∫–∞–∫–æ–π-—Ç–æ –¥–µ–Ω—å –Ω–µ –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            if len(daily_completed) != len(daily_tasks) or len(daily_tasks) == 0:
                return False
        
        return True
    
    @staticmethod
    def count_total_subtasks(user_data: Dict) -> int:
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∑–∞–¥–∞—á"""
        tasks = user_data.get("tasks", {})
        total_subtasks = 0
        
        for task_data in tasks.values():
            subtasks = task_data.get("subtasks", [])
            total_subtasks += len(subtasks)
        
        return total_subtasks
    
    @staticmethod
    def count_unique_tags(user_data: Dict) -> int:
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤"""
        tasks = user_data.get("tasks", {})
        unique_tags = set()
        
        for task_data in tasks.values():
            tags = task_data.get("tags", [])
            unique_tags.update(tags)
        
        return len(unique_tags)

# ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† =====

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
_global_task_service = None

def get_task_service() -> TaskService:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TaskService"""
    global _global_task_service
    if _global_task_service is None:
        _global_task_service = TaskService()
    return _global_task_service

def initialize_task_service(data_service: DataService = None) -> TaskService:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ TaskService"""
    global _global_task_service
    _global_task_service = TaskService(data_service)
    return _global_task_service
