# docker-compose.yml - Docker композиция для полного стека
version: '3.8'

services:
  # Telegram бот
  dailycheck-bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    container_name: dailycheck-bot
    restart: unless-stopped
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ADMIN_USER_ID=${ADMIN_USER_ID}
      - PORT=8080
      - HOST=0.0.0.0
      - DEBUG_MODE=${DEBUG_MODE:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - AI_CHAT_ENABLED=${AI_CHAT_ENABLED:-true}
      - DATABASE_PATH=/app/data/database.json
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backups:/app/backups
      - ./exports:/app/exports
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - dailycheck-network
    labels:
      - "com.dailycheck.service=bot"
      - "com.dailycheck.version=4.0.0"

  # Веб-дашборд
  dailycheck-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: dailycheck-dashboard
    restart: unless-stopped
    environment:
      - DASHBOARD_SECRET_KEY=${DASHBOARD_SECRET_KEY}
      - DATABASE_PATH=/app/data/database.json
      - HOST=0.0.0.0
      - PORT=8081
    volumes:
      - ./data:/app/data:ro  # Read-only доступ к данным
    ports:
      - "8081:8081"
    depends_on:
      - dailycheck-bot
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/stats/global"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - dailycheck-network
    labels:
      - "com.dailycheck.service=dashboard"
      - "com.dailycheck.version=4.0.0"

  # Redis (опционально, для кэширования)
  redis:
    image: redis:7-alpine
    container_name: dailycheck-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - dailycheck-network
    labels:
      - "com.dailycheck.service=redis"

  # Nginx (обратный прокси)
  nginx:
    image: nginx:alpine
    container_name: dailycheck-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - dailycheck-bot
      - dailycheck-dashboard
    networks:
      - dailycheck-network
    labels:
      - "com.dailycheck.service=nginx"

volumes:
  redis-data:
    driver: local

networks:
  dailycheck-network:
    driver: bridge
    labels:
      - "com.dailycheck.network=main"

---

# Dockerfile.bot - Dockerfile для Telegram бота
FROM python:3.11-slim

# Метаданные
LABEL maintainer="AI Assistant <ai@example.com>"
LABEL version="4.0.0"
LABEL description="DailyCheck Bot - Modular Telegram Bot"

# Переменные окружения
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Создаем пользователя для безопасности
RUN groupadd -r botuser && useradd -r -g botuser botuser

# Устанавливаем системные зависимости
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Создаем рабочую директорию
WORKDIR /app

# Копируем файлы зависимостей
COPY requirements.txt requirements-docker.txt ./

# Устанавливаем Python зависимости
RUN pip install --no-cache-dir -r requirements-docker.txt

# Копируем исходный код
COPY . .

# Создаем директории для данных
RUN mkdir -p data logs backups exports && \
    chown -R botuser:botuser /app

# Переключаемся на пользователя без привилегий
USER botuser

# Порт для health checks
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Запуск приложения
CMD ["python", "main.py"]

---

# Dockerfile.dashboard - Dockerfile для веб-дашборда
FROM python:3.11-slim

# Метаданные
LABEL maintainer="AI Assistant <ai@example.com>"
LABEL version="4.0.0"
LABEL description="DailyCheck Dashboard - Web Analytics"

# Переменные окружения
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Создаем пользователя
RUN groupadd -r dashuser && useradd -r -g dashuser dashuser

# Устанавливаем системные зависимости
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Создаем рабочую директорию
WORKDIR /app

# Копируем файлы зависимостей
COPY requirements-web.txt requirements-docker.txt ./

# Устанавливаем зависимости
RUN pip install --no-cache-dir -r requirements-web.txt

# Копируем код дашборда и общие модули
COPY dashboard/ ./dashboard/
COPY config.py database.py models/ ./
COPY shared/ ./shared/

# Создаем директории
RUN mkdir -p data && \
    chown -R dashuser:dashuser /app

# Переключаемся на пользователя
USER dashuser

# Порт для веб-дашборда
EXPOSE 8081

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8081/api/stats/global || exit 1

# Запуск дашборда
CMD ["python", "-m", "uvicorn", "dashboard.app:app", "--host", "0.0.0.0", "--port", "8081"]

---

# render.yaml - Конфигурация для деплоя на Render.com
services:
  # Telegram бот
  - type: web
    name: dailycheck-bot
    env: python
    plan: starter
    buildCommand: pip install -r requirements.txt
    startCommand: python main.py
    healthCheckPath: /health
    envVars:
      - key: BOT_TOKEN
        sync: false
      - key: OPENAI_API_KEY
        sync: false
      - key: ADMIN_USER_ID
        sync: false
      - key: PORT
        value: 10000
      - key: HOST
        value: 0.0.0.0
      - key: LOG_LEVEL
        value: INFO
      - key: DEBUG_MODE
        value: false
      - key: AI_CHAT_ENABLED
        value: true
      - key: PYTHONPATH
        value: /opt/render/project/src
      - key: DATA_DIR
        value: /opt/render/project/src/data
    autoDeploy: true
    
  # Веб-дашборд
  - type: web
    name: dailycheck-dashboard
    env: python
    plan: starter
    buildCommand: pip install -r requirements-web.txt
    startCommand: python -m uvicorn dashboard.app:app --host 0.0.0.0 --port $PORT
    healthCheckPath: /api/stats/global
    envVars:
      - key: DASHBOARD_SECRET_KEY
        generateValue: true
      - key: PORT
        value: 10000
      - key: HOST
        value: 0.0.0.0
      - key: PYTHONPATH
        value: /opt/render/project/src
      - key: DATABASE_PATH
        value: /opt/render/project/src/data/database.json
    autoDeploy: true

---

# nginx.conf - Конфигурация Nginx для production
events {
    worker_connections 1024;
}

http {
    upstream bot_backend {
        server dailycheck-bot:8080;
    }
    
    upstream dashboard_backend {
        server dailycheck-dashboard:8081;
    }
    
    # Основной сервер
    server {
        listen 80;
        server_name _;
        
        # Редирект на HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    # HTTPS сервер
    server {
        listen 443 ssl;
        server_name _;
        
        # SSL конфигурация
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;
        ssl_prefer_server_ciphers off;
        
        # Общие настройки
        client_max_body_size 10M;
        client_body_timeout 60s;
        client_header_timeout 60s;
        keepalive_timeout 65;
        
        # Gzip сжатие
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
        
        # Бот API и health checks
        location /health {
            proxy_pass http://bot_backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /metrics {
            proxy_pass http://bot_backend/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Веб-дашборд
        location / {
            proxy_pass http://dashboard_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket поддержка (если нужно)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # API дашборда
        location /api/ {
            proxy_pass http://dashboard_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS настройки
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        }
        
        # Статические файлы дашборда
        location /static/ {
            proxy_pass http://dashboard_backend;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # Безопасность заголовки
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    }
}

---

# .dockerignore - Исключения для Docker
# Исключаем ненужные файлы из Docker контекста

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Виртуальные окружения
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# Операционная система
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Логи и данные
*.log
logs/
data/
backups/
exports/

# Git
.git/
.gitignore

# Документация
docs/
*.md
!README.md

# Тесты
tests/
test_*
*_test.py

# Разработка
.pytest_cache/
.coverage
htmlcov/
.mypy_cache/
.dmypy.json
dmypy.json

# Docker
Dockerfile*
docker-compose*
.dockerignore

# CI/CD
.github/
.gitlab-ci.yml
.travis.yml

# Конфигурация
*.example
nginx.conf
render.yaml

---

# .gitignore - Git исключения
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# DailyCheck Bot specific
data/
logs/
backups/
exports/
service_account.json
*.db
*.sqlite

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# SSL certificates
ssl/
*.pem
*.key
*.crt

# Temporary files
tmp/
temp/
*.tmp
*.temp
