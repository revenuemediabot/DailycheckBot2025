# ===== requirements.txt =====
python-telegram-bot==20.7
nest-asyncio==1.5.8
python-dotenv==1.0.0
openai==1.6.1
APScheduler==3.10.4
pandas==2.1.4
openpyxl==3.1.2
aiohttp==3.9.1
psutil==5.9.6
requests==2.31.0
pytz==2023.3

# ===== .env =====
BOT_TOKEN=your_bot_token_here
OPENAI_API_KEY=your_openai_key_here
PORT=10000
DEBUG=false

# ===== render.yaml =====
services:
  - type: web
    name: dailycheck-bot
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: python main.py
    envVars:
      - key: BOT_TOKEN
        sync: false
      - key: OPENAI_API_KEY
        sync: false
      - key: PORT
        value: 10000
    scaling:
      minInstances: 1
      maxInstances: 1
    healthCheckPath: /

# ===== Dockerfile =====
FROM python:3.11-slim

WORKDIR /app

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
COPY . .

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
RUN mkdir -p data logs exports

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV PYTHONUNBUFFERED=1
ENV PORT=10000

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import os; print('Health OK')" || exit 1

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞
CMD ["python", "main.py"]

# ===== docker-compose.yml =====
version: '3.8'

services:
  dailycheck-bot:
    build: .
    container_name: dailycheck-bot
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./exports:/app/exports
    environment:
      - PYTHONPATH=/app
    ports:
      - "10000:10000"
    healthcheck:
      test: ["CMD", "python", "-c", "import os; print('Health OK')"]
      interval: 30s
      timeout: 10s
      retries: 3

# ===== tasks.py (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞—á) =====
import uuid
from datetime import date, datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TASK_TITLE, TASK_DESCRIPTION, TASK_PRIORITY, TASK_TAGS = range(4)

async def add_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    await update.message.reply_text(
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='Markdown'
    )
    return TASK_TITLE

async def add_task_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    title = update.message.text.strip()
    
    if len(title) > 100:
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑:"
        )
        return TASK_TITLE
    
    context.user_data['task_title'] = title
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: **{title}**\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        parse_mode='Markdown'
    )
    return TASK_DESCRIPTION

async def add_task_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    description = update.message.text.strip()
    
    if description.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '-']:
        description = None
    elif len(description) > 500:
        await update.message.reply_text(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
        )
        return TASK_DESCRIPTION
    
    context.user_data['task_description'] = description
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    keyboard = [
        [InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="priority_high")],
        [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="priority_medium")],
        [InlineKeyboardButton("üîµ –ù–∏–∑–∫–∏–π", callback_data="priority_low")]
    ]
    
    await update.message.reply_text(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return TASK_PRIORITY

async def add_task_priority(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏"""
    query = update.callback_query
    await query.answer()
    
    priority_map = {
        "priority_high": "high",
        "priority_medium": "medium",
        "priority_low": "low"
    }
    
    priority = priority_map.get(query.data, "medium")
    context.user_data['task_priority'] = priority
    
    await query.edit_message_text(
        f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
    )
    return TASK_TAGS

async def add_task_tags(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    from main import Task  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å Task
    
    tags_text = update.message.text.strip()
    
    if tags_text.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '-']:
        tags = []
    else:
        tags = [tag.strip() for tag in tags_text.split(',') if tag.strip()]
        tags = tags[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 —Ç–µ–≥–æ–≤
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    db = context.application.bot_data['db']
    user = db.get_or_create_user(update.effective_user.id)
    
    task = Task(
        task_id=str(uuid.uuid4()),
        user_id=user.user_id,
        title=context.user_data['task_title'],
        description=context.user_data.get('task_description'),
        priority=context.user_data['task_priority'],
        tags=tags
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user.tasks[task.task_id] = task
    user.stats.total_tasks += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    db.save_all_users()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context.user_data.clear()
    
    from main import format_task_info, get_main_keyboard
    success_text = f"üéâ **–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n{format_task_info(task)}"
    
    await update.message.reply_text(
        success_text,
        reply_markup=get_main_keyboard(),
        parse_mode='Markdown'
    )
    
    return ConversationHandler.END

async def cancel_add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    context.user_data.clear()
    from main import get_main_keyboard
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

# ===== clear_bot.py (—Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤) =====
import asyncio
import os
from telegram import Bot

async def clear_telegram_bot():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–æ—Ç–∞ –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    bot = Bot(token=bot_token)
    
    try:
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–æ—Ç–∞...")
        
        # 1. –£–¥–∞–ª—è–µ–º webhook —Å –æ—á–∏—Å—Ç–∫–æ–π pending updates
        result = await bot.delete_webhook(drop_pending_updates=True)
        print(f"‚úÖ Webhook —É–¥–∞–ª–µ–Ω: {result}")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è updates
        updates = await bot.get_updates(timeout=2)
        print(f"üì® –ù–∞–π–¥–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        
        if updates:
            # –û—á–∏—â–∞–µ–º —Å offset –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ update_id
            last_id = updates[-1].update_id
            await bot.get_updates(offset=last_id + 1, timeout=2)
            print("üßπ –û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")
        
        # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        await asyncio.sleep(2)
        final_updates = await bot.get_updates(timeout=1)
        if final_updates:
            last_id = final_updates[-1].update_id
            await bot.get_updates(offset=last_id + 1, timeout=1)
            print("üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.close()

if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from dotenv import load_dotenv
    load_dotenv()
    
    asyncio.run(clear_telegram_bot())

# ===== Makefile =====
.PHONY: help install start stop logs clean clear-bot deploy

help:
	@echo "DailyCheck Bot v4.0 - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo "  install     - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
	@echo "  start       - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ"
	@echo "  stop        - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"
	@echo "  logs        - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
	@echo "  clean       - –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
	@echo "  clear-bot   - –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ Telegram"
	@echo "  deploy      - –î–µ–ø–ª–æ–π –Ω–∞ Render"

install:
	pip install -r requirements.txt

start:
	python main.py

stop:
	pkill -f "python main.py" || true

logs:
	tail -f bot.log

clean:
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	rm -f bot.log

clear-bot:
	python clear_bot.py

deploy:
	@echo "üöÄ –î–µ–ø–ª–æ–π –Ω–∞ Render.com:"
	@echo "1. –ó–∞–ª–µ–π—Ç–µ –∫–æ–¥ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
	@echo "2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫ Render"
	@echo "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
	@echo "4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π"

# ===== .gitignore =====
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Logs
*.log
logs/
*.log.*

# Environment variables
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Project specific
data/
users_data.json
exports/
backups/
temp/

# ===== README.md =====
# üéØ DailyCheck Bot v4.0

–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –∏ –∑–∞–¥–∞—á.

## ‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- üìù **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏** —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ —Ç–µ–≥–∞–º–∏
- üî• **–°–∏—Å—Ç–µ–º–∞ streak'–æ–≤** –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
- üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
- üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è** —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
- ü§ñ **AI —Å–æ–≤–µ—Ç—ã** –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- üë• **–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏** —Å —Ç–∞–±–ª–∏—Ü–µ–π –ª–∏–¥–µ—Ä–æ–≤
- ‚öôÔ∏è **–ì–∏–±–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏** –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞

```bash
# –ö–ª–æ–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
git clone <your-repo-url>
cd dailycheck-bot

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
pip install -r requirements.txt

# –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
cp .env.example .env
# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª

# –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞
python main.py
```

### –î–µ–ø–ª–æ–π –Ω–∞ Render.com

1. **–ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π** –∫ Render.com
2. **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:**
   - `BOT_TOKEN` - —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç @BotFather
   - `OPENAI_API_KEY` - –∫–ª—é—á OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
3. **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞:**
   - Build Command: `pip install -r requirements.txt`
   - Start Command: `python main.py`
4. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π**

## üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞

- `/start` - –ó–∞–ø—É—Å–∫ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
- `/tasks` - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
- `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- `/help` - –°–ø—Ä–∞–≤–∫–∞

## üõ†Ô∏è –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º

### –ö–æ–Ω—Ñ–ª–∏–∫—Ç "another webhook is active"

```bash
# –û—á–∏—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
python clear_bot.py
```

### –õ–æ–≥–∏ –∏ –æ—Ç–ª–∞–¥–∫–∞

```bash
# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
tail -f bot.log

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
make clean
```

## üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ñ–∞–π–ª–∞—Ö:
- `deployment_guide.md` - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
- `API.md` - –û–ø–∏—Å–∞–Ω–∏–µ API –∏ –∫–æ–º–∞–Ω–¥
- `CHANGELOG.md` - –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

## ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ `bot.log`
2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ `python clear_bot.py`
4. –°–æ–∑–¥–∞–π—Ç–µ issue –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏

---

**DailyCheck Bot v4.0** - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫! üéØ
